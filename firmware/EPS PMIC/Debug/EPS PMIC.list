
EPS PMIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000559c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005748  08005748  00006748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b0  080057b0  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080057b0  080057b0  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080057b0  080057b0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b0  080057b0  000067b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057b4  080057b4  000067b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080057b8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  080057c4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080057c4  000071d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012baf  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbb  00000000  00000000  00019beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  0001c7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ca  00000000  00000000  0001ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030660  00000000  00000000  0001ee8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014483  00000000  00000000  0004f4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f756  00000000  00000000  0006396d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001830c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ee0  00000000  00000000  00183108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00188fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005730 	.word	0x08005730

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08005730 	.word	0x08005730

080001ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__NVIC_GetPriorityGrouping+0x18>)
 80001f2:	68db      	ldr	r3, [r3, #12]
 80001f4:	0a1b      	lsrs	r3, r3, #8
 80001f6:	f003 0307 	and.w	r3, r3, #7
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr
 8000204:	e000ed00 	.word	0xe000ed00

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4907      	ldr	r1, [pc, #28]	@ (8000240 <__NVIC_EnableIRQ+0x38>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100

08000244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	6039      	str	r1, [r7, #0]
 800024e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000254:	2b00      	cmp	r3, #0
 8000256:	db0a      	blt.n	800026e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	b2da      	uxtb	r2, r3
 800025c:	490c      	ldr	r1, [pc, #48]	@ (8000290 <__NVIC_SetPriority+0x4c>)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	0112      	lsls	r2, r2, #4
 8000264:	b2d2      	uxtb	r2, r2
 8000266:	440b      	add	r3, r1
 8000268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800026c:	e00a      	b.n	8000284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4908      	ldr	r1, [pc, #32]	@ (8000294 <__NVIC_SetPriority+0x50>)
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	f003 030f 	and.w	r3, r3, #15
 800027a:	3b04      	subs	r3, #4
 800027c:	0112      	lsls	r2, r2, #4
 800027e:	b2d2      	uxtb	r2, r2
 8000280:	440b      	add	r3, r1
 8000282:	761a      	strb	r2, [r3, #24]
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	e000e100 	.word	0xe000e100
 8000294:	e000ed00 	.word	0xe000ed00

08000298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000298:	b480      	push	{r7}
 800029a:	b089      	sub	sp, #36	@ 0x24
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f003 0307 	and.w	r3, r3, #7
 80002aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ac:	69fb      	ldr	r3, [r7, #28]
 80002ae:	f1c3 0307 	rsb	r3, r3, #7
 80002b2:	2b04      	cmp	r3, #4
 80002b4:	bf28      	it	cs
 80002b6:	2304      	movcs	r3, #4
 80002b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ba:	69fb      	ldr	r3, [r7, #28]
 80002bc:	3304      	adds	r3, #4
 80002be:	2b06      	cmp	r3, #6
 80002c0:	d902      	bls.n	80002c8 <NVIC_EncodePriority+0x30>
 80002c2:	69fb      	ldr	r3, [r7, #28]
 80002c4:	3b03      	subs	r3, #3
 80002c6:	e000      	b.n	80002ca <NVIC_EncodePriority+0x32>
 80002c8:	2300      	movs	r3, #0
 80002ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	f04f 32ff 	mov.w	r2, #4294967295
 80002d0:	69bb      	ldr	r3, [r7, #24]
 80002d2:	fa02 f303 	lsl.w	r3, r2, r3
 80002d6:	43da      	mvns	r2, r3
 80002d8:	68bb      	ldr	r3, [r7, #8]
 80002da:	401a      	ands	r2, r3
 80002dc:	697b      	ldr	r3, [r7, #20]
 80002de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002e0:	f04f 31ff 	mov.w	r1, #4294967295
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ea:	43d9      	mvns	r1, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f0:	4313      	orrs	r3, r2
         );
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3724      	adds	r7, #36	@ 0x24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
	...

08000300 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(const ADC_TypeDef *ADCx, uint32_t Register)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d103      	bne.n	8000318 <LL_ADC_DMA_GetRegAddr+0x18>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t) &(ADCx->DR);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3340      	adds	r3, #64	@ 0x40
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	e001      	b.n	800031c <LL_ADC_DMA_GetRegAddr+0x1c>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register CDR */
    data_reg_addr = (uint32_t) &((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 8000318:	4b04      	ldr	r3, [pc, #16]	@ (800032c <LL_ADC_DMA_GetRegAddr+0x2c>)
 800031a:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 800031c:	68fb      	ldr	r3, [r7, #12]
}
 800031e:	4618      	mov	r0, r3
 8000320:	3714      	adds	r7, #20
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	5004030c 	.word	0x5004030c

08000330 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	431a      	orrs	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	609a      	str	r2, [r3, #8]
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr

08000356 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000356:	b480      	push	{r7}
 8000358:	b087      	sub	sp, #28
 800035a:	af00      	add	r7, sp, #0
 800035c:	60f8      	str	r0, [r7, #12]
 800035e:	60b9      	str	r1, [r7, #8]
 8000360:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3330      	adds	r3, #48	@ 0x30
 8000366:	461a      	mov	r2, r3
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	0a1b      	lsrs	r3, r3, #8
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	f003 030c 	and.w	r3, r3, #12
 8000372:	4413      	add	r3, r2
 8000374:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	f003 031f 	and.w	r3, r3, #31
 8000380:	211f      	movs	r1, #31
 8000382:	fa01 f303 	lsl.w	r3, r1, r3
 8000386:	43db      	mvns	r3, r3
 8000388:	401a      	ands	r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	0e9b      	lsrs	r3, r3, #26
 800038e:	f003 011f 	and.w	r1, r3, #31
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	f003 031f 	and.w	r3, r3, #31
 8000398:	fa01 f303 	lsl.w	r3, r1, r3
 800039c:	431a      	orrs	r2, r3
 800039e:	697b      	ldr	r3, [r7, #20]
 80003a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80003a2:	bf00      	nop
 80003a4:	371c      	adds	r7, #28
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80003ae:	b480      	push	{r7}
 80003b0:	b087      	sub	sp, #28
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	60f8      	str	r0, [r7, #12]
 80003b6:	60b9      	str	r1, [r7, #8]
 80003b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	3314      	adds	r3, #20
 80003be:	461a      	mov	r2, r3
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	0e5b      	lsrs	r3, r3, #25
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	f003 0304 	and.w	r3, r3, #4
 80003ca:	4413      	add	r3, r2
 80003cc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	0d1b      	lsrs	r3, r3, #20
 80003d6:	f003 031f 	and.w	r3, r3, #31
 80003da:	2107      	movs	r1, #7
 80003dc:	fa01 f303 	lsl.w	r3, r1, r3
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	0d1b      	lsrs	r3, r3, #20
 80003e8:	f003 031f 	and.w	r3, r3, #31
 80003ec:	6879      	ldr	r1, [r7, #4]
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	431a      	orrs	r2, r3
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80003f8:	bf00      	nop
 80003fa:	371c      	adds	r7, #28
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800041c:	43db      	mvns	r3, r3
 800041e:	401a      	ands	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f003 0318 	and.w	r3, r3, #24
 8000426:	4908      	ldr	r1, [pc, #32]	@ (8000448 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000428:	40d9      	lsrs	r1, r3
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	400b      	ands	r3, r1
 800042e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000432:	431a      	orrs	r2, r3
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800043a:	bf00      	nop
 800043c:	3714      	adds	r7, #20
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	0007ffff 	.word	0x0007ffff

0800044c <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	691b      	ldr	r3, [r3, #16]
 800045a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800045e:	f023 0303 	bic.w	r3, r3, #3
 8000462:	683a      	ldr	r2, [r7, #0]
 8000464:	431a      	orrs	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	611a      	str	r2, [r3, #16]
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000486:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	6093      	str	r3, [r2, #8]
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	689b      	ldr	r3, [r3, #8]
 80004a6:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80004aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80004ae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr

080004c2 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80004d2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80004d6:	f043 0201 	orr.w	r2, r3, #1
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b083      	sub	sp, #12
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80004fa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80004fe:	f043 0204 	orr.w	r2, r3, #4
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 8000522:	4a0c      	ldr	r2, [pc, #48]	@ (8000554 <LL_DMA_EnableChannel+0x40>)
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	4413      	add	r3, r2
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	461a      	mov	r2, r3
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	4413      	add	r3, r2
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4908      	ldr	r1, [pc, #32]	@ (8000554 <LL_DMA_EnableChannel+0x40>)
 8000534:	683a      	ldr	r2, [r7, #0]
 8000536:	440a      	add	r2, r1
 8000538:	7812      	ldrb	r2, [r2, #0]
 800053a:	4611      	mov	r1, r2
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	440a      	add	r2, r1
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6013      	str	r3, [r2, #0]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	08005748 	.word	0x08005748

08000558 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000558:	b480      	push	{r7}
 800055a:	b087      	sub	sp, #28
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000568:	4a0e      	ldr	r2, [pc, #56]	@ (80005a4 <LL_DMA_SetDataTransferDirection+0x4c>)
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	4413      	add	r3, r2
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	4413      	add	r3, r2
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800057c:	f023 0310 	bic.w	r3, r3, #16
 8000580:	4908      	ldr	r1, [pc, #32]	@ (80005a4 <LL_DMA_SetDataTransferDirection+0x4c>)
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	440a      	add	r2, r1
 8000586:	7812      	ldrb	r2, [r2, #0]
 8000588:	4611      	mov	r1, r2
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	440a      	add	r2, r1
 800058e:	4611      	mov	r1, r2
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	4313      	orrs	r3, r2
 8000594:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000596:	bf00      	nop
 8000598:	371c      	adds	r7, #28
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	08005748 	.word	0x08005748

080005a8 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b087      	sub	sp, #28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80005b8:	4a0d      	ldr	r2, [pc, #52]	@ (80005f0 <LL_DMA_SetMode+0x48>)
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	4413      	add	r3, r2
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	4413      	add	r3, r2
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f023 0220 	bic.w	r2, r3, #32
 80005cc:	4908      	ldr	r1, [pc, #32]	@ (80005f0 <LL_DMA_SetMode+0x48>)
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	440b      	add	r3, r1
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	440b      	add	r3, r1
 80005da:	4619      	mov	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4313      	orrs	r3, r2
 80005e0:	600b      	str	r3, [r1, #0]
             Mode);
}
 80005e2:	bf00      	nop
 80005e4:	371c      	adds	r7, #28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	08005748 	.word	0x08005748

080005f4 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b087      	sub	sp, #28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8000604:	4a0d      	ldr	r2, [pc, #52]	@ (800063c <LL_DMA_SetPeriphIncMode+0x48>)
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	4413      	add	r3, r2
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000618:	4908      	ldr	r1, [pc, #32]	@ (800063c <LL_DMA_SetPeriphIncMode+0x48>)
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	440b      	add	r3, r1
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4619      	mov	r1, r3
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	440b      	add	r3, r1
 8000626:	4619      	mov	r1, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4313      	orrs	r3, r2
 800062c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800062e:	bf00      	nop
 8000630:	371c      	adds	r7, #28
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	08005748 	.word	0x08005748

08000640 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000640:	b480      	push	{r7}
 8000642:	b087      	sub	sp, #28
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000650:	4a0d      	ldr	r2, [pc, #52]	@ (8000688 <LL_DMA_SetMemoryIncMode+0x48>)
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	4413      	add	r3, r2
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000664:	4908      	ldr	r1, [pc, #32]	@ (8000688 <LL_DMA_SetMemoryIncMode+0x48>)
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	440b      	add	r3, r1
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	440b      	add	r3, r1
 8000672:	4619      	mov	r1, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4313      	orrs	r3, r2
 8000678:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800067a:	bf00      	nop
 800067c:	371c      	adds	r7, #28
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	08005748 	.word	0x08005748

0800068c <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 800068c:	b480      	push	{r7}
 800068e:	b087      	sub	sp, #28
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 800069c:	4a0d      	ldr	r2, [pc, #52]	@ (80006d4 <LL_DMA_SetPeriphSize+0x48>)
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	4413      	add	r3, r2
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	4413      	add	r3, r2
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80006b0:	4908      	ldr	r1, [pc, #32]	@ (80006d4 <LL_DMA_SetPeriphSize+0x48>)
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	440b      	add	r3, r1
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	440b      	add	r3, r1
 80006be:	4619      	mov	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80006c6:	bf00      	nop
 80006c8:	371c      	adds	r7, #28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	08005748 	.word	0x08005748

080006d8 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80006d8:	b480      	push	{r7}
 80006da:	b087      	sub	sp, #28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 80006e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <LL_DMA_SetMemorySize+0x48>)
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	4413      	add	r3, r2
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	4413      	add	r3, r2
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80006fc:	4908      	ldr	r1, [pc, #32]	@ (8000720 <LL_DMA_SetMemorySize+0x48>)
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	440b      	add	r3, r1
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	440b      	add	r3, r1
 800070a:	4619      	mov	r1, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4313      	orrs	r3, r2
 8000710:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000712:	bf00      	nop
 8000714:	371c      	adds	r7, #28
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	08005748 	.word	0x08005748

08000724 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000724:	b480      	push	{r7}
 8000726:	b087      	sub	sp, #28
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8000734:	4a0d      	ldr	r2, [pc, #52]	@ (800076c <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	4413      	add	r3, r2
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	4413      	add	r3, r2
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000748:	4908      	ldr	r1, [pc, #32]	@ (800076c <LL_DMA_SetChannelPriorityLevel+0x48>)
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	440b      	add	r3, r1
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	440b      	add	r3, r1
 8000756:	4619      	mov	r1, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4313      	orrs	r3, r2
 800075c:	600b      	str	r3, [r1, #0]
             Priority);
}
 800075e:	bf00      	nop
 8000760:	371c      	adds	r7, #28
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	08005748 	.word	0x08005748

08000770 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000770:	b480      	push	{r7}
 8000772:	b087      	sub	sp, #28
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000780:	4a0d      	ldr	r2, [pc, #52]	@ (80007b8 <LL_DMA_SetDataLength+0x48>)
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	4413      	add	r3, r2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	4413      	add	r3, r2
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	0c1b      	lsrs	r3, r3, #16
 8000792:	041b      	lsls	r3, r3, #16
 8000794:	4908      	ldr	r1, [pc, #32]	@ (80007b8 <LL_DMA_SetDataLength+0x48>)
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	440a      	add	r2, r1
 800079a:	7812      	ldrb	r2, [r2, #0]
 800079c:	4611      	mov	r1, r2
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	440a      	add	r2, r1
 80007a2:	4611      	mov	r1, r2
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80007aa:	bf00      	nop
 80007ac:	371c      	adds	r7, #28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	08005748 	.word	0x08005748

080007bc <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80007bc:	b480      	push	{r7}
 80007be:	b087      	sub	sp, #28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80007ce:	6a3b      	ldr	r3, [r7, #32]
 80007d0:	2b10      	cmp	r3, #16
 80007d2:	d114      	bne.n	80007fe <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 80007d4:	4a17      	ldr	r2, [pc, #92]	@ (8000834 <LL_DMA_ConfigAddresses+0x78>)
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	4413      	add	r3, r2
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	4413      	add	r3, r2
 80007e2:	461a      	mov	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 80007e8:	4a12      	ldr	r2, [pc, #72]	@ (8000834 <LL_DMA_ConfigAddresses+0x78>)
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	4413      	add	r3, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	4413      	add	r3, r2
 80007f6:	461a      	mov	r2, r3
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
  }
}
 80007fc:	e013      	b.n	8000826 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 80007fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000834 <LL_DMA_ConfigAddresses+0x78>)
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	4413      	add	r3, r2
 800080c:	461a      	mov	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 8000812:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <LL_DMA_ConfigAddresses+0x78>)
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	461a      	mov	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	4413      	add	r3, r2
 8000820:	461a      	mov	r2, r3
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	60d3      	str	r3, [r2, #12]
}
 8000826:	bf00      	nop
 8000828:	371c      	adds	r7, #28
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	08005748 	.word	0x08005748

08000838 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8000838:	b480      	push	{r7}
 800083a:	b089      	sub	sp, #36	@ 0x24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	33a8      	adds	r3, #168	@ 0xa8
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	f003 031c 	and.w	r3, r3, #28
 8000852:	210f      	movs	r1, #15
 8000854:	fa01 f303 	lsl.w	r3, r1, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	401a      	ands	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	f003 031c 	and.w	r3, r3, #28
 8000864:	210f      	movs	r1, #15
 8000866:	fa01 f303 	lsl.w	r3, r1, r3
 800086a:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	fa93 f3a3 	rbit	r3, r3
 8000872:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d101      	bne.n	8000882 <LL_DMA_SetPeriphRequest+0x4a>
  {
    return 32U;
 800087e:	2320      	movs	r3, #32
 8000880:	e003      	b.n	800088a <LL_DMA_SetPeriphRequest+0x52>
  }
  return __builtin_clz(value);
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	fab3 f383 	clz	r3, r3
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4619      	mov	r1, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	408b      	lsls	r3, r1
 8000890:	68f9      	ldr	r1, [r7, #12]
 8000892:	31a8      	adds	r1, #168	@ 0xa8
 8000894:	4313      	orrs	r3, r2
 8000896:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << (((Channel) * 4U) & 0x1FU), PeriphRequest << DMA_POSITION_CSELR_CXS(Channel));
}
 8000898:	bf00      	nop
 800089a:	3724      	adds	r7, #36	@ 0x24
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <LL_RCC_HSE_EnableCSS>:
  * @brief  Enable the Clock Security System.
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <LL_RCC_HSE_EnableCSS+0x1c>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <LL_RCC_HSE_EnableCSS+0x1c>)
 80008ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000

080008c4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80008c8:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <LL_RCC_HSE_Enable+0x1c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <LL_RCC_HSE_Enable+0x1c>)
 80008ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008d2:	6013      	str	r3, [r2, #0]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000

080008e4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 80008e8:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <LL_RCC_HSE_IsReady+0x24>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80008f4:	d101      	bne.n	80008fa <LL_RCC_HSE_IsReady+0x16>
 80008f6:	2301      	movs	r3, #1
 80008f8:	e000      	b.n	80008fc <LL_RCC_HSE_IsReady+0x18>
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000

0800090c <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <LL_RCC_HSI48_Enable+0x20>)
 8000912:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000916:	4a05      	ldr	r2, [pc, #20]	@ (800092c <LL_RCC_HSI48_Enable+0x20>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RCC_CRRCR_HSI48RDY) ? 1UL : 0UL);
 8000934:	4b07      	ldr	r3, [pc, #28]	@ (8000954 <LL_RCC_HSI48_IsReady+0x24>)
 8000936:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	2b02      	cmp	r3, #2
 8000940:	d101      	bne.n	8000946 <LL_RCC_HSI48_IsReady+0x16>
 8000942:	2301      	movs	r3, #1
 8000944:	e000      	b.n	8000948 <LL_RCC_HSI48_IsReady+0x18>
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40021000 	.word	0x40021000

08000958 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <LL_RCC_LSE_Enable+0x20>)
 800095e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000962:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <LL_RCC_LSE_Enable+0x20>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000

0800097c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000984:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800098a:	f023 0218 	bic.w	r2, r3, #24
 800098e:	4905      	ldr	r1, [pc, #20]	@ (80009a4 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4313      	orrs	r3, r2
 8000994:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	40021000 	.word	0x40021000

080009a8 <LL_RCC_LSE_EnableCSS>:
  * @brief  Enable Clock security system on LSE.
  * @rmtoll BDCR         LSECSSON      LL_RCC_LSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableCSS(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <LL_RCC_LSE_EnableCSS+0x20>)
 80009ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009b2:	4a05      	ldr	r2, [pc, #20]	@ (80009c8 <LL_RCC_LSE_EnableCSS+0x20>)
 80009b4:	f043 0320 	orr.w	r3, r3, #32
 80009b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80009d0:	4b07      	ldr	r3, [pc, #28]	@ (80009f0 <LL_RCC_LSE_IsReady+0x24>)
 80009d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d101      	bne.n	80009e2 <LL_RCC_LSE_IsReady+0x16>
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <LL_RCC_LSE_IsReady+0x18>
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40021000 	.word	0x40021000

080009f4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <LL_RCC_SetSysClkSource+0x24>)
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f023 0203 	bic.w	r2, r3, #3
 8000a04:	4904      	ldr	r1, [pc, #16]	@ (8000a18 <LL_RCC_SetSysClkSource+0x24>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	608b      	str	r3, [r1, #8]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	40021000 	.word	0x40021000

08000a1c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a20:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <LL_RCC_GetSysClkSource+0x18>)
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	f003 030c 	and.w	r3, r3, #12
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <LL_RCC_SetAHBPrescaler+0x24>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000a48:	4904      	ldr	r1, [pc, #16]	@ (8000a5c <LL_RCC_SetAHBPrescaler+0x24>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	608b      	str	r3, [r1, #8]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	40021000 	.word	0x40021000

08000a60 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000a70:	4904      	ldr	r1, [pc, #16]	@ (8000a84 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	608b      	str	r3, [r1, #8]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000

08000a88 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000a98:	4904      	ldr	r1, [pc, #16]	@ (8000aac <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	608b      	str	r3, [r1, #8]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	40021000 	.word	0x40021000

08000ab0 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <LL_RCC_SetUSARTClockSource+0x30>)
 8000aba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	0c1b      	lsrs	r3, r3, #16
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	4905      	ldr	r1, [pc, #20]	@ (8000ae0 <LL_RCC_SetUSARTClockSource+0x30>)
 8000acc:	4313      	orrs	r3, r2
 8000ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <LL_RCC_SetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUARTClockSource(uint32_t UARTxSource)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (UARTxSource >> 16U), (UARTxSource & 0x0000FFFFU));
 8000aec:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <LL_RCC_SetUARTClockSource+0x30>)
 8000aee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	0c1b      	lsrs	r3, r3, #16
 8000af6:	43db      	mvns	r3, r3
 8000af8:	401a      	ands	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	4905      	ldr	r1, [pc, #20]	@ (8000b14 <LL_RCC_SetUARTClockSource+0x30>)
 8000b00:	4313      	orrs	r3, r2
 8000b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000

08000b18 <LL_RCC_SetUSBClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSBClockSource(uint32_t USBxSource)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, USBxSource);
 8000b20:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <LL_RCC_SetUSBClockSource+0x28>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8000b2a:	4905      	ldr	r1, [pc, #20]	@ (8000b40 <LL_RCC_SetUSBClockSource+0x28>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	40021000 	.word	0x40021000

08000b44 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000b4c:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <LL_RCC_SetADCClockSource+0x28>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b52:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8000b56:	4905      	ldr	r1, [pc, #20]	@ (8000b6c <LL_RCC_SetADCClockSource+0x28>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	40021000 	.word	0x40021000

08000b70 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000b78:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <LL_RCC_SetRTCClockSource+0x28>)
 8000b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000b82:	4905      	ldr	r1, [pc, #20]	@ (8000b98 <LL_RCC_SetRTCClockSource+0x28>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	40021000 	.word	0x40021000

08000b9c <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <LL_RCC_GetRTCClockSource+0x18>)
 8000ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ba6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <LL_RCC_EnableRTC+0x20>)
 8000bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <LL_RCC_EnableRTC+0x20>)
 8000bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000

08000bdc <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <LL_RCC_ForceBackupDomainReset+0x20>)
 8000be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000be6:	4a05      	ldr	r2, [pc, #20]	@ (8000bfc <LL_RCC_ForceBackupDomainReset+0x20>)
 8000be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000

08000c00 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c0a:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000

08000c24 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000c28:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <LL_RCC_PLL_Enable+0x1c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <LL_RCC_PLL_Enable+0x1c>)
 8000c2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <LL_RCC_PLL_IsReady+0x24>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000c54:	d101      	bne.n	8000c5a <LL_RCC_PLL_IsReady+0x16>
 8000c56:	2301      	movs	r3, #1
 8000c58:	e000      	b.n	8000c5c <LL_RCC_PLL_IsReady+0x18>
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000

08000c6c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000c7c:	68da      	ldr	r2, [r3, #12]
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	68f9      	ldr	r1, [r7, #12]
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	4311      	orrs	r1, r2
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	0212      	lsls	r2, r2, #8
 8000c8c:	4311      	orrs	r1, r2
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	430a      	orrs	r2, r1
 8000c92:	4904      	ldr	r1, [pc, #16]	@ (8000ca4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000c94:	4313      	orrs	r3, r2
 8000c96:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	f9ff808c 	.word	0xf9ff808c

08000cac <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000cb0:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000

08000ccc <LL_RCC_PLLSAI1_Enable>:
  * @brief  Enable PLLSAI1
  * @rmtoll CR           PLLSAI1ON     LL_RCC_PLLSAI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_Enable(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <LL_RCC_PLLSAI1_Enable+0x1c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <LL_RCC_PLLSAI1_Enable+0x1c>)
 8000cd6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000

08000cec <LL_RCC_PLLSAI1_IsReady>:
  * @brief  Check if PLLSAI1 Ready
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <LL_RCC_PLLSAI1_IsReady+0x24>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000cf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000cfc:	d101      	bne.n	8000d02 <LL_RCC_PLLSAI1_IsReady+0x16>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <LL_RCC_PLLSAI1_IsReady+0x18>
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000

08000d14 <LL_RCC_PLLSAI1_ConfigDomain_ADC>:
  *         @arg @ref LL_RCC_PLLSAI1R_DIV_6
  *         @arg @ref LL_RCC_PLLSAI1R_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_ADC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8000d2a:	68f9      	ldr	r1, [r7, #12]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	430b      	orrs	r3, r1
 8000d30:	490a      	ldr	r1, [pc, #40]	@ (8000d5c <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 8000d32:	4313      	orrs	r3, r2
 8000d34:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1R, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLR);
 8000d36:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8000d3e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	0211      	lsls	r1, r2, #8
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	4904      	ldr	r1, [pc, #16]	@ (8000d5c <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	610b      	str	r3, [r1, #16]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	40021000 	.word	0x40021000

08000d60 <LL_RCC_PLLSAI1_EnableDomain_ADC>:
  * @brief  Enable PLLSAI1 output mapped on ADC domain clock
  * @rmtoll PLLSAI1CFGR  PLLSAI1REN    LL_RCC_PLLSAI1_EnableDomain_ADC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_ADC(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1REN);
 8000d64:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <LL_RCC_PLLSAI1_EnableDomain_ADC+0x1c>)
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <LL_RCC_PLLSAI1_EnableDomain_ADC+0x1c>)
 8000d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d6e:	6113      	str	r3, [r2, #16]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000

08000d80 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000d8c:	4907      	ldr	r1, [pc, #28]	@ (8000dac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d94:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d96:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	bf00      	nop
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	40021000 	.word	0x40021000

08000db0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000db8:	4b08      	ldr	r3, [pc, #32]	@ (8000ddc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000dba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000dbc:	4907      	ldr	r1, [pc, #28]	@ (8000ddc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000dc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	40021000 	.word	0x40021000

08000de0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000dec:	4907      	ldr	r1, [pc, #28]	@ (8000e0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000df4:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000df6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	40021000 	.word	0x40021000

08000e10 <LL_APB1_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8000e18:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <LL_APB1_GRP1_IsEnabledClock+0x28>)
 8000e1a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d101      	bne.n	8000e2a <LL_APB1_GRP1_IsEnabledClock+0x1a>
 8000e26:	2301      	movs	r3, #1
 8000e28:	e000      	b.n	8000e2c <LL_APB1_GRP1_IsEnabledClock+0x1c>
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	40021000 	.word	0x40021000

08000e3c <LL_APB1_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <LL_APB1_GRP1_DisableClock+0x24>)
 8000e46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	4904      	ldr	r1, [pc, #16]	@ (8000e60 <LL_APB1_GRP1_DisableClock+0x24>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e70:	4907      	ldr	r1, [pc, #28]	@ (8000e90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e78:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e7a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e82:	68fb      	ldr	r3, [r7, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	40021000 	.word	0x40021000

08000e94 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <LL_FLASH_SetLatency+0x24>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f023 0207 	bic.w	r2, r3, #7
 8000ea4:	4904      	ldr	r1, [pc, #16]	@ (8000eb8 <LL_FLASH_SetLatency+0x24>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	600b      	str	r3, [r1, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	40022000 	.word	0x40022000

08000ebc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <LL_FLASH_GetLatency+0x18>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 0307 	and.w	r3, r3, #7
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40022000 	.word	0x40022000

08000ed8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000ee8:	4904      	ldr	r1, [pc, #16]	@ (8000efc <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	600b      	str	r3, [r1, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	40007000 	.word	0x40007000

08000f00 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <LL_PWR_EnableBkUpAccess+0x1c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <LL_PWR_EnableBkUpAccess+0x1c>)
 8000f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40007000 	.word	0x40007000

08000f20 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <LL_PWR_IsEnabledBkUpAccess+0x24>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f30:	d101      	bne.n	8000f36 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40007000 	.word	0x40007000

08000f48 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000f4c:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f58:	d101      	bne.n	8000f5e <LL_PWR_IsActiveFlag_VOS+0x16>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <LL_PWR_IsActiveFlag_VOS+0x18>
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40007000 	.word	0x40007000

08000f70 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f023 0210 	bic.w	r2, r3, #16
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	431a      	orrs	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	605a      	str	r2, [r3, #4]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f043 0208 	orr.w	r2, r3, #8
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	605a      	str	r2, [r3, #4]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	601a      	str	r2, [r3, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d028      	beq.n	800103a <LL_TIM_OC_DisableFast+0x62>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	d023      	beq.n	8001036 <LL_TIM_OC_DisableFast+0x5e>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2b10      	cmp	r3, #16
 8000ff2:	d01e      	beq.n	8001032 <LL_TIM_OC_DisableFast+0x5a>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b40      	cmp	r3, #64	@ 0x40
 8000ff8:	d019      	beq.n	800102e <LL_TIM_OC_DisableFast+0x56>
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001000:	d013      	beq.n	800102a <LL_TIM_OC_DisableFast+0x52>
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001008:	d00d      	beq.n	8001026 <LL_TIM_OC_DisableFast+0x4e>
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001010:	d007      	beq.n	8001022 <LL_TIM_OC_DisableFast+0x4a>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001018:	d101      	bne.n	800101e <LL_TIM_OC_DisableFast+0x46>
 800101a:	2307      	movs	r3, #7
 800101c:	e00e      	b.n	800103c <LL_TIM_OC_DisableFast+0x64>
 800101e:	2308      	movs	r3, #8
 8001020:	e00c      	b.n	800103c <LL_TIM_OC_DisableFast+0x64>
 8001022:	2306      	movs	r3, #6
 8001024:	e00a      	b.n	800103c <LL_TIM_OC_DisableFast+0x64>
 8001026:	2305      	movs	r3, #5
 8001028:	e008      	b.n	800103c <LL_TIM_OC_DisableFast+0x64>
 800102a:	2304      	movs	r3, #4
 800102c:	e006      	b.n	800103c <LL_TIM_OC_DisableFast+0x64>
 800102e:	2303      	movs	r3, #3
 8001030:	e004      	b.n	800103c <LL_TIM_OC_DisableFast+0x64>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <LL_TIM_OC_DisableFast+0x64>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <LL_TIM_OC_DisableFast+0x64>
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3318      	adds	r3, #24
 8001042:	4619      	mov	r1, r3
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	4a0b      	ldr	r2, [pc, #44]	@ (8001074 <LL_TIM_OC_DisableFast+0x9c>)
 8001048:	5cd3      	ldrb	r3, [r2, r3]
 800104a:	440b      	add	r3, r1
 800104c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	4908      	ldr	r1, [pc, #32]	@ (8001078 <LL_TIM_OC_DisableFast+0xa0>)
 8001056:	5ccb      	ldrb	r3, [r1, r3]
 8001058:	4619      	mov	r1, r3
 800105a:	2304      	movs	r3, #4
 800105c:	408b      	lsls	r3, r1
 800105e:	43db      	mvns	r3, r3
 8001060:	401a      	ands	r2, r3
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	601a      	str	r2, [r3, #0]

}
 8001066:	bf00      	nop
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	08005750 	.word	0x08005750
 8001078:	0800575c 	.word	0x0800575c

0800107c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d028      	beq.n	80010de <LL_TIM_OC_EnablePreload+0x62>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2b04      	cmp	r3, #4
 8001090:	d023      	beq.n	80010da <LL_TIM_OC_EnablePreload+0x5e>
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2b10      	cmp	r3, #16
 8001096:	d01e      	beq.n	80010d6 <LL_TIM_OC_EnablePreload+0x5a>
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	2b40      	cmp	r3, #64	@ 0x40
 800109c:	d019      	beq.n	80010d2 <LL_TIM_OC_EnablePreload+0x56>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010a4:	d013      	beq.n	80010ce <LL_TIM_OC_EnablePreload+0x52>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ac:	d00d      	beq.n	80010ca <LL_TIM_OC_EnablePreload+0x4e>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010b4:	d007      	beq.n	80010c6 <LL_TIM_OC_EnablePreload+0x4a>
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010bc:	d101      	bne.n	80010c2 <LL_TIM_OC_EnablePreload+0x46>
 80010be:	2307      	movs	r3, #7
 80010c0:	e00e      	b.n	80010e0 <LL_TIM_OC_EnablePreload+0x64>
 80010c2:	2308      	movs	r3, #8
 80010c4:	e00c      	b.n	80010e0 <LL_TIM_OC_EnablePreload+0x64>
 80010c6:	2306      	movs	r3, #6
 80010c8:	e00a      	b.n	80010e0 <LL_TIM_OC_EnablePreload+0x64>
 80010ca:	2305      	movs	r3, #5
 80010cc:	e008      	b.n	80010e0 <LL_TIM_OC_EnablePreload+0x64>
 80010ce:	2304      	movs	r3, #4
 80010d0:	e006      	b.n	80010e0 <LL_TIM_OC_EnablePreload+0x64>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e004      	b.n	80010e0 <LL_TIM_OC_EnablePreload+0x64>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e002      	b.n	80010e0 <LL_TIM_OC_EnablePreload+0x64>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <LL_TIM_OC_EnablePreload+0x64>
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3318      	adds	r3, #24
 80010e6:	4619      	mov	r1, r3
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <LL_TIM_OC_EnablePreload+0x98>)
 80010ec:	5cd3      	ldrb	r3, [r2, r3]
 80010ee:	440b      	add	r3, r1
 80010f0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	4907      	ldr	r1, [pc, #28]	@ (8001118 <LL_TIM_OC_EnablePreload+0x9c>)
 80010fa:	5ccb      	ldrb	r3, [r1, r3]
 80010fc:	4619      	mov	r1, r3
 80010fe:	2308      	movs	r3, #8
 8001100:	408b      	lsls	r3, r1
 8001102:	431a      	orrs	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	601a      	str	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	08005750 	.word	0x08005750
 8001118:	0800575c 	.word	0x0800575c

0800111c <LL_TIM_DisableExternalClock>:
  * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	609a      	str	r2, [r3, #8]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	605a      	str	r2, [r3, #4]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	609a      	str	r2, [r3, #8]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <LL_TIM_ConfigETR>:
  *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
                                      uint32_t ETRFilter)
{
 8001182:	b480      	push	{r7}
 8001184:	b085      	sub	sp, #20
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f423 423f 	bic.w	r2, r3, #48896	@ 0xbf00
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4319      	orrs	r1, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	430b      	orrs	r3, r1
 80011a2:	431a      	orrs	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	609a      	str	r2, [r3, #8]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <LL_TIM_SetOCRefClearInputSource>:
  *         @arg @ref LL_TIM_OCREF_CLR_INT_NC
  *         @arg @ref LL_TIM_OCREF_CLR_INT_ETR
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSource)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f023 0208 	bic.w	r2, r3, #8
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	609a      	str	r2, [r3, #8]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	609a      	str	r2, [r3, #8]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001226:	b480      	push	{r7}
 8001228:	b089      	sub	sp, #36	@ 0x24
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	e853 3f00 	ldrex	r3, [r3]
 8001238:	60bb      	str	r3, [r7, #8]
   return(result);
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	f043 0320 	orr.w	r3, r3, #32
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69fa      	ldr	r2, [r7, #28]
 8001246:	61ba      	str	r2, [r7, #24]
 8001248:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800124a:	6979      	ldr	r1, [r7, #20]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	e841 2300 	strex	r3, r2, [r1]
 8001252:	613b      	str	r3, [r7, #16]
   return(result);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1e9      	bne.n	800122e <LL_USART_EnableIT_RXNE+0x8>
}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	3724      	adds	r7, #36	@ 0x24
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128a:	f001 ff2e 	bl	80030ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128e:	f000 f8d5 	bl	800143c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001292:	f000 f93b 	bl	800150c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001296:	f001 f8ff 	bl	8002498 <MX_GPIO_Init>
  MX_DMA_Init();
 800129a:	f001 f8d6 	bl	800244a <MX_DMA_Init>
  MX_CAN1_Init();
 800129e:	f000 fc67 	bl	8001b70 <MX_CAN1_Init>
  MX_CAN2_Init();
 80012a2:	f000 fc99 	bl	8001bd8 <MX_CAN2_Init>
  MX_QUADSPI_Init();
 80012a6:	f000 fd0b 	bl	8001cc0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80012aa:	f000 fd35 	bl	8001d18 <MX_RTC_Init>
  MX_UART4_Init();
 80012ae:	f000 ff1b 	bl	80020e8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80012b2:	f000 ff7f 	bl	80021b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80012b6:	f000 fff7 	bl	80022a8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80012ba:	f001 f859 	bl	8002370 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80012be:	f000 f93d 	bl	800153c <MX_ADC1_Init>
  MX_ADC3_Init();
 80012c2:	f000 fb2b 	bl	800191c <MX_ADC3_Init>
  MX_USB_OTG_FS_USB_Init();
 80012c6:	f001 f8b9 	bl	800243c <MX_USB_OTG_FS_USB_Init>
  MX_I2C1_Init();
 80012ca:	f000 fcb9 	bl	8001c40 <MX_I2C1_Init>
  MX_SPI2_Init();
 80012ce:	f000 fd7b 	bl	8001dc8 <MX_SPI2_Init>
  MX_TIM3_Init();
 80012d2:	f000 fde7 	bl	8001ea4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012d6:	f000 fe6d 	bl	8001fb4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	LL_USART_EnableIT_RXNE(USART1);				// DEBUG
 80012da:	4846      	ldr	r0, [pc, #280]	@ (80013f4 <main+0x170>)
 80012dc:	f7ff ffa3 	bl	8001226 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_RXNE(USART2);				// Uart  SR-PMIC
 80012e0:	4845      	ldr	r0, [pc, #276]	@ (80013f8 <main+0x174>)
 80012e2:	f7ff ffa0 	bl	8001226 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_RXNE(USART3);				// Uart  OBC-PMIC
 80012e6:	4845      	ldr	r0, [pc, #276]	@ (80013fc <main+0x178>)
 80012e8:	f7ff ff9d 	bl	8001226 <LL_USART_EnableIT_RXNE>

	LL_DMA_ConfigAddresses(DMA1,				// DMA1_CHANNEL1 FOR ADC1
 80012ec:	2100      	movs	r1, #0
 80012ee:	4844      	ldr	r0, [pc, #272]	@ (8001400 <main+0x17c>)
 80012f0:	f7ff f806 	bl	8000300 <LL_ADC_DMA_GetRegAddr>
 80012f4:	4602      	mov	r2, r0
 80012f6:	4943      	ldr	r1, [pc, #268]	@ (8001404 <main+0x180>)
 80012f8:	2300      	movs	r3, #0
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	460b      	mov	r3, r1
 80012fe:	2100      	movs	r1, #0
 8001300:	4841      	ldr	r0, [pc, #260]	@ (8001408 <main+0x184>)
 8001302:	f7ff fa5b 	bl	80007bc <LL_DMA_ConfigAddresses>
			LL_DMA_CHANNEL_1,
			LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
			(uint32_t)adc1_Val,
			LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 15);			// configure DMA length
 8001306:	220f      	movs	r2, #15
 8001308:	2100      	movs	r1, #0
 800130a:	483f      	ldr	r0, [pc, #252]	@ (8001408 <main+0x184>)
 800130c:	f7ff fa30 	bl	8000770 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);				// enable DMA stream
 8001310:	2100      	movs	r1, #0
 8001312:	483d      	ldr	r0, [pc, #244]	@ (8001408 <main+0x184>)
 8001314:	f7ff f8fe 	bl	8000514 <LL_DMA_EnableChannel>
	LL_ADC_Enable(ADC1);										// enable ADC
 8001318:	4839      	ldr	r0, [pc, #228]	@ (8001400 <main+0x17c>)
 800131a:	f7ff f8d2 	bl	80004c2 <LL_ADC_Enable>
	LL_ADC_REG_StartConversion(ADC1);							// start conversion
 800131e:	4838      	ldr	r0, [pc, #224]	@ (8001400 <main+0x17c>)
 8001320:	f7ff f8e3 	bl	80004ea <LL_ADC_REG_StartConversion>

	LL_DMA_ConfigAddresses(DMA1,								// DMA1_CHANNEL3 FOR ADC3
 8001324:	2100      	movs	r1, #0
 8001326:	4839      	ldr	r0, [pc, #228]	@ (800140c <main+0x188>)
 8001328:	f7fe ffea 	bl	8000300 <LL_ADC_DMA_GetRegAddr>
 800132c:	4602      	mov	r2, r0
 800132e:	4938      	ldr	r1, [pc, #224]	@ (8001410 <main+0x18c>)
 8001330:	2300      	movs	r3, #0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	460b      	mov	r3, r1
 8001336:	2102      	movs	r1, #2
 8001338:	4833      	ldr	r0, [pc, #204]	@ (8001408 <main+0x184>)
 800133a:	f7ff fa3f 	bl	80007bc <LL_DMA_ConfigAddresses>
			LL_DMA_CHANNEL_3,
			LL_ADC_DMA_GetRegAddr(ADC3, LL_ADC_DMA_REG_REGULAR_DATA),
			(uint32_t)adc3_Val,
			LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, 6);			// configure DMA length
 800133e:	2206      	movs	r2, #6
 8001340:	2102      	movs	r1, #2
 8001342:	4831      	ldr	r0, [pc, #196]	@ (8001408 <main+0x184>)
 8001344:	f7ff fa14 	bl	8000770 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);				// enable DMA stream
 8001348:	2102      	movs	r1, #2
 800134a:	482f      	ldr	r0, [pc, #188]	@ (8001408 <main+0x184>)
 800134c:	f7ff f8e2 	bl	8000514 <LL_DMA_EnableChannel>
	LL_ADC_Enable(ADC3);										// enable ADC
 8001350:	482e      	ldr	r0, [pc, #184]	@ (800140c <main+0x188>)
 8001352:	f7ff f8b6 	bl	80004c2 <LL_ADC_Enable>
	LL_ADC_REG_StartConversion(ADC3);							// start conversion
 8001356:	482d      	ldr	r0, [pc, #180]	@ (800140c <main+0x188>)
 8001358:	f7ff f8c7 	bl	80004ea <LL_ADC_REG_StartConversion>

	pmic_2_sric_tx_buffer[0]=0xEF;								// HEADER SETUP
 800135c:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <main+0x190>)
 800135e:	22ef      	movs	r2, #239	@ 0xef
 8001360:	701a      	strb	r2, [r3, #0]
	pmic_2_sric_tx_buffer[1]=0X00;
 8001362:	4b2c      	ldr	r3, [pc, #176]	@ (8001414 <main+0x190>)
 8001364:	2200      	movs	r2, #0
 8001366:	705a      	strb	r2, [r3, #1]
	pmic_2_obc_tx_buffer[0]=0xEB;
 8001368:	4b2b      	ldr	r3, [pc, #172]	@ (8001418 <main+0x194>)
 800136a:	22eb      	movs	r2, #235	@ 0xeb
 800136c:	701a      	strb	r2, [r3, #0]
	pmic_2_obc_tx_buffer[1]=0X00;
 800136e:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <main+0x194>)
 8001370:	2200      	movs	r2, #0
 8001372:	705a      	strb	r2, [r3, #1]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		while(!flagDMATC1);
 8001374:	bf00      	nop
 8001376:	4b29      	ldr	r3, [pc, #164]	@ (800141c <main+0x198>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0fb      	beq.n	8001376 <main+0xf2>
		// clear flag
		flagDMATC1 = 0;
 800137e:	4b27      	ldr	r3, [pc, #156]	@ (800141c <main+0x198>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
		while(!flagDMATC3);
 8001384:	bf00      	nop
 8001386:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <main+0x19c>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0fb      	beq.n	8001386 <main+0x102>
		// clear flag
		flagDMATC3 = 0;
 800138e:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <main+0x19c>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]

		/*--------------------------------------------------------------------------------------------*/
		/* UART SRIC_2_PMIC --------------------------------------------------------------------------*/
		/*--------------------------------------------------------------------------------------------*/
		if(sric_2_pmic_rx_complete_flag == 1)
 8001394:	4b23      	ldr	r3, [pc, #140]	@ (8001424 <main+0x1a0>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d10c      	bne.n	80013b6 <main+0x132>
		{
			sric_2_pmic_rx_complete_flag = 0;
 800139c:	4b21      	ldr	r3, [pc, #132]	@ (8001424 <main+0x1a0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
			if(SRIC_2_PMIC_Check_CHKSUM(&sric_2_pmic_rx_buffer[0]) == 1){
 80013a2:	4821      	ldr	r0, [pc, #132]	@ (8001428 <main+0x1a4>)
 80013a4:	f001 f94b 	bl	800263e <SRIC_2_PMIC_Check_CHKSUM>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d103      	bne.n	80013b6 <main+0x132>
				SRIC_2_PMIC_Parsing(&sric_2_pmic_rx_buffer[0], &sr2pm);
 80013ae:	491f      	ldr	r1, [pc, #124]	@ (800142c <main+0x1a8>)
 80013b0:	481d      	ldr	r0, [pc, #116]	@ (8001428 <main+0x1a4>)
 80013b2:	f001 f975 	bl	80026a0 <SRIC_2_PMIC_Parsing>
			}
		}
		/*--------------------------------------------------------------------------------------------*/
		/* UART OBC_2_PMIC ---------------------------------------------------------------------------*/
		/*--------------------------------------------------------------------------------------------*/
		if(obc_2_pmic_rx_complete_flag == 1)
 80013b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001430 <main+0x1ac>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d10c      	bne.n	80013d8 <main+0x154>
		{
			obc_2_pmic_rx_complete_flag = 0;
 80013be:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <main+0x1ac>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
			if(OBC_2_PMIC_Check_CHKSUM(&obc_2_pmic_rx_buffer[0]) == 1){
 80013c4:	481b      	ldr	r0, [pc, #108]	@ (8001434 <main+0x1b0>)
 80013c6:	f001 f9b6 	bl	8002736 <OBC_2_PMIC_Check_CHKSUM>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d103      	bne.n	80013d8 <main+0x154>
				OBC_2_PMIC_Parsing(&obc_2_pmic_rx_buffer[0], &obc2pm);
 80013d0:	4919      	ldr	r1, [pc, #100]	@ (8001438 <main+0x1b4>)
 80013d2:	4818      	ldr	r0, [pc, #96]	@ (8001434 <main+0x1b0>)
 80013d4:	f001 f9e0 	bl	8002798 <OBC_2_PMIC_Parsing>
			}
		}
		/* CONFIGURE SATELLITE POWER -----------------------------------------------------------------*/
		PMIC_CONFIG_SAT_POWER( &obc2pm );
 80013d8:	4817      	ldr	r0, [pc, #92]	@ (8001438 <main+0x1b4>)
 80013da:	f001 fa29 	bl	8002830 <PMIC_CONFIG_SAT_POWER>




		/* SEND DATA PMIC_2_SRIC ---------------------------------------------------------------------*/
		SEND_DATA_UART(&pmic_2_sric_tx_buffer[0], USART2, 20);// CONTAINS CHKSUM GENRATOR
 80013de:	2214      	movs	r2, #20
 80013e0:	4905      	ldr	r1, [pc, #20]	@ (80013f8 <main+0x174>)
 80013e2:	480c      	ldr	r0, [pc, #48]	@ (8001414 <main+0x190>)
 80013e4:	f001 faec 	bl	80029c0 <SEND_DATA_UART>
		/* SEND DATA PMIC_2_OBC ----------------------------------------------------------------------*/
		SEND_DATA_UART(&pmic_2_obc_tx_buffer[0], USART3, 20);
 80013e8:	2214      	movs	r2, #20
 80013ea:	4904      	ldr	r1, [pc, #16]	@ (80013fc <main+0x178>)
 80013ec:	480a      	ldr	r0, [pc, #40]	@ (8001418 <main+0x194>)
 80013ee:	f001 fae7 	bl	80029c0 <SEND_DATA_UART>
		while(!flagDMATC1);
 80013f2:	e7bf      	b.n	8001374 <main+0xf0>
 80013f4:	40013800 	.word	0x40013800
 80013f8:	40004400 	.word	0x40004400
 80013fc:	40004800 	.word	0x40004800
 8001400:	50040000 	.word	0x50040000
 8001404:	2000011c 	.word	0x2000011c
 8001408:	40020000 	.word	0x40020000
 800140c:	50040200 	.word	0x50040200
 8001410:	2000013c 	.word	0x2000013c
 8001414:	20000148 	.word	0x20000148
 8001418:	2000015c 	.word	0x2000015c
 800141c:	20000118 	.word	0x20000118
 8001420:	20000119 	.word	0x20000119
 8001424:	200001b0 	.word	0x200001b0
 8001428:	2000019c 	.word	0x2000019c
 800142c:	20000170 	.word	0x20000170
 8001430:	200001c8 	.word	0x200001c8
 8001434:	200001b4 	.word	0x200001b4
 8001438:	20000180 	.word	0x20000180

0800143c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001440:	2004      	movs	r0, #4
 8001442:	f7ff fd27 	bl	8000e94 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001446:	bf00      	nop
 8001448:	f7ff fd38 	bl	8000ebc <LL_FLASH_GetLatency>
 800144c:	4603      	mov	r3, r0
 800144e:	2b04      	cmp	r3, #4
 8001450:	d1fa      	bne.n	8001448 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001452:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001456:	f7ff fd3f 	bl	8000ed8 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 800145a:	bf00      	nop
 800145c:	f7ff fd74 	bl	8000f48 <LL_PWR_IsActiveFlag_VOS>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1fa      	bne.n	800145c <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSE_Enable();
 8001466:	f7ff fa2d 	bl	80008c4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800146a:	bf00      	nop
 800146c:	f7ff fa3a 	bl	80008e4 <LL_RCC_HSE_IsReady>
 8001470:	4603      	mov	r3, r0
 8001472:	2b01      	cmp	r3, #1
 8001474:	d1fa      	bne.n	800146c <SystemClock_Config+0x30>
  {

  }
  LL_RCC_HSI48_Enable();
 8001476:	f7ff fa49 	bl	800090c <LL_RCC_HSI48_Enable>

   /* Wait till HSI48 is ready */
  while(LL_RCC_HSI48_IsReady() != 1)
 800147a:	bf00      	nop
 800147c:	f7ff fa58 	bl	8000930 <LL_RCC_HSI48_IsReady>
 8001480:	4603      	mov	r3, r0
 8001482:	2b01      	cmp	r3, #1
 8001484:	d1fa      	bne.n	800147c <SystemClock_Config+0x40>
  {

  }
  LL_PWR_EnableBkUpAccess();
 8001486:	f7ff fd3b 	bl	8000f00 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff fa76 	bl	800097c <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8001490:	f7ff fa62 	bl	8000958 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8001494:	bf00      	nop
 8001496:	f7ff fa99 	bl	80009cc <LL_RCC_LSE_IsReady>
 800149a:	4603      	mov	r3, r0
 800149c:	2b01      	cmp	r3, #1
 800149e:	d1fa      	bne.n	8001496 <SystemClock_Config+0x5a>
  {

  }
  LL_RCC_HSE_EnableCSS();
 80014a0:	f7ff fa00 	bl	80008a4 <LL_RCC_HSE_EnableCSS>
  LL_RCC_LSE_EnableCSS();
 80014a4:	f7ff fa80 	bl	80009a8 <LL_RCC_LSE_EnableCSS>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_2);
 80014a8:	2300      	movs	r3, #0
 80014aa:	220a      	movs	r2, #10
 80014ac:	2100      	movs	r1, #0
 80014ae:	2003      	movs	r0, #3
 80014b0:	f7ff fbdc 	bl	8000c6c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80014b4:	f7ff fbfa 	bl	8000cac <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80014b8:	f7ff fbb4 	bl	8000c24 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80014bc:	bf00      	nop
 80014be:	f7ff fbc1 	bl	8000c44 <LL_RCC_PLL_IsReady>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d1fa      	bne.n	80014be <SystemClock_Config+0x82>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f7ff fa93 	bl	80009f4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80014ce:	bf00      	nop
 80014d0:	f7ff faa4 	bl	8000a1c <LL_RCC_GetSysClkSource>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b0c      	cmp	r3, #12
 80014d8:	d1fa      	bne.n	80014d0 <SystemClock_Config+0x94>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff faac 	bl	8000a38 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80014e0:	2000      	movs	r0, #0
 80014e2:	f7ff fabd 	bl	8000a60 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff face 	bl	8000a88 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(80000000);
 80014ec:	4806      	ldr	r0, [pc, #24]	@ (8001508 <SystemClock_Config+0xcc>)
 80014ee:	f004 f8e3 	bl	80056b8 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80014f2:	200f      	movs	r0, #15
 80014f4:	f001 fe12 	bl	800311c <HAL_InitTick>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014fe:	f001 f859 	bl	80025b4 <Error_Handler>
  }
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	04c4b400 	.word	0x04c4b400

0800150c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  LL_RCC_PLLSAI1_ConfigDomain_ADC(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLSAI1R_DIV_2);
 8001510:	2300      	movs	r3, #0
 8001512:	2208      	movs	r2, #8
 8001514:	2100      	movs	r1, #0
 8001516:	2003      	movs	r0, #3
 8001518:	f7ff fbfc 	bl	8000d14 <LL_RCC_PLLSAI1_ConfigDomain_ADC>
  LL_RCC_PLLSAI1_EnableDomain_ADC();
 800151c:	f7ff fc20 	bl	8000d60 <LL_RCC_PLLSAI1_EnableDomain_ADC>
  LL_RCC_PLLSAI1_Enable();
 8001520:	f7ff fbd4 	bl	8000ccc <LL_RCC_PLLSAI1_Enable>

   /* Wait till PLLSAI1 is ready */
  while(LL_RCC_PLLSAI1_IsReady() != 1)
 8001524:	bf00      	nop
 8001526:	f7ff fbe1 	bl	8000cec <LL_RCC_PLLSAI1_IsReady>
 800152a:	4603      	mov	r3, r0
 800152c:	2b01      	cmp	r3, #1
 800152e:	d1fa      	bne.n	8001526 <PeriphCommonClock_Config+0x1a>
  {

  }
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_HSI48);
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff faf1 	bl	8000b18 <LL_RCC_SetUSBClockSource>
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b094      	sub	sp, #80	@ 0x50
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001542:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800154e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
 800155c:	611a      	str	r2, [r3, #16]
 800155e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001560:	f107 0318 	add.w	r3, r7, #24
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	463b      	mov	r3, r7
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
 800157c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLLSAI1);
 800157e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001582:	f7ff fadf 	bl	8000b44 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8001586:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800158a:	f7ff fc11 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800158e:	2001      	movs	r0, #1
 8001590:	f7ff fc0e 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001594:	2004      	movs	r0, #4
 8001596:	f7ff fc0b 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800159a:	2002      	movs	r0, #2
 800159c:	f7ff fc08 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  PC4   ------> ADC1_IN13
  PC5   ------> ADC1_IN14
  PB0   ------> ADC1_IN15
  PB1   ------> ADC1_IN16
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80015a0:	23ff      	movs	r3, #255	@ 0xff
 80015a2:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80015a4:	2303      	movs	r3, #3
 80015a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	463b      	mov	r3, r7
 80015ae:	4619      	mov	r1, r3
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b4:	f002 fd9f 	bl	80040f6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80015b8:	2330      	movs	r3, #48	@ 0x30
 80015ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80015bc:	2303      	movs	r3, #3
 80015be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	4841      	ldr	r0, [pc, #260]	@ (80016d0 <MX_ADC1_Init+0x194>)
 80015ca:	f002 fd94 	bl	80040f6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80015ce:	2303      	movs	r3, #3
 80015d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80015d2:	2303      	movs	r3, #3
 80015d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	463b      	mov	r3, r7
 80015dc:	4619      	mov	r1, r3
 80015de:	483d      	ldr	r0, [pc, #244]	@ (80016d4 <MX_ADC1_Init+0x198>)
 80015e0:	f002 fd89 	bl	80040f6 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMA_REQUEST_0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	483b      	ldr	r0, [pc, #236]	@ (80016d8 <MX_ADC1_Init+0x19c>)
 80015ea:	f7ff f925 	bl	8000838 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	4839      	ldr	r0, [pc, #228]	@ (80016d8 <MX_ADC1_Init+0x19c>)
 80015f4:	f7fe ffb0 	bl	8000558 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 80015f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015fc:	2100      	movs	r1, #0
 80015fe:	4836      	ldr	r0, [pc, #216]	@ (80016d8 <MX_ADC1_Init+0x19c>)
 8001600:	f7ff f890 	bl	8000724 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8001604:	2220      	movs	r2, #32
 8001606:	2100      	movs	r1, #0
 8001608:	4833      	ldr	r0, [pc, #204]	@ (80016d8 <MX_ADC1_Init+0x19c>)
 800160a:	f7fe ffcd 	bl	80005a8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	4831      	ldr	r0, [pc, #196]	@ (80016d8 <MX_ADC1_Init+0x19c>)
 8001614:	f7fe ffee 	bl	80005f4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8001618:	2280      	movs	r2, #128	@ 0x80
 800161a:	2100      	movs	r1, #0
 800161c:	482e      	ldr	r0, [pc, #184]	@ (80016d8 <MX_ADC1_Init+0x19c>)
 800161e:	f7ff f80f 	bl	8000640 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8001622:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001626:	2100      	movs	r1, #0
 8001628:	482b      	ldr	r0, [pc, #172]	@ (80016d8 <MX_ADC1_Init+0x19c>)
 800162a:	f7ff f82f 	bl	800068c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 800162e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001632:	2100      	movs	r1, #0
 8001634:	4828      	ldr	r0, [pc, #160]	@ (80016d8 <MX_ADC1_Init+0x19c>)
 8001636:	f7ff f84f 	bl	80006d8 <LL_DMA_SetMemorySize>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800163a:	2300      	movs	r3, #0
 800163c:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800163e:	2300      	movs	r3, #0
 8001640:	647b      	str	r3, [r7, #68]	@ 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001646:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800164a:	4619      	mov	r1, r3
 800164c:	4823      	ldr	r0, [pc, #140]	@ (80016dc <MX_ADC1_Init+0x1a0>)
 800164e:	f002 fb97 	bl	8003d80 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS;
 8001656:	230e      	movs	r3, #14
 8001658:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800165e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001662:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001664:	2303      	movs	r3, #3
 8001666:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001668:	2300      	movs	r3, #0
 800166a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800166c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001670:	4619      	mov	r1, r3
 8001672:	481a      	ldr	r0, [pc, #104]	@ (80016dc <MX_ADC1_Init+0x1a0>)
 8001674:	f002 fbaa 	bl	8003dcc <LL_ADC_REG_Init>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8001678:	2100      	movs	r1, #0
 800167a:	4818      	ldr	r0, [pc, #96]	@ (80016dc <MX_ADC1_Init+0x1a0>)
 800167c:	f7fe fee6 	bl	800044c <LL_ADC_SetOverSamplingScope>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT|LL_ADC_PATH_INTERNAL_TEMPSENSOR|LL_ADC_PATH_INTERNAL_VBAT);
 8001680:	f04f 71e0 	mov.w	r1, #29360128	@ 0x1c00000
 8001684:	4816      	ldr	r0, [pc, #88]	@ (80016e0 <MX_ADC1_Init+0x1a4>)
 8001686:	f7fe fe53 	bl	8000330 <LL_ADC_SetCommonPathInternalCh>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001692:	f107 0318 	add.w	r3, r7, #24
 8001696:	4619      	mov	r1, r3
 8001698:	4811      	ldr	r0, [pc, #68]	@ (80016e0 <MX_ADC1_Init+0x1a4>)
 800169a:	f002 fb29 	bl	8003cf0 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 800169e:	480f      	ldr	r0, [pc, #60]	@ (80016dc <MX_ADC1_Init+0x1a0>)
 80016a0:	f7fe fee9 	bl	8000476 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 80016a4:	480d      	ldr	r0, [pc, #52]	@ (80016dc <MX_ADC1_Init+0x1a0>)
 80016a6:	f7fe fef8 	bl	800049a <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80016aa:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <MX_ADC1_Init+0x1a8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	099b      	lsrs	r3, r3, #6
 80016b0:	4a0d      	ldr	r2, [pc, #52]	@ (80016e8 <MX_ADC1_Init+0x1ac>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	099a      	lsrs	r2, r3, #6
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <MX_ADC1_Init+0x1b0>)
 80016c4:	fba3 2302 	umull	r2, r3, r3, r2
 80016c8:	08db      	lsrs	r3, r3, #3
 80016ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 80016cc:	e013      	b.n	80016f6 <MX_ADC1_Init+0x1ba>
 80016ce:	bf00      	nop
 80016d0:	48000800 	.word	0x48000800
 80016d4:	48000400 	.word	0x48000400
 80016d8:	40020000 	.word	0x40020000
 80016dc:	50040000 	.word	0x50040000
 80016e0:	50040300 	.word	0x50040300
 80016e4:	20000000 	.word	0x20000000
 80016e8:	053e2d63 	.word	0x053e2d63
 80016ec:	cccccccd 	.word	0xcccccccd
  {
    wait_loop_index--;
 80016f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016f2:	3b01      	subs	r3, #1
 80016f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 80016f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f9      	bne.n	80016f0 <MX_ADC1_Init+0x1b4>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_5);
 80016fc:	4a77      	ldr	r2, [pc, #476]	@ (80018dc <MX_ADC1_Init+0x3a0>)
 80016fe:	2106      	movs	r1, #6
 8001700:	4877      	ldr	r0, [pc, #476]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001702:	f7fe fe28 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001706:	2206      	movs	r2, #6
 8001708:	4974      	ldr	r1, [pc, #464]	@ (80018dc <MX_ADC1_Init+0x3a0>)
 800170a:	4875      	ldr	r0, [pc, #468]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 800170c:	f7fe fe4f 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SINGLE_ENDED);
 8001710:	227f      	movs	r2, #127	@ 0x7f
 8001712:	4972      	ldr	r1, [pc, #456]	@ (80018dc <MX_ADC1_Init+0x3a0>)
 8001714:	4872      	ldr	r0, [pc, #456]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001716:	f7fe fe75 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_6);
 800171a:	4a72      	ldr	r2, [pc, #456]	@ (80018e4 <MX_ADC1_Init+0x3a8>)
 800171c:	210c      	movs	r1, #12
 800171e:	4870      	ldr	r0, [pc, #448]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001720:	f7fe fe19 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001724:	2206      	movs	r2, #6
 8001726:	496f      	ldr	r1, [pc, #444]	@ (80018e4 <MX_ADC1_Init+0x3a8>)
 8001728:	486d      	ldr	r0, [pc, #436]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 800172a:	f7fe fe40 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SINGLE_ENDED);
 800172e:	227f      	movs	r2, #127	@ 0x7f
 8001730:	496c      	ldr	r1, [pc, #432]	@ (80018e4 <MX_ADC1_Init+0x3a8>)
 8001732:	486b      	ldr	r0, [pc, #428]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001734:	f7fe fe66 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_7);
 8001738:	4a6b      	ldr	r2, [pc, #428]	@ (80018e8 <MX_ADC1_Init+0x3ac>)
 800173a:	2112      	movs	r1, #18
 800173c:	4868      	ldr	r0, [pc, #416]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 800173e:	f7fe fe0a 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001742:	2206      	movs	r2, #6
 8001744:	4968      	ldr	r1, [pc, #416]	@ (80018e8 <MX_ADC1_Init+0x3ac>)
 8001746:	4866      	ldr	r0, [pc, #408]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001748:	f7fe fe31 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_7, LL_ADC_SINGLE_ENDED);
 800174c:	227f      	movs	r2, #127	@ 0x7f
 800174e:	4966      	ldr	r1, [pc, #408]	@ (80018e8 <MX_ADC1_Init+0x3ac>)
 8001750:	4863      	ldr	r0, [pc, #396]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001752:	f7fe fe57 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_8);
 8001756:	4a65      	ldr	r2, [pc, #404]	@ (80018ec <MX_ADC1_Init+0x3b0>)
 8001758:	2118      	movs	r1, #24
 800175a:	4861      	ldr	r0, [pc, #388]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 800175c:	f7fe fdfb 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001760:	2206      	movs	r2, #6
 8001762:	4962      	ldr	r1, [pc, #392]	@ (80018ec <MX_ADC1_Init+0x3b0>)
 8001764:	485e      	ldr	r0, [pc, #376]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001766:	f7fe fe22 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_8, LL_ADC_SINGLE_ENDED);
 800176a:	227f      	movs	r2, #127	@ 0x7f
 800176c:	495f      	ldr	r1, [pc, #380]	@ (80018ec <MX_ADC1_Init+0x3b0>)
 800176e:	485c      	ldr	r0, [pc, #368]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001770:	f7fe fe48 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_9);
 8001774:	4a5e      	ldr	r2, [pc, #376]	@ (80018f0 <MX_ADC1_Init+0x3b4>)
 8001776:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800177a:	4859      	ldr	r0, [pc, #356]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 800177c:	f7fe fdeb 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001780:	2206      	movs	r2, #6
 8001782:	495b      	ldr	r1, [pc, #364]	@ (80018f0 <MX_ADC1_Init+0x3b4>)
 8001784:	4856      	ldr	r0, [pc, #344]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001786:	f7fe fe12 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SINGLE_ENDED);
 800178a:	227f      	movs	r2, #127	@ 0x7f
 800178c:	4958      	ldr	r1, [pc, #352]	@ (80018f0 <MX_ADC1_Init+0x3b4>)
 800178e:	4854      	ldr	r0, [pc, #336]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001790:	f7fe fe38 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_10);
 8001794:	4a57      	ldr	r2, [pc, #348]	@ (80018f4 <MX_ADC1_Init+0x3b8>)
 8001796:	f44f 7183 	mov.w	r1, #262	@ 0x106
 800179a:	4851      	ldr	r0, [pc, #324]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 800179c:	f7fe fddb 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 80017a0:	2206      	movs	r2, #6
 80017a2:	4954      	ldr	r1, [pc, #336]	@ (80018f4 <MX_ADC1_Init+0x3b8>)
 80017a4:	484e      	ldr	r0, [pc, #312]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 80017a6:	f7fe fe02 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SINGLE_ENDED);
 80017aa:	227f      	movs	r2, #127	@ 0x7f
 80017ac:	4951      	ldr	r1, [pc, #324]	@ (80018f4 <MX_ADC1_Init+0x3b8>)
 80017ae:	484c      	ldr	r0, [pc, #304]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 80017b0:	f7fe fe28 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_7, LL_ADC_CHANNEL_11);
 80017b4:	4a50      	ldr	r2, [pc, #320]	@ (80018f8 <MX_ADC1_Init+0x3bc>)
 80017b6:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80017ba:	4849      	ldr	r0, [pc, #292]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 80017bc:	f7fe fdcb 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 80017c0:	2206      	movs	r2, #6
 80017c2:	494d      	ldr	r1, [pc, #308]	@ (80018f8 <MX_ADC1_Init+0x3bc>)
 80017c4:	4846      	ldr	r0, [pc, #280]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 80017c6:	f7fe fdf2 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_11, LL_ADC_SINGLE_ENDED);
 80017ca:	227f      	movs	r2, #127	@ 0x7f
 80017cc:	494a      	ldr	r1, [pc, #296]	@ (80018f8 <MX_ADC1_Init+0x3bc>)
 80017ce:	4844      	ldr	r0, [pc, #272]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 80017d0:	f7fe fe18 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_8, LL_ADC_CHANNEL_12);
 80017d4:	4a49      	ldr	r2, [pc, #292]	@ (80018fc <MX_ADC1_Init+0x3c0>)
 80017d6:	f44f 7189 	mov.w	r1, #274	@ 0x112
 80017da:	4841      	ldr	r0, [pc, #260]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 80017dc:	f7fe fdbb 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 80017e0:	2206      	movs	r2, #6
 80017e2:	4946      	ldr	r1, [pc, #280]	@ (80018fc <MX_ADC1_Init+0x3c0>)
 80017e4:	483e      	ldr	r0, [pc, #248]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 80017e6:	f7fe fde2 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_12, LL_ADC_SINGLE_ENDED);
 80017ea:	227f      	movs	r2, #127	@ 0x7f
 80017ec:	4943      	ldr	r1, [pc, #268]	@ (80018fc <MX_ADC1_Init+0x3c0>)
 80017ee:	483c      	ldr	r0, [pc, #240]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 80017f0:	f7fe fe08 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_9, LL_ADC_CHANNEL_13);
 80017f4:	4a42      	ldr	r2, [pc, #264]	@ (8001900 <MX_ADC1_Init+0x3c4>)
 80017f6:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80017fa:	4839      	ldr	r0, [pc, #228]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 80017fc:	f7fe fdab 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001800:	2206      	movs	r2, #6
 8001802:	493f      	ldr	r1, [pc, #252]	@ (8001900 <MX_ADC1_Init+0x3c4>)
 8001804:	4836      	ldr	r0, [pc, #216]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001806:	f7fe fdd2 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SINGLE_ENDED);
 800180a:	227f      	movs	r2, #127	@ 0x7f
 800180c:	493c      	ldr	r1, [pc, #240]	@ (8001900 <MX_ADC1_Init+0x3c4>)
 800180e:	4834      	ldr	r0, [pc, #208]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001810:	f7fe fdf8 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_10, LL_ADC_CHANNEL_14);
 8001814:	4a3b      	ldr	r2, [pc, #236]	@ (8001904 <MX_ADC1_Init+0x3c8>)
 8001816:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800181a:	4831      	ldr	r0, [pc, #196]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 800181c:	f7fe fd9b 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001820:	2206      	movs	r2, #6
 8001822:	4938      	ldr	r1, [pc, #224]	@ (8001904 <MX_ADC1_Init+0x3c8>)
 8001824:	482e      	ldr	r0, [pc, #184]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001826:	f7fe fdc2 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_14, LL_ADC_SINGLE_ENDED);
 800182a:	227f      	movs	r2, #127	@ 0x7f
 800182c:	4935      	ldr	r1, [pc, #212]	@ (8001904 <MX_ADC1_Init+0x3c8>)
 800182e:	482c      	ldr	r0, [pc, #176]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001830:	f7fe fde8 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_11, LL_ADC_CHANNEL_15);
 8001834:	4a34      	ldr	r2, [pc, #208]	@ (8001908 <MX_ADC1_Init+0x3cc>)
 8001836:	f240 2106 	movw	r1, #518	@ 0x206
 800183a:	4829      	ldr	r0, [pc, #164]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 800183c:	f7fe fd8b 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001840:	2206      	movs	r2, #6
 8001842:	4931      	ldr	r1, [pc, #196]	@ (8001908 <MX_ADC1_Init+0x3cc>)
 8001844:	4826      	ldr	r0, [pc, #152]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001846:	f7fe fdb2 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_15, LL_ADC_SINGLE_ENDED);
 800184a:	227f      	movs	r2, #127	@ 0x7f
 800184c:	492e      	ldr	r1, [pc, #184]	@ (8001908 <MX_ADC1_Init+0x3cc>)
 800184e:	4824      	ldr	r0, [pc, #144]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001850:	f7fe fdd8 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_12, LL_ADC_CHANNEL_16);
 8001854:	4a2d      	ldr	r2, [pc, #180]	@ (800190c <MX_ADC1_Init+0x3d0>)
 8001856:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 800185a:	4821      	ldr	r0, [pc, #132]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 800185c:	f7fe fd7b 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_16, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001860:	2206      	movs	r2, #6
 8001862:	492a      	ldr	r1, [pc, #168]	@ (800190c <MX_ADC1_Init+0x3d0>)
 8001864:	481e      	ldr	r0, [pc, #120]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001866:	f7fe fda2 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_16, LL_ADC_SINGLE_ENDED);
 800186a:	227f      	movs	r2, #127	@ 0x7f
 800186c:	4927      	ldr	r1, [pc, #156]	@ (800190c <MX_ADC1_Init+0x3d0>)
 800186e:	481c      	ldr	r0, [pc, #112]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001870:	f7fe fdc8 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_13, LL_ADC_CHANNEL_TEMPSENSOR);
 8001874:	4a26      	ldr	r2, [pc, #152]	@ (8001910 <MX_ADC1_Init+0x3d4>)
 8001876:	f240 2112 	movw	r1, #530	@ 0x212
 800187a:	4819      	ldr	r0, [pc, #100]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 800187c:	f7fe fd6b 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001880:	2206      	movs	r2, #6
 8001882:	4923      	ldr	r1, [pc, #140]	@ (8001910 <MX_ADC1_Init+0x3d4>)
 8001884:	4816      	ldr	r0, [pc, #88]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001886:	f7fe fd92 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SINGLE_ENDED);
 800188a:	227f      	movs	r2, #127	@ 0x7f
 800188c:	4920      	ldr	r1, [pc, #128]	@ (8001910 <MX_ADC1_Init+0x3d4>)
 800188e:	4814      	ldr	r0, [pc, #80]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 8001890:	f7fe fdb8 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_14, LL_ADC_CHANNEL_VBAT);
 8001894:	4a1f      	ldr	r2, [pc, #124]	@ (8001914 <MX_ADC1_Init+0x3d8>)
 8001896:	f44f 7106 	mov.w	r1, #536	@ 0x218
 800189a:	4811      	ldr	r0, [pc, #68]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 800189c:	f7fe fd5b 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VBAT, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 80018a0:	2206      	movs	r2, #6
 80018a2:	491c      	ldr	r1, [pc, #112]	@ (8001914 <MX_ADC1_Init+0x3d8>)
 80018a4:	480e      	ldr	r0, [pc, #56]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 80018a6:	f7fe fd82 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_VBAT, LL_ADC_SINGLE_ENDED);
 80018aa:	227f      	movs	r2, #127	@ 0x7f
 80018ac:	4919      	ldr	r1, [pc, #100]	@ (8001914 <MX_ADC1_Init+0x3d8>)
 80018ae:	480c      	ldr	r0, [pc, #48]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 80018b0:	f7fe fda8 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_15, LL_ADC_CHANNEL_VREFINT);
 80018b4:	4a18      	ldr	r2, [pc, #96]	@ (8001918 <MX_ADC1_Init+0x3dc>)
 80018b6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80018ba:	4809      	ldr	r0, [pc, #36]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 80018bc:	f7fe fd4b 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 80018c0:	2206      	movs	r2, #6
 80018c2:	4915      	ldr	r1, [pc, #84]	@ (8001918 <MX_ADC1_Init+0x3dc>)
 80018c4:	4806      	ldr	r0, [pc, #24]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 80018c6:	f7fe fd72 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SINGLE_ENDED);
 80018ca:	227f      	movs	r2, #127	@ 0x7f
 80018cc:	4912      	ldr	r1, [pc, #72]	@ (8001918 <MX_ADC1_Init+0x3dc>)
 80018ce:	4804      	ldr	r0, [pc, #16]	@ (80018e0 <MX_ADC1_Init+0x3a4>)
 80018d0:	f7fe fd98 	bl	8000404 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3750      	adds	r7, #80	@ 0x50
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	14f00020 	.word	0x14f00020
 80018e0:	50040000 	.word	0x50040000
 80018e4:	19200040 	.word	0x19200040
 80018e8:	1d500080 	.word	0x1d500080
 80018ec:	21800100 	.word	0x21800100
 80018f0:	25b00200 	.word	0x25b00200
 80018f4:	2a000400 	.word	0x2a000400
 80018f8:	2e300800 	.word	0x2e300800
 80018fc:	32601000 	.word	0x32601000
 8001900:	36902000 	.word	0x36902000
 8001904:	3ac04000 	.word	0x3ac04000
 8001908:	3ef08000 	.word	0x3ef08000
 800190c:	43210000 	.word	0x43210000
 8001910:	c7520000 	.word	0xc7520000
 8001914:	cb840000 	.word	0xcb840000
 8001918:	80000001 	.word	0x80000001

0800191c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b094      	sub	sp, #80	@ 0x50
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001922:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800192e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]
 800193e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	463b      	mov	r3, r7
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLLSAI1);
 800195e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001962:	f7ff f8ef 	bl	8000b44 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8001966:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800196a:	f7ff fa21 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800196e:	2004      	movs	r0, #4
 8001970:	f7ff fa1e 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  PC0   ------> ADC3_IN1
  PC1   ------> ADC3_IN2
  PC2   ------> ADC3_IN3
  PC3   ------> ADC3_IN4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001974:	230f      	movs	r3, #15
 8001976:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001978:	2303      	movs	r3, #3
 800197a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001980:	463b      	mov	r3, r7
 8001982:	4619      	mov	r1, r3
 8001984:	486d      	ldr	r0, [pc, #436]	@ (8001b3c <MX_ADC3_Init+0x220>)
 8001986:	f002 fbb6 	bl	80040f6 <LL_GPIO_Init>

  /* ADC3 DMA Init */

  /* ADC3 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMA_REQUEST_0);
 800198a:	2200      	movs	r2, #0
 800198c:	2102      	movs	r1, #2
 800198e:	486c      	ldr	r0, [pc, #432]	@ (8001b40 <MX_ADC3_Init+0x224>)
 8001990:	f7fe ff52 	bl	8000838 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001994:	2200      	movs	r2, #0
 8001996:	2102      	movs	r1, #2
 8001998:	4869      	ldr	r0, [pc, #420]	@ (8001b40 <MX_ADC3_Init+0x224>)
 800199a:	f7fe fddd 	bl	8000558 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_MEDIUM);
 800199e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019a2:	2102      	movs	r1, #2
 80019a4:	4866      	ldr	r0, [pc, #408]	@ (8001b40 <MX_ADC3_Init+0x224>)
 80019a6:	f7fe febd 	bl	8000724 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_CIRCULAR);
 80019aa:	2220      	movs	r2, #32
 80019ac:	2102      	movs	r1, #2
 80019ae:	4864      	ldr	r0, [pc, #400]	@ (8001b40 <MX_ADC3_Init+0x224>)
 80019b0:	f7fe fdfa 	bl	80005a8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2102      	movs	r1, #2
 80019b8:	4861      	ldr	r0, [pc, #388]	@ (8001b40 <MX_ADC3_Init+0x224>)
 80019ba:	f7fe fe1b 	bl	80005f4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 80019be:	2280      	movs	r2, #128	@ 0x80
 80019c0:	2102      	movs	r1, #2
 80019c2:	485f      	ldr	r0, [pc, #380]	@ (8001b40 <MX_ADC3_Init+0x224>)
 80019c4:	f7fe fe3c 	bl	8000640 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_HALFWORD);
 80019c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019cc:	2102      	movs	r1, #2
 80019ce:	485c      	ldr	r0, [pc, #368]	@ (8001b40 <MX_ADC3_Init+0x224>)
 80019d0:	f7fe fe5c 	bl	800068c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_HALFWORD);
 80019d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019d8:	2102      	movs	r1, #2
 80019da:	4859      	ldr	r0, [pc, #356]	@ (8001b40 <MX_ADC3_Init+0x224>)
 80019dc:	f7fe fe7c 	bl	80006d8 <LL_DMA_SetMemorySize>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80019e0:	2300      	movs	r3, #0
 80019e2:	643b      	str	r3, [r7, #64]	@ 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80019e4:	2300      	movs	r3, #0
 80019e6:	647b      	str	r3, [r7, #68]	@ 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_ADC_Init(ADC3, &ADC_InitStruct);
 80019ec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019f0:	4619      	mov	r1, r3
 80019f2:	4854      	ldr	r0, [pc, #336]	@ (8001b44 <MX_ADC3_Init+0x228>)
 80019f4:	f002 f9c4 	bl	8003d80 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS;
 80019fc:	2305      	movs	r3, #5
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001a04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a08:	637b      	str	r3, [r7, #52]	@ 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_ADC_REG_Init(ADC3, &ADC_REG_InitStruct);
 8001a12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a16:	4619      	mov	r1, r3
 8001a18:	484a      	ldr	r0, [pc, #296]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001a1a:	f002 f9d7 	bl	8003dcc <LL_ADC_REG_Init>
  LL_ADC_SetOverSamplingScope(ADC3, LL_ADC_OVS_DISABLE);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4848      	ldr	r0, [pc, #288]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001a22:	f7fe fd13 	bl	800044c <LL_ADC_SetOverSamplingScope>
  LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC3), LL_ADC_PATH_INTERNAL_TEMPSENSOR|LL_ADC_PATH_INTERNAL_VBAT);
 8001a26:	f04f 71c0 	mov.w	r1, #25165824	@ 0x1800000
 8001a2a:	4847      	ldr	r0, [pc, #284]	@ (8001b48 <MX_ADC3_Init+0x22c>)
 8001a2c:	f7fe fc80 	bl	8000330 <LL_ADC_SetCommonPathInternalCh>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC3), &ADC_CommonInitStruct);
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4843      	ldr	r0, [pc, #268]	@ (8001b48 <MX_ADC3_Init+0x22c>)
 8001a3c:	f002 f958 	bl	8003cf0 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC3);
 8001a40:	4840      	ldr	r0, [pc, #256]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001a42:	f7fe fd18 	bl	8000476 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC3);
 8001a46:	483f      	ldr	r0, [pc, #252]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001a48:	f7fe fd27 	bl	800049a <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b4c <MX_ADC3_Init+0x230>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	099b      	lsrs	r3, r3, #6
 8001a52:	4a3f      	ldr	r2, [pc, #252]	@ (8001b50 <MX_ADC3_Init+0x234>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	099a      	lsrs	r2, r3, #6
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b3b      	ldr	r3, [pc, #236]	@ (8001b54 <MX_ADC3_Init+0x238>)
 8001a66:	fba3 2302 	umull	r2, r3, r3, r2
 8001a6a:	08db      	lsrs	r3, r3, #3
 8001a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 8001a6e:	e002      	b.n	8001a76 <MX_ADC3_Init+0x15a>
  {
    wait_loop_index--;
 8001a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a72:	3b01      	subs	r3, #1
 8001a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while(wait_loop_index != 0)
 8001a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f9      	bne.n	8001a70 <MX_ADC3_Init+0x154>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8001a7c:	4a36      	ldr	r2, [pc, #216]	@ (8001b58 <MX_ADC3_Init+0x23c>)
 8001a7e:	2106      	movs	r1, #6
 8001a80:	4830      	ldr	r0, [pc, #192]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001a82:	f7fe fc68 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001a86:	2206      	movs	r2, #6
 8001a88:	4933      	ldr	r1, [pc, #204]	@ (8001b58 <MX_ADC3_Init+0x23c>)
 8001a8a:	482e      	ldr	r0, [pc, #184]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001a8c:	f7fe fc8f 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8001a90:	227f      	movs	r2, #127	@ 0x7f
 8001a92:	4931      	ldr	r1, [pc, #196]	@ (8001b58 <MX_ADC3_Init+0x23c>)
 8001a94:	482b      	ldr	r0, [pc, #172]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001a96:	f7fe fcb5 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8001a9a:	4a30      	ldr	r2, [pc, #192]	@ (8001b5c <MX_ADC3_Init+0x240>)
 8001a9c:	210c      	movs	r1, #12
 8001a9e:	4829      	ldr	r0, [pc, #164]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001aa0:	f7fe fc59 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001aa4:	2206      	movs	r2, #6
 8001aa6:	492d      	ldr	r1, [pc, #180]	@ (8001b5c <MX_ADC3_Init+0x240>)
 8001aa8:	4826      	ldr	r0, [pc, #152]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001aaa:	f7fe fc80 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8001aae:	227f      	movs	r2, #127	@ 0x7f
 8001ab0:	492a      	ldr	r1, [pc, #168]	@ (8001b5c <MX_ADC3_Init+0x240>)
 8001ab2:	4824      	ldr	r0, [pc, #144]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001ab4:	f7fe fca6 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_3);
 8001ab8:	4a29      	ldr	r2, [pc, #164]	@ (8001b60 <MX_ADC3_Init+0x244>)
 8001aba:	2112      	movs	r1, #18
 8001abc:	4821      	ldr	r0, [pc, #132]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001abe:	f7fe fc4a 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001ac2:	2206      	movs	r2, #6
 8001ac4:	4926      	ldr	r1, [pc, #152]	@ (8001b60 <MX_ADC3_Init+0x244>)
 8001ac6:	481f      	ldr	r0, [pc, #124]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001ac8:	f7fe fc71 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_3, LL_ADC_SINGLE_ENDED);
 8001acc:	227f      	movs	r2, #127	@ 0x7f
 8001ace:	4924      	ldr	r1, [pc, #144]	@ (8001b60 <MX_ADC3_Init+0x244>)
 8001ad0:	481c      	ldr	r0, [pc, #112]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001ad2:	f7fe fc97 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_4);
 8001ad6:	4a23      	ldr	r2, [pc, #140]	@ (8001b64 <MX_ADC3_Init+0x248>)
 8001ad8:	2118      	movs	r1, #24
 8001ada:	481a      	ldr	r0, [pc, #104]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001adc:	f7fe fc3b 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_4, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001ae0:	2206      	movs	r2, #6
 8001ae2:	4920      	ldr	r1, [pc, #128]	@ (8001b64 <MX_ADC3_Init+0x248>)
 8001ae4:	4817      	ldr	r0, [pc, #92]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001ae6:	f7fe fc62 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_4, LL_ADC_SINGLE_ENDED);
 8001aea:	227f      	movs	r2, #127	@ 0x7f
 8001aec:	491d      	ldr	r1, [pc, #116]	@ (8001b64 <MX_ADC3_Init+0x248>)
 8001aee:	4815      	ldr	r0, [pc, #84]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001af0:	f7fe fc88 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_TEMPSENSOR);
 8001af4:	4a1c      	ldr	r2, [pc, #112]	@ (8001b68 <MX_ADC3_Init+0x24c>)
 8001af6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001afa:	4812      	ldr	r0, [pc, #72]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001afc:	f7fe fc2b 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001b00:	2206      	movs	r2, #6
 8001b02:	4919      	ldr	r1, [pc, #100]	@ (8001b68 <MX_ADC3_Init+0x24c>)
 8001b04:	480f      	ldr	r0, [pc, #60]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001b06:	f7fe fc52 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_TEMPSENSOR, LL_ADC_SINGLE_ENDED);
 8001b0a:	227f      	movs	r2, #127	@ 0x7f
 8001b0c:	4916      	ldr	r1, [pc, #88]	@ (8001b68 <MX_ADC3_Init+0x24c>)
 8001b0e:	480d      	ldr	r0, [pc, #52]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001b10:	f7fe fc78 	bl	8000404 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC3, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_VBAT);
 8001b14:	4a15      	ldr	r2, [pc, #84]	@ (8001b6c <MX_ADC3_Init+0x250>)
 8001b16:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8001b1a:	480a      	ldr	r0, [pc, #40]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001b1c:	f7fe fc1b 	bl	8000356 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC3, LL_ADC_CHANNEL_VBAT, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001b20:	2206      	movs	r2, #6
 8001b22:	4912      	ldr	r1, [pc, #72]	@ (8001b6c <MX_ADC3_Init+0x250>)
 8001b24:	4807      	ldr	r0, [pc, #28]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001b26:	f7fe fc42 	bl	80003ae <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC3, LL_ADC_CHANNEL_VBAT, LL_ADC_SINGLE_ENDED);
 8001b2a:	227f      	movs	r2, #127	@ 0x7f
 8001b2c:	490f      	ldr	r1, [pc, #60]	@ (8001b6c <MX_ADC3_Init+0x250>)
 8001b2e:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <MX_ADC3_Init+0x228>)
 8001b30:	f7fe fc68 	bl	8000404 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	3750      	adds	r7, #80	@ 0x50
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	48000800 	.word	0x48000800
 8001b40:	40020000 	.word	0x40020000
 8001b44:	50040200 	.word	0x50040200
 8001b48:	50040300 	.word	0x50040300
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	053e2d63 	.word	0x053e2d63
 8001b54:	cccccccd 	.word	0xcccccccd
 8001b58:	04300002 	.word	0x04300002
 8001b5c:	08600004 	.word	0x08600004
 8001b60:	0c900008 	.word	0x0c900008
 8001b64:	10c00010 	.word	0x10c00010
 8001b68:	c7520000 	.word	0xc7520000
 8001b6c:	cb840000 	.word	0xcb840000

08001b70 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b74:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <MX_CAN1_Init+0x60>)
 8001b76:	4a17      	ldr	r2, [pc, #92]	@ (8001bd4 <MX_CAN1_Init+0x64>)
 8001b78:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 39;
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <MX_CAN1_Init+0x60>)
 8001b7c:	2227      	movs	r2, #39	@ 0x27
 8001b7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b80:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <MX_CAN1_Init+0x60>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b86:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <MX_CAN1_Init+0x60>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001b8c:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <MX_CAN1_Init+0x60>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001b92:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <MX_CAN1_Init+0x60>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b98:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd0 <MX_CAN1_Init+0x60>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <MX_CAN1_Init+0x60>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <MX_CAN1_Init+0x60>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001baa:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <MX_CAN1_Init+0x60>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <MX_CAN1_Init+0x60>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001bb6:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <MX_CAN1_Init+0x60>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001bbc:	4804      	ldr	r0, [pc, #16]	@ (8001bd0 <MX_CAN1_Init+0x60>)
 8001bbe:	f001 fb09 	bl	80031d4 <HAL_CAN_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001bc8:	f000 fcf4 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000028 	.word	0x20000028
 8001bd4:	40006400 	.word	0x40006400

08001bd8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001bdc:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <MX_CAN2_Init+0x60>)
 8001bde:	4a17      	ldr	r2, [pc, #92]	@ (8001c3c <MX_CAN2_Init+0x64>)
 8001be0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 39;
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <MX_CAN2_Init+0x60>)
 8001be4:	2227      	movs	r2, #39	@ 0x27
 8001be6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001be8:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <MX_CAN2_Init+0x60>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001bee:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <MX_CAN2_Init+0x60>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001bf4:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <MX_CAN2_Init+0x60>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <MX_CAN2_Init+0x60>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001c00:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <MX_CAN2_Init+0x60>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <MX_CAN2_Init+0x60>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <MX_CAN2_Init+0x60>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001c12:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <MX_CAN2_Init+0x60>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001c18:	4b07      	ldr	r3, [pc, #28]	@ (8001c38 <MX_CAN2_Init+0x60>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <MX_CAN2_Init+0x60>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001c24:	4804      	ldr	r0, [pc, #16]	@ (8001c38 <MX_CAN2_Init+0x60>)
 8001c26:	f001 fad5 	bl	80031d4 <HAL_CAN_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8001c30:	f000 fcc0 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000050 	.word	0x20000050
 8001c3c:	40006800 	.word	0x40006800

08001c40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <MX_I2C1_Init+0x74>)
 8001c46:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb8 <MX_I2C1_Init+0x78>)
 8001c48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <MX_I2C1_Init+0x74>)
 8001c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cbc <MX_I2C1_Init+0x7c>)
 8001c4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c50:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <MX_I2C1_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c56:	4b17      	ldr	r3, [pc, #92]	@ (8001cb4 <MX_I2C1_Init+0x74>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <MX_I2C1_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c62:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <MX_I2C1_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c68:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <MX_I2C1_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <MX_I2C1_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb4 <MX_I2C1_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c7a:	480e      	ldr	r0, [pc, #56]	@ (8001cb4 <MX_I2C1_Init+0x74>)
 8001c7c:	f001 fe1e 	bl	80038bc <HAL_I2C_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c86:	f000 fc95 	bl	80025b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4809      	ldr	r0, [pc, #36]	@ (8001cb4 <MX_I2C1_Init+0x74>)
 8001c8e:	f001 feb0 	bl	80039f2 <HAL_I2CEx_ConfigAnalogFilter>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c98:	f000 fc8c 	bl	80025b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4805      	ldr	r0, [pc, #20]	@ (8001cb4 <MX_I2C1_Init+0x74>)
 8001ca0:	f001 fef2 	bl	8003a88 <HAL_I2CEx_ConfigDigitalFilter>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001caa:	f000 fc83 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000078 	.word	0x20000078
 8001cb8:	40005400 	.word	0x40005400
 8001cbc:	10d19ce4 	.word	0x10d19ce4

08001cc0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cc6:	4a13      	ldr	r2, [pc, #76]	@ (8001d14 <MX_QUADSPI_Init+0x54>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001cca:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <MX_QUADSPI_Init+0x50>)
 8001ccc:	22ff      	movs	r2, #255	@ 0xff
 8001cce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <MX_QUADSPI_Init+0x50>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001cee:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <MX_QUADSPI_Init+0x50>)
 8001cfc:	f001 ff10 	bl	8003b20 <HAL_QSPI_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001d06:	f000 fc55 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200000cc 	.word	0x200000cc
 8001d14:	a0001000 	.word	0xa0001000

08001d18 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8001d1e:	463b      	mov	r3, r7
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]

  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 8001d28:	f7fe ff38 	bl	8000b9c <LL_RCC_GetRTCClockSource>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d32:	d035      	beq.n	8001da0 <MX_RTC_Init+0x88>
  {
    FlagStatus pwrclkchanged = RESET;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
    /* Update LSE configuration in Backup Domain control register */
    /* Requires to enable write access to Backup Domain if necessary */
    if (LL_APB1_GRP1_IsEnabledClock (LL_APB1_GRP1_PERIPH_PWR) != 1U)
 8001d38:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001d3c:	f7ff f868 	bl	8000e10 <LL_APB1_GRP1_IsEnabledClock>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d005      	beq.n	8001d52 <MX_RTC_Init+0x3a>
    {
      /* Enables the PWR Clock and Enables access to the backup domain */
      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001d46:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001d4a:	f7ff f849 	bl	8000de0 <LL_APB1_GRP1_EnableClock>
      pwrclkchanged = SET;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
    }
    if (LL_PWR_IsEnabledBkUpAccess () != 1U)
 8001d52:	f7ff f8e5 	bl	8000f20 <LL_PWR_IsEnabledBkUpAccess>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d007      	beq.n	8001d6c <MX_RTC_Init+0x54>
    {
      /* Enable write access to Backup domain */
      LL_PWR_EnableBkUpAccess();
 8001d5c:	f7ff f8d0 	bl	8000f00 <LL_PWR_EnableBkUpAccess>
      while (LL_PWR_IsEnabledBkUpAccess () == 0U)
 8001d60:	bf00      	nop
 8001d62:	f7ff f8dd 	bl	8000f20 <LL_PWR_IsEnabledBkUpAccess>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0fa      	beq.n	8001d62 <MX_RTC_Init+0x4a>
      {
      }
    }
    LL_RCC_ForceBackupDomainReset();
 8001d6c:	f7fe ff36 	bl	8000bdc <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 8001d70:	f7fe ff46 	bl	8000c00 <LL_RCC_ReleaseBackupDomainReset>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8001d74:	2000      	movs	r0, #0
 8001d76:	f7fe fe01 	bl	800097c <LL_RCC_LSE_SetDriveCapability>
    LL_RCC_LSE_Enable();
 8001d7a:	f7fe fded 	bl	8000958 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
    while(LL_RCC_LSE_IsReady() != 1)
 8001d7e:	bf00      	nop
 8001d80:	f7fe fe24 	bl	80009cc <LL_RCC_LSE_IsReady>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d1fa      	bne.n	8001d80 <MX_RTC_Init+0x68>
    {
    }
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 8001d8a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d8e:	f7fe feef 	bl	8000b70 <LL_RCC_SetRTCClockSource>
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d103      	bne.n	8001da0 <MX_RTC_Init+0x88>
    {
      LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001d98:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001d9c:	f7ff f84e 	bl	8000e3c <LL_APB1_GRP1_DisableClock>
    }
  }

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 8001da0:	f7fe ff0a 	bl	8000bb8 <LL_RCC_EnableRTC>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC and set the Time and Date
  */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8001da4:	2300      	movs	r3, #0
 8001da6:	603b      	str	r3, [r7, #0]
  RTC_InitStruct.AsynchPrescaler = 127;
 8001da8:	237f      	movs	r3, #127	@ 0x7f
 8001daa:	607b      	str	r3, [r7, #4]
  RTC_InitStruct.SynchPrescaler = 255;
 8001dac:	23ff      	movs	r3, #255	@ 0xff
 8001dae:	60bb      	str	r3, [r7, #8]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8001db0:	463b      	mov	r3, r7
 8001db2:	4619      	mov	r1, r3
 8001db4:	4803      	ldr	r0, [pc, #12]	@ (8001dc4 <MX_RTC_Init+0xac>)
 8001db6:	f002 fe63 	bl	8004a80 <LL_RTC_Init>
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40002800 	.word	0x40002800

08001dc8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b090      	sub	sp, #64	@ 0x40
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001dce:	f107 0318 	add.w	r3, r7, #24
 8001dd2:	2228      	movs	r2, #40	@ 0x28
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 fc7e 	bl	80056d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	463b      	mov	r3, r7
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	611a      	str	r2, [r3, #16]
 8001dea:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001dec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001df0:	f7fe fff6 	bl	8000de0 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001df4:	2002      	movs	r0, #2
 8001df6:	f7fe ffdb 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8001dfa:	2008      	movs	r0, #8
 8001dfc:	f7fe ffd8 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  PD3   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8001e00:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001e04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e06:	2302      	movs	r3, #2
 8001e08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001e16:	2305      	movs	r3, #5
 8001e18:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1a:	463b      	mov	r3, r7
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	481e      	ldr	r0, [pc, #120]	@ (8001e98 <MX_SPI2_Init+0xd0>)
 8001e20:	f002 f969 	bl	80040f6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001e24:	2308      	movs	r3, #8
 8001e26:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e3c:	463b      	mov	r3, r7
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4816      	ldr	r0, [pc, #88]	@ (8001e9c <MX_SPI2_Init+0xd4>)
 8001e42:	f002 f958 	bl	80040f6 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001e4a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001e4e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_4BIT;
 8001e50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e54:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001e5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001e64:	2300      	movs	r3, #0
 8001e66:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001e70:	2307      	movs	r3, #7
 8001e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001e74:	f107 0318 	add.w	r3, r7, #24
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4809      	ldr	r0, [pc, #36]	@ (8001ea0 <MX_SPI2_Init+0xd8>)
 8001e7c:	f002 fe98 	bl	8004bb0 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001e80:	2100      	movs	r1, #0
 8001e82:	4807      	ldr	r0, [pc, #28]	@ (8001ea0 <MX_SPI2_Init+0xd8>)
 8001e84:	f7ff f874 	bl	8000f70 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI2);
 8001e88:	4805      	ldr	r0, [pc, #20]	@ (8001ea0 <MX_SPI2_Init+0xd8>)
 8001e8a:	f7ff f884 	bl	8000f96 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	3740      	adds	r7, #64	@ 0x40
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	48000400 	.word	0x48000400
 8001e9c:	48000c00 	.word	0x48000c00
 8001ea0:	40003800 	.word	0x40003800

08001ea4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b094      	sub	sp, #80	@ 0x50
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001eaa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fc08 	bl	80056d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
 8001ed4:	611a      	str	r2, [r3, #16]
 8001ed6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001ed8:	2002      	movs	r0, #2
 8001eda:	f7fe ff81 	bl	8000de0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 65535;
 8001ee6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eea:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001ef0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	482d      	ldr	r0, [pc, #180]	@ (8001fac <MX_TIM3_Init+0x108>)
 8001ef8:	f002 ff42 	bl	8004d80 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001efc:	482b      	ldr	r0, [pc, #172]	@ (8001fac <MX_TIM3_Init+0x108>)
 8001efe:	f7ff f85a 	bl	8000fb6 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8001f02:	2101      	movs	r1, #1
 8001f04:	4829      	ldr	r0, [pc, #164]	@ (8001fac <MX_TIM3_Init+0x108>)
 8001f06:	f7ff f8b9 	bl	800107c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001f0a:	2360      	movs	r3, #96	@ 0x60
 8001f0c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	461a      	mov	r2, r3
 8001f24:	2101      	movs	r1, #1
 8001f26:	4821      	ldr	r0, [pc, #132]	@ (8001fac <MX_TIM3_Init+0x108>)
 8001f28:	f002 ffbe 	bl	8004ea8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	481f      	ldr	r0, [pc, #124]	@ (8001fac <MX_TIM3_Init+0x108>)
 8001f30:	f7ff f852 	bl	8000fd8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8001f34:	2110      	movs	r1, #16
 8001f36:	481d      	ldr	r0, [pc, #116]	@ (8001fac <MX_TIM3_Init+0x108>)
 8001f38:	f7ff f8a0 	bl	800107c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001f3c:	f107 031c 	add.w	r3, r7, #28
 8001f40:	461a      	mov	r2, r3
 8001f42:	2110      	movs	r1, #16
 8001f44:	4819      	ldr	r0, [pc, #100]	@ (8001fac <MX_TIM3_Init+0x108>)
 8001f46:	f002 ffaf 	bl	8004ea8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8001f4a:	2110      	movs	r1, #16
 8001f4c:	4817      	ldr	r0, [pc, #92]	@ (8001fac <MX_TIM3_Init+0x108>)
 8001f4e:	f7ff f843 	bl	8000fd8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM3, LL_TIM_OCREF_CLR_INT_NC);
 8001f52:	2100      	movs	r1, #0
 8001f54:	4815      	ldr	r0, [pc, #84]	@ (8001fac <MX_TIM3_Init+0x108>)
 8001f56:	f7ff f92d 	bl	80011b4 <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM3);
 8001f5a:	4814      	ldr	r0, [pc, #80]	@ (8001fac <MX_TIM3_Init+0x108>)
 8001f5c:	f7ff f8de 	bl	800111c <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM3, LL_TIM_ETR_POLARITY_NONINVERTED, LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
 8001f60:	2300      	movs	r3, #0
 8001f62:	2200      	movs	r2, #0
 8001f64:	2100      	movs	r1, #0
 8001f66:	4811      	ldr	r0, [pc, #68]	@ (8001fac <MX_TIM3_Init+0x108>)
 8001f68:	f7ff f90b 	bl	8001182 <LL_TIM_ConfigETR>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	480f      	ldr	r0, [pc, #60]	@ (8001fac <MX_TIM3_Init+0x108>)
 8001f70:	f7ff f8e4 	bl	800113c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001f74:	480d      	ldr	r0, [pc, #52]	@ (8001fac <MX_TIM3_Init+0x108>)
 8001f76:	f7ff f8f4 	bl	8001162 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001f7a:	2004      	movs	r0, #4
 8001f7c:	f7fe ff18 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PC6   ------> TIM3_CH1
  PC7   ------> TIM3_CH2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001f80:	23c0      	movs	r3, #192	@ 0xc0
 8001f82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f84:	2302      	movs	r3, #2
 8001f86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001f94:	2302      	movs	r3, #2
 8001f96:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4804      	ldr	r0, [pc, #16]	@ (8001fb0 <MX_TIM3_Init+0x10c>)
 8001f9e:	f002 f8aa 	bl	80040f6 <LL_GPIO_Init>

}
 8001fa2:	bf00      	nop
 8001fa4:	3750      	adds	r7, #80	@ 0x50
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40000400 	.word	0x40000400
 8001fb0:	48000800 	.word	0x48000800

08001fb4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b094      	sub	sp, #80	@ 0x50
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001fba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001fca:	f107 031c 	add.w	r3, r7, #28
 8001fce:	2220      	movs	r2, #32
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fb80 	bl	80056d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
 8001fe4:	611a      	str	r2, [r3, #16]
 8001fe6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001fe8:	2004      	movs	r0, #4
 8001fea:	f7fe fef9 	bl	8000de0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 65535;
 8001ff6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8002000:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002004:	4619      	mov	r1, r3
 8002006:	4836      	ldr	r0, [pc, #216]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 8002008:	f002 feba 	bl	8004d80 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 800200c:	4834      	ldr	r0, [pc, #208]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 800200e:	f7fe ffd2 	bl	8000fb6 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH1);
 8002012:	2101      	movs	r1, #1
 8002014:	4832      	ldr	r0, [pc, #200]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 8002016:	f7ff f831 	bl	800107c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800201a:	2360      	movs	r3, #96	@ 0x60
 800201c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800202a:	2300      	movs	r3, #0
 800202c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	461a      	mov	r2, r3
 8002034:	2101      	movs	r1, #1
 8002036:	482a      	ldr	r0, [pc, #168]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 8002038:	f002 ff36 	bl	8004ea8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH1);
 800203c:	2101      	movs	r1, #1
 800203e:	4828      	ldr	r0, [pc, #160]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 8002040:	f7fe ffca 	bl	8000fd8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH2);
 8002044:	2110      	movs	r1, #16
 8002046:	4826      	ldr	r0, [pc, #152]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 8002048:	f7ff f818 	bl	800107c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	461a      	mov	r2, r3
 8002052:	2110      	movs	r1, #16
 8002054:	4822      	ldr	r0, [pc, #136]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 8002056:	f002 ff27 	bl	8004ea8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH2);
 800205a:	2110      	movs	r1, #16
 800205c:	4820      	ldr	r0, [pc, #128]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 800205e:	f7fe ffbb 	bl	8000fd8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM4, LL_TIM_CHANNEL_CH3);
 8002062:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002066:	481e      	ldr	r0, [pc, #120]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 8002068:	f7ff f808 	bl	800107c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	461a      	mov	r2, r3
 8002072:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002076:	481a      	ldr	r0, [pc, #104]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 8002078:	f002 ff16 	bl	8004ea8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM4, LL_TIM_CHANNEL_CH3);
 800207c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002080:	4817      	ldr	r0, [pc, #92]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 8002082:	f7fe ffa9 	bl	8000fd8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM4, LL_TIM_OCREF_CLR_INT_NC);
 8002086:	2100      	movs	r1, #0
 8002088:	4815      	ldr	r0, [pc, #84]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 800208a:	f7ff f893 	bl	80011b4 <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM4);
 800208e:	4814      	ldr	r0, [pc, #80]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 8002090:	f7ff f844 	bl	800111c <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM4, LL_TIM_ETR_POLARITY_NONINVERTED, LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
 8002094:	2300      	movs	r3, #0
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	4811      	ldr	r0, [pc, #68]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 800209c:	f7ff f871 	bl	8001182 <LL_TIM_ConfigETR>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 80020a0:	2100      	movs	r1, #0
 80020a2:	480f      	ldr	r0, [pc, #60]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 80020a4:	f7ff f84a 	bl	800113c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80020a8:	480d      	ldr	r0, [pc, #52]	@ (80020e0 <MX_TIM4_Init+0x12c>)
 80020aa:	f7ff f85a 	bl	8001162 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80020ae:	2008      	movs	r0, #8
 80020b0:	f7fe fe7e 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  /**TIM4 GPIO Configuration
  PD12   ------> TIM4_CH1
  PD13   ------> TIM4_CH2
  PD14   ------> TIM4_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 80020b4:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80020b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020ba:	2302      	movs	r3, #2
 80020bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80020ca:	2302      	movs	r3, #2
 80020cc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	4619      	mov	r1, r3
 80020d2:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <MX_TIM4_Init+0x130>)
 80020d4:	f002 f80f 	bl	80040f6 <LL_GPIO_Init>

}
 80020d8:	bf00      	nop
 80020da:	3750      	adds	r7, #80	@ 0x50
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40000800 	.word	0x40000800
 80020e4:	48000c00 	.word	0x48000c00

080020e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08e      	sub	sp, #56	@ 0x38
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 80020ee:	f107 031c 	add.w	r3, r7, #28
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	611a      	str	r2, [r3, #16]
 80020fe:	615a      	str	r2, [r3, #20]
 8002100:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
 8002110:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUARTClockSource(LL_RCC_UART4_CLKSOURCE_PCLK1);
 8002112:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 8002116:	f7fe fce5 	bl	8000ae4 <LL_RCC_SetUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 800211a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800211e:	f7fe fe5f 	bl	8000de0 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002122:	2004      	movs	r0, #4
 8002124:	f7fe fe44 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 8002128:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800212c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800212e:	2302      	movs	r3, #2
 8002130:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800213e:	2308      	movs	r3, #8
 8002140:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4819      	ldr	r0, [pc, #100]	@ (80021ac <MX_UART4_Init+0xc4>)
 8002148:	f001 ffd5 	bl	80040f6 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800214c:	f7fe f84e 	bl	80001ec <__NVIC_GetPriorityGrouping>
 8002150:	4603      	mov	r3, r0
 8002152:	2200      	movs	r2, #0
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f89e 	bl	8000298 <NVIC_EncodePriority>
 800215c:	4603      	mov	r3, r0
 800215e:	4619      	mov	r1, r3
 8002160:	2034      	movs	r0, #52	@ 0x34
 8002162:	f7fe f86f 	bl	8000244 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8002166:	2034      	movs	r0, #52	@ 0x34
 8002168:	f7fe f84e 	bl	8000208 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  UART_InitStruct.BaudRate = 115200;
 800216c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002170:	61fb      	str	r3, [r7, #28]
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800217a:	2300      	movs	r3, #0
 800217c:	62bb      	str	r3, [r7, #40]	@ 0x28
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800217e:	230c      	movs	r3, #12
 8002180:	62fb      	str	r3, [r7, #44]	@ 0x2c
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002182:	2300      	movs	r3, #0
 8002184:	633b      	str	r3, [r7, #48]	@ 0x30
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002186:	2300      	movs	r3, #0
 8002188:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &UART_InitStruct);
 800218a:	f107 031c 	add.w	r3, r7, #28
 800218e:	4619      	mov	r1, r3
 8002190:	4807      	ldr	r0, [pc, #28]	@ (80021b0 <MX_UART4_Init+0xc8>)
 8002192:	f003 fa15 	bl	80055c0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8002196:	4806      	ldr	r0, [pc, #24]	@ (80021b0 <MX_UART4_Init+0xc8>)
 8002198:	f7ff f82f 	bl	80011fa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 800219c:	4804      	ldr	r0, [pc, #16]	@ (80021b0 <MX_UART4_Init+0xc8>)
 800219e:	f7ff f81c 	bl	80011da <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	3738      	adds	r7, #56	@ 0x38
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	48000800 	.word	0x48000800
 80021b0:	40004c00 	.word	0x40004c00

080021b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08e      	sub	sp, #56	@ 0x38
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80021ba:	f107 031c 	add.w	r3, r7, #28
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	611a      	str	r2, [r3, #16]
 80021ca:	615a      	str	r2, [r3, #20]
 80021cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
 80021dc:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 80021de:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80021e2:	f7fe fc65 	bl	8000ab0 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80021e6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80021ea:	f7fe fe3b 	bl	8000e64 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f7fe fdde 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80021f4:	2002      	movs	r0, #2
 80021f6:	f7fe fddb 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PB7   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80021fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002200:	2302      	movs	r3, #2
 8002202:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002210:	2307      	movs	r3, #7
 8002212:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	4619      	mov	r1, r3
 8002218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800221c:	f001 ff6b 	bl	80040f6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002224:	2302      	movs	r3, #2
 8002226:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002234:	2307      	movs	r3, #7
 8002236:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002238:	1d3b      	adds	r3, r7, #4
 800223a:	4619      	mov	r1, r3
 800223c:	4818      	ldr	r0, [pc, #96]	@ (80022a0 <MX_USART1_UART_Init+0xec>)
 800223e:	f001 ff5a 	bl	80040f6 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002242:	f7fd ffd3 	bl	80001ec <__NVIC_GetPriorityGrouping>
 8002246:	4603      	mov	r3, r0
 8002248:	2200      	movs	r2, #0
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f823 	bl	8000298 <NVIC_EncodePriority>
 8002252:	4603      	mov	r3, r0
 8002254:	4619      	mov	r1, r3
 8002256:	2025      	movs	r0, #37	@ 0x25
 8002258:	f7fd fff4 	bl	8000244 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800225c:	2025      	movs	r0, #37	@ 0x25
 800225e:	f7fd ffd3 	bl	8000208 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002262:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002266:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002270:	2300      	movs	r3, #0
 8002272:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002274:	230c      	movs	r3, #12
 8002276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002278:	2300      	movs	r3, #0
 800227a:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800227c:	2300      	movs	r3, #0
 800227e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	4619      	mov	r1, r3
 8002286:	4807      	ldr	r0, [pc, #28]	@ (80022a4 <MX_USART1_UART_Init+0xf0>)
 8002288:	f003 f99a 	bl	80055c0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800228c:	4805      	ldr	r0, [pc, #20]	@ (80022a4 <MX_USART1_UART_Init+0xf0>)
 800228e:	f7fe ffb4 	bl	80011fa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002292:	4804      	ldr	r0, [pc, #16]	@ (80022a4 <MX_USART1_UART_Init+0xf0>)
 8002294:	f7fe ffa1 	bl	80011da <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002298:	bf00      	nop
 800229a:	3738      	adds	r7, #56	@ 0x38
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	48000400 	.word	0x48000400
 80022a4:	40013800 	.word	0x40013800

080022a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08e      	sub	sp, #56	@ 0x38
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80022ae:	f107 031c 	add.w	r3, r7, #28
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	60da      	str	r2, [r3, #12]
 80022bc:	611a      	str	r2, [r3, #16]
 80022be:	615a      	str	r2, [r3, #20]
 80022c0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
 80022d0:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80022d2:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 80022d6:	f7fe fbeb 	bl	8000ab0 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80022da:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80022de:	f7fe fd7f 	bl	8000de0 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80022e2:	2008      	movs	r0, #8
 80022e4:	f7fe fd64 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PD5   ------> USART2_TX
  PD6   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6;
 80022e8:	2360      	movs	r3, #96	@ 0x60
 80022ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022ec:	2302      	movs	r3, #2
 80022ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022f0:	2303      	movs	r3, #3
 80022f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80022fc:	2307      	movs	r3, #7
 80022fe:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	4619      	mov	r1, r3
 8002304:	4818      	ldr	r0, [pc, #96]	@ (8002368 <MX_USART2_UART_Init+0xc0>)
 8002306:	f001 fef6 	bl	80040f6 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800230a:	f7fd ff6f 	bl	80001ec <__NVIC_GetPriorityGrouping>
 800230e:	4603      	mov	r3, r0
 8002310:	2200      	movs	r2, #0
 8002312:	2100      	movs	r1, #0
 8002314:	4618      	mov	r0, r3
 8002316:	f7fd ffbf 	bl	8000298 <NVIC_EncodePriority>
 800231a:	4603      	mov	r3, r0
 800231c:	4619      	mov	r1, r3
 800231e:	2026      	movs	r0, #38	@ 0x26
 8002320:	f7fd ff90 	bl	8000244 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002324:	2026      	movs	r0, #38	@ 0x26
 8002326:	f7fd ff6f 	bl	8000208 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800232a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800232e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002338:	2300      	movs	r3, #0
 800233a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800233c:	230c      	movs	r3, #12
 800233e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002340:	2300      	movs	r3, #0
 8002342:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002344:	2300      	movs	r3, #0
 8002346:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002348:	f107 031c 	add.w	r3, r7, #28
 800234c:	4619      	mov	r1, r3
 800234e:	4807      	ldr	r0, [pc, #28]	@ (800236c <MX_USART2_UART_Init+0xc4>)
 8002350:	f003 f936 	bl	80055c0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002354:	4805      	ldr	r0, [pc, #20]	@ (800236c <MX_USART2_UART_Init+0xc4>)
 8002356:	f7fe ff50 	bl	80011fa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800235a:	4804      	ldr	r0, [pc, #16]	@ (800236c <MX_USART2_UART_Init+0xc4>)
 800235c:	f7fe ff3d 	bl	80011da <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002360:	bf00      	nop
 8002362:	3738      	adds	r7, #56	@ 0x38
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	48000c00 	.word	0x48000c00
 800236c:	40004400 	.word	0x40004400

08002370 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08e      	sub	sp, #56	@ 0x38
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002376:	f107 031c 	add.w	r3, r7, #28
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	60da      	str	r2, [r3, #12]
 8002384:	611a      	str	r2, [r3, #16]
 8002386:	615a      	str	r2, [r3, #20]
 8002388:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
 8002398:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART3_CLKSOURCE_PCLK1);
 800239a:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 800239e:	f7fe fb87 	bl	8000ab0 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80023a2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80023a6:	f7fe fd1b 	bl	8000de0 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80023aa:	2002      	movs	r0, #2
 80023ac:	f7fe fd00 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80023b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80023b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023b6:	2302      	movs	r3, #2
 80023b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80023c6:	2307      	movs	r3, #7
 80023c8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4819      	ldr	r0, [pc, #100]	@ (8002434 <MX_USART3_UART_Init+0xc4>)
 80023d0:	f001 fe91 	bl	80040f6 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80023d4:	f7fd ff0a 	bl	80001ec <__NVIC_GetPriorityGrouping>
 80023d8:	4603      	mov	r3, r0
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fd ff5a 	bl	8000298 <NVIC_EncodePriority>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4619      	mov	r1, r3
 80023e8:	2027      	movs	r0, #39	@ 0x27
 80023ea:	f7fd ff2b 	bl	8000244 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80023ee:	2027      	movs	r0, #39	@ 0x27
 80023f0:	f7fd ff0a 	bl	8000208 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80023f4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80023f8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80023fa:	2300      	movs	r3, #0
 80023fc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002402:	2300      	movs	r3, #0
 8002404:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002406:	230c      	movs	r3, #12
 8002408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800240a:	2300      	movs	r3, #0
 800240c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800240e:	2300      	movs	r3, #0
 8002410:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	4619      	mov	r1, r3
 8002418:	4807      	ldr	r0, [pc, #28]	@ (8002438 <MX_USART3_UART_Init+0xc8>)
 800241a:	f003 f8d1 	bl	80055c0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800241e:	4806      	ldr	r0, [pc, #24]	@ (8002438 <MX_USART3_UART_Init+0xc8>)
 8002420:	f7fe feeb 	bl	80011fa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8002424:	4804      	ldr	r0, [pc, #16]	@ (8002438 <MX_USART3_UART_Init+0xc8>)
 8002426:	f7fe fed8 	bl	80011da <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	3738      	adds	r7, #56	@ 0x38
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	48000400 	.word	0x48000400
 8002438:	40004800 	.word	0x40004800

0800243c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800244e:	2001      	movs	r0, #1
 8002450:	f7fe fc96 	bl	8000d80 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002454:	f7fd feca 	bl	80001ec <__NVIC_GetPriorityGrouping>
 8002458:	4603      	mov	r3, r0
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f7fd ff1a 	bl	8000298 <NVIC_EncodePriority>
 8002464:	4603      	mov	r3, r0
 8002466:	4619      	mov	r1, r3
 8002468:	200b      	movs	r0, #11
 800246a:	f7fd feeb 	bl	8000244 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800246e:	200b      	movs	r0, #11
 8002470:	f7fd feca 	bl	8000208 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002474:	f7fd feba 	bl	80001ec <__NVIC_GetPriorityGrouping>
 8002478:	4603      	mov	r3, r0
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f7fd ff0a 	bl	8000298 <NVIC_EncodePriority>
 8002484:	4603      	mov	r3, r0
 8002486:	4619      	mov	r1, r3
 8002488:	200d      	movs	r0, #13
 800248a:	f7fd fedb 	bl	8000244 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800248e:	200d      	movs	r0, #13
 8002490:	f7fd feba 	bl	8000208 <__NVIC_EnableIRQ>

}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}

08002498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249e:	463b      	mov	r3, r7
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
 80024ac:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80024ae:	2010      	movs	r0, #16
 80024b0:	f7fe fc7e 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80024b4:	2004      	movs	r0, #4
 80024b6:	f7fe fc7b 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80024ba:	2080      	movs	r0, #128	@ 0x80
 80024bc:	f7fe fc78 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80024c0:	2001      	movs	r0, #1
 80024c2:	f7fe fc75 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80024c6:	2002      	movs	r0, #2
 80024c8:	f7fe fc72 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80024cc:	2008      	movs	r0, #8
 80024ce:	f7fe fc6f 	bl	8000db0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, DEBUG_LED2_Pin|DEBUG_LED3_Pin|DEBUG_LED4_Pin|DEBUG_LED5_Pin
 80024d2:	f24c 31be 	movw	r1, #50110	@ 0xc3be
 80024d6:	4833      	ldr	r0, [pc, #204]	@ (80025a4 <MX_GPIO_Init+0x10c>)
 80024d8:	f7fe fec6 	bl	8001268 <LL_GPIO_ResetOutputPin>
                          |EN_5V_PM_Pin|EN_UNREG1_PM_Pin|EN_UNREG2_PM_Pin|EN_3V3_1_PM_Pin
                          |EN_3V3_2_BUCK_PM_Pin|DEBUG_LED1_Pin);

  /**/
  LL_GPIO_ResetOutputPin(EN_5V_BOOST_PM_GPIO_Port, EN_5V_BOOST_PM_Pin);
 80024dc:	2104      	movs	r1, #4
 80024de:	4832      	ldr	r0, [pc, #200]	@ (80025a8 <MX_GPIO_Init+0x110>)
 80024e0:	f7fe fec2 	bl	8001268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, EN_MCU_3V3_PM_Pin|EN_MCU_BUCK_PM_Pin|EN_3V3_2_PM_Pin|EN_3V3_1_BUCK_PM_Pin);
 80024e4:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 80024e8:	4830      	ldr	r0, [pc, #192]	@ (80025ac <MX_GPIO_Init+0x114>)
 80024ea:	f7fe febd 	bl	8001268 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, DONE_Pin|WAKE_Pin);
 80024ee:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80024f2:	482f      	ldr	r0, [pc, #188]	@ (80025b0 <MX_GPIO_Init+0x118>)
 80024f4:	f7fe feb8 	bl	8001268 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = DEBUG_LED2_Pin|DEBUG_LED3_Pin|DEBUG_LED4_Pin|DEBUG_LED5_Pin
 80024f8:	f24c 33be 	movw	r3, #50110	@ 0xc3be
 80024fc:	603b      	str	r3, [r7, #0]
                          |EN_5V_PM_Pin|EN_UNREG1_PM_Pin|EN_UNREG2_PM_Pin|EN_3V3_1_PM_Pin
                          |EN_3V3_2_BUCK_PM_Pin|DEBUG_LED1_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80024fe:	2301      	movs	r3, #1
 8002500:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800250e:	463b      	mov	r3, r7
 8002510:	4619      	mov	r1, r3
 8002512:	4824      	ldr	r0, [pc, #144]	@ (80025a4 <MX_GPIO_Init+0x10c>)
 8002514:	f001 fdef 	bl	80040f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EN_5V_BOOST_PM_Pin;
 8002518:	2304      	movs	r3, #4
 800251a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800251c:	2301      	movs	r3, #1
 800251e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002528:	2300      	movs	r3, #0
 800252a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(EN_5V_BOOST_PM_GPIO_Port, &GPIO_InitStruct);
 800252c:	463b      	mov	r3, r7
 800252e:	4619      	mov	r1, r3
 8002530:	481d      	ldr	r0, [pc, #116]	@ (80025a8 <MX_GPIO_Init+0x110>)
 8002532:	f001 fde0 	bl	80040f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EN_MCU_3V3_PM_Pin|EN_MCU_BUCK_PM_Pin|EN_3V3_2_PM_Pin|EN_3V3_1_BUCK_PM_Pin;
 8002536:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800253a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800253c:	2301      	movs	r3, #1
 800253e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002548:	2300      	movs	r3, #0
 800254a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800254c:	463b      	mov	r3, r7
 800254e:	4619      	mov	r1, r3
 8002550:	4816      	ldr	r0, [pc, #88]	@ (80025ac <MX_GPIO_Init+0x114>)
 8002552:	f001 fdd0 	bl	80040f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DONE_Pin|WAKE_Pin;
 8002556:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800255a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800255c:	2301      	movs	r3, #1
 800255e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256c:	463b      	mov	r3, r7
 800256e:	4619      	mov	r1, r3
 8002570:	480f      	ldr	r0, [pc, #60]	@ (80025b0 <MX_GPIO_Init+0x118>)
 8002572:	f001 fdc0 	bl	80040f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8002576:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800257a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800257c:	2302      	movs	r3, #2
 800257e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 800258c:	230a      	movs	r3, #10
 800258e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002590:	463b      	mov	r3, r7
 8002592:	4619      	mov	r1, r3
 8002594:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002598:	f001 fdad 	bl	80040f6 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800259c:	bf00      	nop
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	48001000 	.word	0x48001000
 80025a8:	48000400 	.word	0x48000400
 80025ac:	48000c00 	.word	0x48000c00
 80025b0:	48000800 	.word	0x48000800

080025b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025b8:	b672      	cpsid	i
}
 80025ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <Error_Handler+0x8>

080025c0 <LL_USART_IsActiveFlag_TXE>:
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025d0:	2b80      	cmp	r3, #128	@ 0x80
 80025d2:	d101      	bne.n	80025d8 <LL_USART_IsActiveFlag_TXE+0x18>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <LL_USART_IsActiveFlag_TXE+0x1a>
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80025f2:	78fb      	ldrb	r3, [r7, #3]
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <LL_GPIO_SetOutputPin>:
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	619a      	str	r2, [r3, #24]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <LL_GPIO_ResetOutputPin>:
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <SRIC_2_PMIC_Check_CHKSUM>:
Struct_SRIC_2_PMIC sr2pm;
Struct_OBC_2_PMIC obc2pm;


unsigned char SRIC_2_PMIC_Check_CHKSUM(unsigned char* data)
{
 800263e:	b480      	push	{r7}
 8002640:	b085      	sub	sp, #20
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
	unsigned short crc = 0xFFFF;
 8002646:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800264a:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<18;i++)
 800264c:	2300      	movs	r3, #0
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	e00a      	b.n	8002668 <SRIC_2_PMIC_Check_CHKSUM+0x2a>
	{
		crc = crc - data[i];
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4413      	add	r3, r2
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	89fb      	ldrh	r3, [r7, #14]
 800265e:	1a9b      	subs	r3, r3, r2
 8002660:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<18;i++)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	3301      	adds	r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b11      	cmp	r3, #17
 800266c:	ddf1      	ble.n	8002652 <SRIC_2_PMIC_Check_CHKSUM+0x14>
	}

	return ((crc&0x00FF) == data[18]) && ((crc >> 8) == data[19]);
 800266e:	89fb      	ldrh	r3, [r7, #14]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	3212      	adds	r2, #18
 8002676:	7812      	ldrb	r2, [r2, #0]
 8002678:	4293      	cmp	r3, r2
 800267a:	d109      	bne.n	8002690 <SRIC_2_PMIC_Check_CHKSUM+0x52>
 800267c:	89fb      	ldrh	r3, [r7, #14]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	b29b      	uxth	r3, r3
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	3213      	adds	r2, #19
 8002686:	7812      	ldrb	r2, [r2, #0]
 8002688:	4293      	cmp	r3, r2
 800268a:	d101      	bne.n	8002690 <SRIC_2_PMIC_Check_CHKSUM+0x52>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <SRIC_2_PMIC_Check_CHKSUM+0x54>
 8002690:	2300      	movs	r3, #0
 8002692:	b2db      	uxtb	r3, r3
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <SRIC_2_PMIC_Parsing>:

void SRIC_2_PMIC_Parsing(unsigned char* data, Struct_SRIC_2_PMIC* sr2pm)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
	sr2pm->channel_0 = (unsigned char)(data[2]) & 0xFF;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	789a      	ldrb	r2, [r3, #2]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	701a      	strb	r2, [r3, #0]
	sr2pm->channel_1 = (unsigned char)(data[3]) & 0xFF;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	78da      	ldrb	r2, [r3, #3]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	705a      	strb	r2, [r3, #1]
	sr2pm->channel_2 = (unsigned char)(data[4]) & 0xFF;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	791a      	ldrb	r2, [r3, #4]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	709a      	strb	r2, [r3, #2]
	sr2pm->channel_3 = (unsigned char)(data[5]) & 0xFF;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	795a      	ldrb	r2, [r3, #5]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	70da      	strb	r2, [r3, #3]
	sr2pm->channel_4 = (unsigned char)(data[6]) & 0xFF;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	799a      	ldrb	r2, [r3, #6]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	711a      	strb	r2, [r3, #4]
	sr2pm->channel_5 = (unsigned char)(data[7]) & 0xFF;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	79da      	ldrb	r2, [r3, #7]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	715a      	strb	r2, [r3, #5]
	sr2pm->channel_6 = (unsigned char)(data[8]) & 0xFF;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	7a1a      	ldrb	r2, [r3, #8]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	719a      	strb	r2, [r3, #6]
	sr2pm->channel_7 = (unsigned char)(data[8]) & 0xFF;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	7a1a      	ldrb	r2, [r3, #8]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	71da      	strb	r2, [r3, #7]
	sr2pm->channel_8 = (unsigned char)(data[10]) & 0xFF;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7a9a      	ldrb	r2, [r3, #10]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	721a      	strb	r2, [r3, #8]
	sr2pm->channel_9 = (unsigned char)(data[11]) & 0xFF;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7ada      	ldrb	r2, [r3, #11]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	725a      	strb	r2, [r3, #9]
	sr2pm->channel_a = (unsigned char)(data[12]) & 0xFF;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7b1a      	ldrb	r2, [r3, #12]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	729a      	strb	r2, [r3, #10]
	sr2pm->channel_b = (unsigned char)(data[13]) & 0xFF;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	7b5a      	ldrb	r2, [r3, #13]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	72da      	strb	r2, [r3, #11]
	sr2pm->channel_c = (unsigned char)(data[14]) & 0xFF;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7b9a      	ldrb	r2, [r3, #14]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	731a      	strb	r2, [r3, #12]
	sr2pm->channel_d = (unsigned char)(data[15]) & 0xFF;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	7bda      	ldrb	r2, [r3, #15]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	735a      	strb	r2, [r3, #13]
	sr2pm->channel_e = (unsigned char)(data[16]) & 0xFF;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	7c1a      	ldrb	r2, [r3, #16]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	739a      	strb	r2, [r3, #14]
	sr2pm->channel_f = (unsigned char)(data[17]) & 0xFF;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	7c5a      	ldrb	r2, [r3, #17]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	73da      	strb	r2, [r3, #15]
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <OBC_2_PMIC_Check_CHKSUM>:

}


unsigned char OBC_2_PMIC_Check_CHKSUM(unsigned char* data)
{
 8002736:	b480      	push	{r7}
 8002738:	b085      	sub	sp, #20
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
	unsigned short crc = 0xFFFF;
 800273e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002742:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<18;i++)
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	e00a      	b.n	8002760 <OBC_2_PMIC_Check_CHKSUM+0x2a>
	{
		crc = crc - data[i];
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	4413      	add	r3, r2
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	89fb      	ldrh	r3, [r7, #14]
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<18;i++)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	3301      	adds	r3, #1
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b11      	cmp	r3, #17
 8002764:	ddf1      	ble.n	800274a <OBC_2_PMIC_Check_CHKSUM+0x14>
	}

	return ((crc&0x00FF) == data[18]) && ((crc >> 8) == data[19]);
 8002766:	89fb      	ldrh	r3, [r7, #14]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	3212      	adds	r2, #18
 800276e:	7812      	ldrb	r2, [r2, #0]
 8002770:	4293      	cmp	r3, r2
 8002772:	d109      	bne.n	8002788 <OBC_2_PMIC_Check_CHKSUM+0x52>
 8002774:	89fb      	ldrh	r3, [r7, #14]
 8002776:	0a1b      	lsrs	r3, r3, #8
 8002778:	b29b      	uxth	r3, r3
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	3213      	adds	r2, #19
 800277e:	7812      	ldrb	r2, [r2, #0]
 8002780:	4293      	cmp	r3, r2
 8002782:	d101      	bne.n	8002788 <OBC_2_PMIC_Check_CHKSUM+0x52>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <OBC_2_PMIC_Check_CHKSUM+0x54>
 8002788:	2300      	movs	r3, #0
 800278a:	b2db      	uxtb	r3, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <OBC_2_PMIC_Parsing>:

void OBC_2_PMIC_Parsing(unsigned char* data, Struct_OBC_2_PMIC* obc2pm)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
	obc2pm->channel_0 = (unsigned char)(data[2]) & 0xFF;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	789a      	ldrb	r2, [r3, #2]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	701a      	strb	r2, [r3, #0]
	obc2pm->channel_1 = (unsigned char)(data[3]) & 0xFF;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	78da      	ldrb	r2, [r3, #3]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	705a      	strb	r2, [r3, #1]
	obc2pm->channel_2 = (unsigned char)(data[4]) & 0xFF;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	791a      	ldrb	r2, [r3, #4]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	709a      	strb	r2, [r3, #2]
	obc2pm->channel_3 = (unsigned char)(data[5]) & 0xFF;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	795a      	ldrb	r2, [r3, #5]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	70da      	strb	r2, [r3, #3]
	obc2pm->channel_4 = (unsigned char)(data[6]) & 0xFF;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	799a      	ldrb	r2, [r3, #6]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	711a      	strb	r2, [r3, #4]
	obc2pm->channel_5 = (unsigned char)(data[7]) & 0xFF;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	79da      	ldrb	r2, [r3, #7]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	715a      	strb	r2, [r3, #5]
	obc2pm->channel_6 = (unsigned char)(data[8]) & 0xFF;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7a1a      	ldrb	r2, [r3, #8]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	719a      	strb	r2, [r3, #6]
	obc2pm->channel_7 = (unsigned char)(data[8]) & 0xFF;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7a1a      	ldrb	r2, [r3, #8]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	71da      	strb	r2, [r3, #7]
	obc2pm->channel_8 = (unsigned char)(data[10]) & 0xFF;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7a9a      	ldrb	r2, [r3, #10]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	721a      	strb	r2, [r3, #8]
	obc2pm->channel_9 = (unsigned char)(data[11]) & 0xFF;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7ada      	ldrb	r2, [r3, #11]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	725a      	strb	r2, [r3, #9]
	obc2pm->channel_a = (unsigned char)(data[12]) & 0xFF;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	7b1a      	ldrb	r2, [r3, #12]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	729a      	strb	r2, [r3, #10]
	obc2pm->channel_b = (unsigned char)(data[13]) & 0xFF;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	7b5a      	ldrb	r2, [r3, #13]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	72da      	strb	r2, [r3, #11]
	obc2pm->channel_c = (unsigned char)(data[14]) & 0xFF;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	7b9a      	ldrb	r2, [r3, #14]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	731a      	strb	r2, [r3, #12]
	obc2pm->channel_d = (unsigned char)(data[15]) & 0xFF;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7bda      	ldrb	r2, [r3, #15]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	735a      	strb	r2, [r3, #13]
	obc2pm->channel_e = (unsigned char)(data[16]) & 0xFF;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7c1a      	ldrb	r2, [r3, #16]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	739a      	strb	r2, [r3, #14]
	obc2pm->channel_f = (unsigned char)(data[17]) & 0xFF;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7c5a      	ldrb	r2, [r3, #17]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	73da      	strb	r2, [r3, #15]
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <PMIC_CONFIG_SAT_POWER>:
void OBC_PMIC_USART3_Initialization(void)
{

}

void PMIC_CONFIG_SAT_POWER(Struct_OBC_2_PMIC* obc2pm){
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

	/* EN 3V3 1 ------------------------------------------------------------------*/
	if( (obc2pm->channel_0 & 0x01) == 0x01 )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <PMIC_CONFIG_SAT_POWER+0x20>
		LL_GPIO_SetOutputPin(EN_3V3_1_BUCK_PM_GPIO_Port, EN_3V3_1_BUCK_PM_Pin);
 8002844:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002848:	485a      	ldr	r0, [pc, #360]	@ (80029b4 <PMIC_CONFIG_SAT_POWER+0x184>)
 800284a:	f7ff fedc 	bl	8002606 <LL_GPIO_SetOutputPin>
 800284e:	e004      	b.n	800285a <PMIC_CONFIG_SAT_POWER+0x2a>
	else
		LL_GPIO_ResetOutputPin(EN_3V3_1_BUCK_PM_GPIO_Port, EN_3V3_1_BUCK_PM_Pin);
 8002850:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002854:	4857      	ldr	r0, [pc, #348]	@ (80029b4 <PMIC_CONFIG_SAT_POWER+0x184>)
 8002856:	f7ff fee4 	bl	8002622 <LL_GPIO_ResetOutputPin>
	if( (obc2pm->channel_1 & 0x01) == 0x01 )
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	785b      	ldrb	r3, [r3, #1]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <PMIC_CONFIG_SAT_POWER+0x4c>
	{
		LL_GPIO_SetOutputPin(EN_3V3_1_BUCK_PM_GPIO_Port, EN_3V3_1_BUCK_PM_Pin);
 8002866:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800286a:	4852      	ldr	r0, [pc, #328]	@ (80029b4 <PMIC_CONFIG_SAT_POWER+0x184>)
 800286c:	f7ff fecb 	bl	8002606 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(EN_3V3_1_PM_GPIO_Port, EN_3V3_1_PM_Pin);
 8002870:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002874:	4850      	ldr	r0, [pc, #320]	@ (80029b8 <PMIC_CONFIG_SAT_POWER+0x188>)
 8002876:	f7ff fec6 	bl	8002606 <LL_GPIO_SetOutputPin>
 800287a:	e004      	b.n	8002886 <PMIC_CONFIG_SAT_POWER+0x56>
	}
	else
		LL_GPIO_ResetOutputPin(EN_3V3_1_PM_GPIO_Port, EN_3V3_1_PM_Pin);
 800287c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002880:	484d      	ldr	r0, [pc, #308]	@ (80029b8 <PMIC_CONFIG_SAT_POWER+0x188>)
 8002882:	f7ff fece 	bl	8002622 <LL_GPIO_ResetOutputPin>


	/* EN 3V3 2 ------------------------------------------------------------------*/
	if( (obc2pm->channel_2 & 0x01) == 0x01 )
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	789b      	ldrb	r3, [r3, #2]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <PMIC_CONFIG_SAT_POWER+0x6e>
		LL_GPIO_SetOutputPin(EN_3V3_2_BUCK_PM_GPIO_Port, EN_3V3_2_BUCK_PM_Pin);
 8002892:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002896:	4848      	ldr	r0, [pc, #288]	@ (80029b8 <PMIC_CONFIG_SAT_POWER+0x188>)
 8002898:	f7ff feb5 	bl	8002606 <LL_GPIO_SetOutputPin>
 800289c:	e004      	b.n	80028a8 <PMIC_CONFIG_SAT_POWER+0x78>
	else
		LL_GPIO_ResetOutputPin(EN_3V3_2_BUCK_PM_GPIO_Port, EN_3V3_2_BUCK_PM_Pin);
 800289e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028a2:	4845      	ldr	r0, [pc, #276]	@ (80029b8 <PMIC_CONFIG_SAT_POWER+0x188>)
 80028a4:	f7ff febd 	bl	8002622 <LL_GPIO_ResetOutputPin>

	if( (obc2pm->channel_3 & 0x01) == 0x01 )
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	78db      	ldrb	r3, [r3, #3]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <PMIC_CONFIG_SAT_POWER+0x9a>
	{
		LL_GPIO_SetOutputPin(EN_3V3_2_BUCK_PM_GPIO_Port, EN_3V3_2_BUCK_PM_Pin);
 80028b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028b8:	483f      	ldr	r0, [pc, #252]	@ (80029b8 <PMIC_CONFIG_SAT_POWER+0x188>)
 80028ba:	f7ff fea4 	bl	8002606 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(EN_3V3_2_PM_GPIO_Port, EN_3V3_2_PM_Pin);
 80028be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80028c2:	483c      	ldr	r0, [pc, #240]	@ (80029b4 <PMIC_CONFIG_SAT_POWER+0x184>)
 80028c4:	f7ff fe9f 	bl	8002606 <LL_GPIO_SetOutputPin>
 80028c8:	e004      	b.n	80028d4 <PMIC_CONFIG_SAT_POWER+0xa4>
	}
	else
		LL_GPIO_ResetOutputPin(EN_3V3_2_PM_GPIO_Port, EN_3V3_2_PM_Pin);
 80028ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80028ce:	4839      	ldr	r0, [pc, #228]	@ (80029b4 <PMIC_CONFIG_SAT_POWER+0x184>)
 80028d0:	f7ff fea7 	bl	8002622 <LL_GPIO_ResetOutputPin>


	/* EN 5V0 --------------------------------------------------------------------*/
	if( (obc2pm->channel_4 & 0x01) == 0x01 )
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	791b      	ldrb	r3, [r3, #4]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d004      	beq.n	80028ea <PMIC_CONFIG_SAT_POWER+0xba>
		LL_GPIO_SetOutputPin(EN_5V_BOOST_PM_GPIO_Port, EN_5V_BOOST_PM_Pin);
 80028e0:	2104      	movs	r1, #4
 80028e2:	4836      	ldr	r0, [pc, #216]	@ (80029bc <PMIC_CONFIG_SAT_POWER+0x18c>)
 80028e4:	f7ff fe8f 	bl	8002606 <LL_GPIO_SetOutputPin>
 80028e8:	e003      	b.n	80028f2 <PMIC_CONFIG_SAT_POWER+0xc2>
	else
		LL_GPIO_ResetOutputPin(EN_5V_BOOST_PM_GPIO_Port, EN_5V_BOOST_PM_Pin);
 80028ea:	2104      	movs	r1, #4
 80028ec:	4833      	ldr	r0, [pc, #204]	@ (80029bc <PMIC_CONFIG_SAT_POWER+0x18c>)
 80028ee:	f7ff fe98 	bl	8002622 <LL_GPIO_ResetOutputPin>

	if( (obc2pm->channel_5 & 0x01) == 0x01 )
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	795b      	ldrb	r3, [r3, #5]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <PMIC_CONFIG_SAT_POWER+0xe0>
	{
		LL_GPIO_SetOutputPin(EN_5V_BOOST_PM_GPIO_Port, EN_5V_BOOST_PM_Pin);
 80028fe:	2104      	movs	r1, #4
 8002900:	482e      	ldr	r0, [pc, #184]	@ (80029bc <PMIC_CONFIG_SAT_POWER+0x18c>)
 8002902:	f7ff fe80 	bl	8002606 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(EN_5V_PM_GPIO_Port, EN_5V_PM_Pin);
 8002906:	2180      	movs	r1, #128	@ 0x80
 8002908:	482b      	ldr	r0, [pc, #172]	@ (80029b8 <PMIC_CONFIG_SAT_POWER+0x188>)
 800290a:	f7ff fe7c 	bl	8002606 <LL_GPIO_SetOutputPin>
 800290e:	e003      	b.n	8002918 <PMIC_CONFIG_SAT_POWER+0xe8>
	}
	else
		LL_GPIO_ResetOutputPin(EN_5V_PM_GPIO_Port, EN_5V_PM_Pin);
 8002910:	2180      	movs	r1, #128	@ 0x80
 8002912:	4829      	ldr	r0, [pc, #164]	@ (80029b8 <PMIC_CONFIG_SAT_POWER+0x188>)
 8002914:	f7ff fe85 	bl	8002622 <LL_GPIO_ResetOutputPin>


	/* EN UNREG 1 ----------------------------------------------------------------*/
	if( (obc2pm->channel_6 & 0x01) == 0x01 )
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	799b      	ldrb	r3, [r3, #6]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <PMIC_CONFIG_SAT_POWER+0x100>
		LL_GPIO_SetOutputPin(EN_UNREG1_PM_GPIO_Port, EN_UNREG1_PM_Pin);
 8002924:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002928:	4823      	ldr	r0, [pc, #140]	@ (80029b8 <PMIC_CONFIG_SAT_POWER+0x188>)
 800292a:	f7ff fe6c 	bl	8002606 <LL_GPIO_SetOutputPin>
 800292e:	e004      	b.n	800293a <PMIC_CONFIG_SAT_POWER+0x10a>
	else
		LL_GPIO_ResetOutputPin(EN_UNREG1_PM_GPIO_Port, EN_UNREG1_PM_Pin);
 8002930:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002934:	4820      	ldr	r0, [pc, #128]	@ (80029b8 <PMIC_CONFIG_SAT_POWER+0x188>)
 8002936:	f7ff fe74 	bl	8002622 <LL_GPIO_ResetOutputPin>

	/* EN UNREG 2 ----------------------------------------------------------------*/
	if( (obc2pm->channel_7 & 0x01) == 0x01 )
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	79db      	ldrb	r3, [r3, #7]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <PMIC_CONFIG_SAT_POWER+0x122>
		LL_GPIO_SetOutputPin(EN_UNREG2_PM_GPIO_Port, EN_UNREG2_PM_Pin);
 8002946:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800294a:	481b      	ldr	r0, [pc, #108]	@ (80029b8 <PMIC_CONFIG_SAT_POWER+0x188>)
 800294c:	f7ff fe5b 	bl	8002606 <LL_GPIO_SetOutputPin>
 8002950:	e004      	b.n	800295c <PMIC_CONFIG_SAT_POWER+0x12c>
	else
		LL_GPIO_ResetOutputPin(EN_UNREG2_PM_GPIO_Port, EN_UNREG2_PM_Pin);
 8002952:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002956:	4818      	ldr	r0, [pc, #96]	@ (80029b8 <PMIC_CONFIG_SAT_POWER+0x188>)
 8002958:	f7ff fe63 	bl	8002622 <LL_GPIO_ResetOutputPin>


	/* MCU OBC -------------------------------------------------------------------*/
	if( (obc2pm->channel_8 & 0x01) == 0x01 ){
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	7a1b      	ldrb	r3, [r3, #8]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <PMIC_CONFIG_SAT_POWER+0x144>
		LL_GPIO_SetOutputPin(EN_MCU_BUCK_PM_GPIO_Port, EN_MCU_BUCK_PM_Pin);
 8002968:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800296c:	4811      	ldr	r0, [pc, #68]	@ (80029b4 <PMIC_CONFIG_SAT_POWER+0x184>)
 800296e:	f7ff fe4a 	bl	8002606 <LL_GPIO_SetOutputPin>
 8002972:	e004      	b.n	800297e <PMIC_CONFIG_SAT_POWER+0x14e>
	}
	else
		LL_GPIO_ResetOutputPin(EN_MCU_BUCK_PM_GPIO_Port, EN_MCU_BUCK_PM_Pin);
 8002974:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002978:	480e      	ldr	r0, [pc, #56]	@ (80029b4 <PMIC_CONFIG_SAT_POWER+0x184>)
 800297a:	f7ff fe52 	bl	8002622 <LL_GPIO_ResetOutputPin>
	if( (obc2pm->channel_9 & 0x01) == 0x01 )
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7a5b      	ldrb	r3, [r3, #9]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <PMIC_CONFIG_SAT_POWER+0x170>
	{
		LL_GPIO_SetOutputPin(EN_MCU_BUCK_PM_GPIO_Port, EN_MCU_BUCK_PM_Pin);
 800298a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800298e:	4809      	ldr	r0, [pc, #36]	@ (80029b4 <PMIC_CONFIG_SAT_POWER+0x184>)
 8002990:	f7ff fe39 	bl	8002606 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(EN_MCU_3V3_PM_GPIO_Port, EN_MCU_3V3_PM_Pin);
 8002994:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002998:	4806      	ldr	r0, [pc, #24]	@ (80029b4 <PMIC_CONFIG_SAT_POWER+0x184>)
 800299a:	f7ff fe34 	bl	8002606 <LL_GPIO_SetOutputPin>
	}
	else{
		LL_GPIO_ResetOutputPin(EN_MCU_3V3_PM_GPIO_Port, EN_MCU_3V3_PM_Pin);
	}

}
 800299e:	e004      	b.n	80029aa <PMIC_CONFIG_SAT_POWER+0x17a>
		LL_GPIO_ResetOutputPin(EN_MCU_3V3_PM_GPIO_Port, EN_MCU_3V3_PM_Pin);
 80029a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029a4:	4803      	ldr	r0, [pc, #12]	@ (80029b4 <PMIC_CONFIG_SAT_POWER+0x184>)
 80029a6:	f7ff fe3c 	bl	8002622 <LL_GPIO_ResetOutputPin>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	48000c00 	.word	0x48000c00
 80029b8:	48001000 	.word	0x48001000
 80029bc:	48000400 	.word	0x48000400

080029c0 <SEND_DATA_UART>:


void SEND_DATA_UART(unsigned char* data, USART_TypeDef * USARTx, int len){
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]

	unsigned short crc = 0xFFFF;
 80029cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029d0:	83fb      	strh	r3, [r7, #30]

	for(int i=0;i<len;i++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]
 80029d6:	e00a      	b.n	80029ee <SEND_DATA_UART+0x2e>
	{
		crc = crc - data[i];
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4413      	add	r3, r2
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	8bfb      	ldrh	r3, [r7, #30]
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<len;i++)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	3301      	adds	r3, #1
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	dbf0      	blt.n	80029d8 <SEND_DATA_UART+0x18>
	}
	data[len-2]=(crc&0x00FF);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3b02      	subs	r3, #2
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4413      	add	r3, r2
 80029fe:	8bfa      	ldrh	r2, [r7, #30]
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	701a      	strb	r2, [r3, #0]
	data[len-1]=(crc >> 8);
 8002a04:	8bfb      	ldrh	r3, [r7, #30]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	b299      	uxth	r1, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4413      	add	r3, r2
 8002a12:	b2ca      	uxtb	r2, r1
 8002a14:	701a      	strb	r2, [r3, #0]

	for(int i=0;i<len;i++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e011      	b.n	8002a40 <SEND_DATA_UART+0x80>
	{
		while(!LL_USART_IsActiveFlag_TXE(USARTx));
 8002a1c:	bf00      	nop
 8002a1e:	68b8      	ldr	r0, [r7, #8]
 8002a20:	f7ff fdce 	bl	80025c0 <LL_USART_IsActiveFlag_TXE>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f9      	beq.n	8002a1e <SEND_DATA_UART+0x5e>
		LL_USART_TransmitData8(USARTx, data[i]);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4413      	add	r3, r2
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	4619      	mov	r1, r3
 8002a34:	68b8      	ldr	r0, [r7, #8]
 8002a36:	f7ff fdd6 	bl	80025e6 <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	dbe9      	blt.n	8002a1c <SEND_DATA_UART+0x5c>
	}

}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <LL_RCC_SetI2CClockSource>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	0e1a      	lsrs	r2, r3, #24
 8002a60:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <LL_RCC_SetI2CClockSource+0x4c>)
 8002a62:	4413      	add	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	2103      	movs	r1, #3
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	b2d9      	uxtb	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	0c1b      	lsrs	r3, r3, #16
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	601a      	str	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40021088 	.word	0x40021088

08002aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae8 <HAL_MspInit+0x44>)
 8002aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aae:	4a0e      	ldr	r2, [pc, #56]	@ (8002ae8 <HAL_MspInit+0x44>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae8 <HAL_MspInit+0x44>)
 8002ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	4b09      	ldr	r3, [pc, #36]	@ (8002ae8 <HAL_MspInit+0x44>)
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac6:	4a08      	ldr	r2, [pc, #32]	@ (8002ae8 <HAL_MspInit+0x44>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002acc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ace:	4b06      	ldr	r3, [pc, #24]	@ (8002ae8 <HAL_MspInit+0x44>)
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000

08002aec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	@ 0x30
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 031c 	add.w	r3, r7, #28
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a3d      	ldr	r2, [pc, #244]	@ (8002c00 <HAL_CAN_MspInit+0x114>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d131      	bne.n	8002b72 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c04 <HAL_CAN_MspInit+0x118>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3301      	adds	r3, #1
 8002b14:	4a3b      	ldr	r2, [pc, #236]	@ (8002c04 <HAL_CAN_MspInit+0x118>)
 8002b16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002b18:	4b3a      	ldr	r3, [pc, #232]	@ (8002c04 <HAL_CAN_MspInit+0x118>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10b      	bne.n	8002b38 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002b20:	4b39      	ldr	r3, [pc, #228]	@ (8002c08 <HAL_CAN_MspInit+0x11c>)
 8002b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b24:	4a38      	ldr	r2, [pc, #224]	@ (8002c08 <HAL_CAN_MspInit+0x11c>)
 8002b26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b2c:	4b36      	ldr	r3, [pc, #216]	@ (8002c08 <HAL_CAN_MspInit+0x11c>)
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b38:	4b33      	ldr	r3, [pc, #204]	@ (8002c08 <HAL_CAN_MspInit+0x11c>)
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3c:	4a32      	ldr	r2, [pc, #200]	@ (8002c08 <HAL_CAN_MspInit+0x11c>)
 8002b3e:	f043 0308 	orr.w	r3, r3, #8
 8002b42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b44:	4b30      	ldr	r3, [pc, #192]	@ (8002c08 <HAL_CAN_MspInit+0x11c>)
 8002b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b50:	2303      	movs	r3, #3
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002b60:	2309      	movs	r3, #9
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b64:	f107 031c 	add.w	r3, r7, #28
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4828      	ldr	r0, [pc, #160]	@ (8002c0c <HAL_CAN_MspInit+0x120>)
 8002b6c:	f000 fd14 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002b70:	e042      	b.n	8002bf8 <HAL_CAN_MspInit+0x10c>
  else if(hcan->Instance==CAN2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a26      	ldr	r2, [pc, #152]	@ (8002c10 <HAL_CAN_MspInit+0x124>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d13d      	bne.n	8002bf8 <HAL_CAN_MspInit+0x10c>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002b7c:	4b22      	ldr	r3, [pc, #136]	@ (8002c08 <HAL_CAN_MspInit+0x11c>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	4a21      	ldr	r2, [pc, #132]	@ (8002c08 <HAL_CAN_MspInit+0x11c>)
 8002b82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b88:	4b1f      	ldr	r3, [pc, #124]	@ (8002c08 <HAL_CAN_MspInit+0x11c>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002b94:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <HAL_CAN_MspInit+0x118>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002c04 <HAL_CAN_MspInit+0x118>)
 8002b9c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002b9e:	4b19      	ldr	r3, [pc, #100]	@ (8002c04 <HAL_CAN_MspInit+0x118>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d10b      	bne.n	8002bbe <HAL_CAN_MspInit+0xd2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002ba6:	4b18      	ldr	r3, [pc, #96]	@ (8002c08 <HAL_CAN_MspInit+0x11c>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002baa:	4a17      	ldr	r2, [pc, #92]	@ (8002c08 <HAL_CAN_MspInit+0x11c>)
 8002bac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bb2:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <HAL_CAN_MspInit+0x11c>)
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbe:	4b12      	ldr	r3, [pc, #72]	@ (8002c08 <HAL_CAN_MspInit+0x11c>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc2:	4a11      	ldr	r2, [pc, #68]	@ (8002c08 <HAL_CAN_MspInit+0x11c>)
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bca:	4b0f      	ldr	r3, [pc, #60]	@ (8002c08 <HAL_CAN_MspInit+0x11c>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002bd6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN2;
 8002be8:	230a      	movs	r3, #10
 8002bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bec:	f107 031c 	add.w	r3, r7, #28
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4808      	ldr	r0, [pc, #32]	@ (8002c14 <HAL_CAN_MspInit+0x128>)
 8002bf4:	f000 fcd0 	bl	8003598 <HAL_GPIO_Init>
}
 8002bf8:	bf00      	nop
 8002bfa:	3730      	adds	r7, #48	@ 0x30
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40006400 	.word	0x40006400
 8002c04:	20000190 	.word	0x20000190
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	48000c00 	.word	0x48000c00
 8002c10:	40006800 	.word	0x40006800
 8002c14:	48000400 	.word	0x48000400

08002c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	@ 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a19      	ldr	r2, [pc, #100]	@ (8002c9c <HAL_I2C_MspInit+0x84>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d12c      	bne.n	8002c94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
    LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8002c3a:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8002c3e:	f7ff ff09 	bl	8002a54 <LL_RCC_SetI2CClockSource>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c42:	4b17      	ldr	r3, [pc, #92]	@ (8002ca0 <HAL_I2C_MspInit+0x88>)
 8002c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c46:	4a16      	ldr	r2, [pc, #88]	@ (8002ca0 <HAL_I2C_MspInit+0x88>)
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c4e:	4b14      	ldr	r3, [pc, #80]	@ (8002ca0 <HAL_I2C_MspInit+0x88>)
 8002c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002c5a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c60:	2312      	movs	r3, #18
 8002c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	4619      	mov	r1, r3
 8002c76:	480b      	ldr	r0, [pc, #44]	@ (8002ca4 <HAL_I2C_MspInit+0x8c>)
 8002c78:	f000 fc8e 	bl	8003598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <HAL_I2C_MspInit+0x88>)
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c80:	4a07      	ldr	r2, [pc, #28]	@ (8002ca0 <HAL_I2C_MspInit+0x88>)
 8002c82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c86:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <HAL_I2C_MspInit+0x88>)
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002c94:	bf00      	nop
 8002c96:	3728      	adds	r7, #40	@ 0x28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40005400 	.word	0x40005400
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	48000400 	.word	0x48000400

08002ca8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	@ 0x28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a17      	ldr	r2, [pc, #92]	@ (8002d24 <HAL_QSPI_MspInit+0x7c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d128      	bne.n	8002d1c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002cca:	4b17      	ldr	r3, [pc, #92]	@ (8002d28 <HAL_QSPI_MspInit+0x80>)
 8002ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cce:	4a16      	ldr	r2, [pc, #88]	@ (8002d28 <HAL_QSPI_MspInit+0x80>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd4:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cd6:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <HAL_QSPI_MspInit+0x80>)
 8002cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ce2:	4b11      	ldr	r3, [pc, #68]	@ (8002d28 <HAL_QSPI_MspInit+0x80>)
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce6:	4a10      	ldr	r2, [pc, #64]	@ (8002d28 <HAL_QSPI_MspInit+0x80>)
 8002ce8:	f043 0310 	orr.w	r3, r3, #16
 8002cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cee:	4b0e      	ldr	r3, [pc, #56]	@ (8002d28 <HAL_QSPI_MspInit+0x80>)
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
    PE10     ------> QUADSPI_CLK
    PE11     ------> QUADSPI_BK1_NCS
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002cfa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d00:	2302      	movs	r3, #2
 8002d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002d0c:	230a      	movs	r3, #10
 8002d0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	4619      	mov	r1, r3
 8002d16:	4805      	ldr	r0, [pc, #20]	@ (8002d2c <HAL_QSPI_MspInit+0x84>)
 8002d18:	f000 fc3e 	bl	8003598 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002d1c:	bf00      	nop
 8002d1e:	3728      	adds	r7, #40	@ 0x28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	a0001000 	.word	0xa0001000
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	48001000 	.word	0x48001000

08002d30 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d101      	bne.n	8002d48 <LL_DMA_IsActiveFlag_TC1+0x18>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <LL_DMA_IsActiveFlag_TC1+0x1a>
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2202      	movs	r2, #2
 8002d62:	605a      	str	r2, [r3, #4]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_DMA_ClearFlag_TC3>:
  * @rmtoll IFCR         CTCIF3        LL_DMA_ClearFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d7e:	605a      	str	r2, [r3, #4]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <LL_USART_IsActiveFlag_RXNE>:
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d101      	bne.n	8002da4 <LL_USART_IsActiveFlag_RXNE+0x18>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_USART_ReceiveData8>:
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	b2db      	uxtb	r3, r3
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dd2:	bf00      	nop
 8002dd4:	e7fd      	b.n	8002dd2 <NMI_Handler+0x4>

08002dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dda:	bf00      	nop
 8002ddc:	e7fd      	b.n	8002dda <HardFault_Handler+0x4>

08002dde <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de2:	bf00      	nop
 8002de4:	e7fd      	b.n	8002de2 <MemManage_Handler+0x4>

08002de6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dea:	bf00      	nop
 8002dec:	e7fd      	b.n	8002dea <BusFault_Handler+0x4>

08002dee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df2:	bf00      	nop
 8002df4:	e7fd      	b.n	8002df2 <UsageFault_Handler+0x4>

08002df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e24:	f000 f9b6 	bl	8003194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	 if ( LL_DMA_IsActiveFlag_TC1(DMA1) )
 8002e30:	4806      	ldr	r0, [pc, #24]	@ (8002e4c <DMA1_Channel1_IRQHandler+0x20>)
 8002e32:	f7ff ff7d 	bl	8002d30 <LL_DMA_IsActiveFlag_TC1>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <DMA1_Channel1_IRQHandler+0x1c>
	  {
	    flagDMATC1 =  1 ;
 8002e3c:	4b04      	ldr	r3, [pc, #16]	@ (8002e50 <DMA1_Channel1_IRQHandler+0x24>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
	    LL_DMA_ClearFlag_TC1( DMA1 ) ;
 8002e42:	4802      	ldr	r0, [pc, #8]	@ (8002e4c <DMA1_Channel1_IRQHandler+0x20>)
 8002e44:	f7ff ff87 	bl	8002d56 <LL_DMA_ClearFlag_TC1>

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40020000 	.word	0x40020000
 8002e50:	20000118 	.word	0x20000118

08002e54 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	 if ( LL_DMA_IsActiveFlag_TC1(DMA1) )
 8002e58:	4806      	ldr	r0, [pc, #24]	@ (8002e74 <DMA1_Channel3_IRQHandler+0x20>)
 8002e5a:	f7ff ff69 	bl	8002d30 <LL_DMA_IsActiveFlag_TC1>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <DMA1_Channel3_IRQHandler+0x1c>
	  {
	    flagDMATC3 =  1 ;
 8002e64:	4b04      	ldr	r3, [pc, #16]	@ (8002e78 <DMA1_Channel3_IRQHandler+0x24>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
	    LL_DMA_ClearFlag_TC3( DMA1 ) ;
 8002e6a:	4802      	ldr	r0, [pc, #8]	@ (8002e74 <DMA1_Channel3_IRQHandler+0x20>)
 8002e6c:	f7ff ff80 	bl	8002d70 <LL_DMA_ClearFlag_TC3>

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002e70:	bf00      	nop
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40020000 	.word	0x40020000
 8002e78:	20000119 	.word	0x20000119

08002e7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	/*--------------------------------------------------------------------------------------------*/
	/* DEBUG -------------------------------------------------------------------------------------*/
	/*--------------------------------------------------------------------------------------------*/
	if(LL_USART_IsActiveFlag_RXNE(USART1))
 8002e80:	4808      	ldr	r0, [pc, #32]	@ (8002ea4 <USART1_IRQHandler+0x28>)
 8002e82:	f7ff ff83 	bl	8002d8c <LL_USART_IsActiveFlag_RXNE>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d009      	beq.n	8002ea0 <USART1_IRQHandler+0x24>
	{
		usart1_rx_data = LL_USART_ReceiveData8(USART1);
 8002e8c:	4805      	ldr	r0, [pc, #20]	@ (8002ea4 <USART1_IRQHandler+0x28>)
 8002e8e:	f7ff ff90 	bl	8002db2 <LL_USART_ReceiveData8>
 8002e92:	4603      	mov	r3, r0
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b04      	ldr	r3, [pc, #16]	@ (8002ea8 <USART1_IRQHandler+0x2c>)
 8002e98:	701a      	strb	r2, [r3, #0]
		usart1_rx_flag = 1;
 8002e9a:	4b04      	ldr	r3, [pc, #16]	@ (8002eac <USART1_IRQHandler+0x30>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40013800 	.word	0x40013800
 8002ea8:	20000195 	.word	0x20000195
 8002eac:	20000194 	.word	0x20000194

08002eb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
	/*--------------------------------------------------------------------------------------------*/
	/* SRIC_2_PMIC -------------------------------------------------------------------------------*/
	/*--------------------------------------------------------------------------------------------*/
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(USART3))
 8002eb4:	482d      	ldr	r0, [pc, #180]	@ (8002f6c <USART2_IRQHandler+0xbc>)
 8002eb6:	f7ff ff69 	bl	8002d8c <LL_USART_IsActiveFlag_RXNE>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d053      	beq.n	8002f68 <USART2_IRQHandler+0xb8>
	{
		usart3_rx_data = LL_USART_ReceiveData8(USART2);
 8002ec0:	482b      	ldr	r0, [pc, #172]	@ (8002f70 <USART2_IRQHandler+0xc0>)
 8002ec2:	f7ff ff76 	bl	8002db2 <LL_USART_ReceiveData8>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4b2a      	ldr	r3, [pc, #168]	@ (8002f74 <USART2_IRQHandler+0xc4>)
 8002ecc:	701a      	strb	r2, [r3, #0]
		usart3_rx_flag = 1;
 8002ece:	4b2a      	ldr	r3, [pc, #168]	@ (8002f78 <USART2_IRQHandler+0xc8>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]

//		while(!LL_USART_IsActiveFlag_TXE(USART1));
//		LL_USART_TransmitData8(USART1, usart3_rx_data);		// Transmit TO PC

		switch(cnt)
 8002ed4:	4b29      	ldr	r3, [pc, #164]	@ (8002f7c <USART2_IRQHandler+0xcc>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b13      	cmp	r3, #19
 8002eda:	d02a      	beq.n	8002f32 <USART2_IRQHandler+0x82>
 8002edc:	2b13      	cmp	r3, #19
 8002ede:	dc36      	bgt.n	8002f4e <USART2_IRQHandler+0x9e>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d002      	beq.n	8002eea <USART2_IRQHandler+0x3a>
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d010      	beq.n	8002f0a <USART2_IRQHandler+0x5a>
 8002ee8:	e031      	b.n	8002f4e <USART2_IRQHandler+0x9e>
		{
		case 0 :	if(usart2_rx_data == SRIC_2_PMIC_HEADER)
 8002eea:	4b25      	ldr	r3, [pc, #148]	@ (8002f80 <USART2_IRQHandler+0xd0>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b0f      	cmp	r3, #15
 8002ef0:	d139      	bne.n	8002f66 <USART2_IRQHandler+0xb6>
					{obc_2_pmic_rx_buffer[cnt++] = usart2_rx_data;}			break;
 8002ef2:	4b22      	ldr	r3, [pc, #136]	@ (8002f7c <USART2_IRQHandler+0xcc>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	b2d1      	uxtb	r1, r2
 8002efa:	4a20      	ldr	r2, [pc, #128]	@ (8002f7c <USART2_IRQHandler+0xcc>)
 8002efc:	7011      	strb	r1, [r2, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	4b1f      	ldr	r3, [pc, #124]	@ (8002f80 <USART2_IRQHandler+0xd0>)
 8002f02:	7819      	ldrb	r1, [r3, #0]
 8002f04:	4b1f      	ldr	r3, [pc, #124]	@ (8002f84 <USART2_IRQHandler+0xd4>)
 8002f06:	5499      	strb	r1, [r3, r2]
 8002f08:	e02d      	b.n	8002f66 <USART2_IRQHandler+0xb6>

		case 1 :	if(usart2_rx_data == SRIC_2_PMIC_COMMAND)
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f80 <USART2_IRQHandler+0xd0>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b0f      	cmp	r3, #15
 8002f10:	d10b      	bne.n	8002f2a <USART2_IRQHandler+0x7a>
					{obc_2_pmic_rx_buffer[cnt++] = usart2_rx_data;}
 8002f12:	4b1a      	ldr	r3, [pc, #104]	@ (8002f7c <USART2_IRQHandler+0xcc>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	b2d1      	uxtb	r1, r2
 8002f1a:	4a18      	ldr	r2, [pc, #96]	@ (8002f7c <USART2_IRQHandler+0xcc>)
 8002f1c:	7011      	strb	r1, [r2, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b17      	ldr	r3, [pc, #92]	@ (8002f80 <USART2_IRQHandler+0xd0>)
 8002f22:	7819      	ldrb	r1, [r3, #0]
 8002f24:	4b17      	ldr	r3, [pc, #92]	@ (8002f84 <USART2_IRQHandler+0xd4>)
 8002f26:	5499      	strb	r1, [r3, r2]
					else {cnt = 0;}												break;
 8002f28:	e01e      	b.n	8002f68 <USART2_IRQHandler+0xb8>
 8002f2a:	4b14      	ldr	r3, [pc, #80]	@ (8002f7c <USART2_IRQHandler+0xcc>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e01a      	b.n	8002f68 <USART2_IRQHandler+0xb8>

		case 19:	obc_2_pmic_rx_buffer[cnt]    = usart2_rx_data;
 8002f32:	4b12      	ldr	r3, [pc, #72]	@ (8002f7c <USART2_IRQHandler+0xcc>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b11      	ldr	r3, [pc, #68]	@ (8002f80 <USART2_IRQHandler+0xd0>)
 8002f3a:	7819      	ldrb	r1, [r3, #0]
 8002f3c:	4b11      	ldr	r3, [pc, #68]	@ (8002f84 <USART2_IRQHandler+0xd4>)
 8002f3e:	5499      	strb	r1, [r3, r2]
					cnt=0;
 8002f40:	4b0e      	ldr	r3, [pc, #56]	@ (8002f7c <USART2_IRQHandler+0xcc>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
					obc_2_pmic_rx_complete_flag  = 1;							break;
 8002f46:	4b10      	ldr	r3, [pc, #64]	@ (8002f88 <USART2_IRQHandler+0xd8>)
 8002f48:	2201      	movs	r2, #1
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	e00c      	b.n	8002f68 <USART2_IRQHandler+0xb8>

		default:	obc_2_pmic_rx_buffer[cnt++]  = usart2_rx_data;			break;
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f7c <USART2_IRQHandler+0xcc>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	b2d1      	uxtb	r1, r2
 8002f56:	4a09      	ldr	r2, [pc, #36]	@ (8002f7c <USART2_IRQHandler+0xcc>)
 8002f58:	7011      	strb	r1, [r2, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4b08      	ldr	r3, [pc, #32]	@ (8002f80 <USART2_IRQHandler+0xd0>)
 8002f5e:	7819      	ldrb	r1, [r3, #0]
 8002f60:	4b08      	ldr	r3, [pc, #32]	@ (8002f84 <USART2_IRQHandler+0xd4>)
 8002f62:	5499      	strb	r1, [r3, r2]
 8002f64:	e000      	b.n	8002f68 <USART2_IRQHandler+0xb8>
					{obc_2_pmic_rx_buffer[cnt++] = usart2_rx_data;}			break;
 8002f66:	bf00      	nop

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40004800 	.word	0x40004800
 8002f70:	40004400 	.word	0x40004400
 8002f74:	20000199 	.word	0x20000199
 8002f78:	20000198 	.word	0x20000198
 8002f7c:	200001c9 	.word	0x200001c9
 8002f80:	20000197 	.word	0x20000197
 8002f84:	200001b4 	.word	0x200001b4
 8002f88:	200001c8 	.word	0x200001c8

08002f8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
	/*--------------------------------------------------------------------------------------------*/
	/* OBC_2_PMIC -------------------------------------------------------------------------------*/
	/*--------------------------------------------------------------------------------------------*/
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8002f90:	482d      	ldr	r0, [pc, #180]	@ (8003048 <USART3_IRQHandler+0xbc>)
 8002f92:	f7ff fefb 	bl	8002d8c <LL_USART_IsActiveFlag_RXNE>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d053      	beq.n	8003044 <USART3_IRQHandler+0xb8>
	{
		usart2_rx_data = LL_USART_ReceiveData8(USART3);
 8002f9c:	482b      	ldr	r0, [pc, #172]	@ (800304c <USART3_IRQHandler+0xc0>)
 8002f9e:	f7ff ff08 	bl	8002db2 <LL_USART_ReceiveData8>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8003050 <USART3_IRQHandler+0xc4>)
 8002fa8:	701a      	strb	r2, [r3, #0]
		usart2_rx_flag = 1;
 8002faa:	4b2a      	ldr	r3, [pc, #168]	@ (8003054 <USART3_IRQHandler+0xc8>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	701a      	strb	r2, [r3, #0]

//		while(!LL_USART_IsActiveFlag_TXE(USART1));
//		LL_USART_TransmitData8(USART1, usart2_rx_data);		// Transmit TO PC

		switch(cnt)
 8002fb0:	4b29      	ldr	r3, [pc, #164]	@ (8003058 <USART3_IRQHandler+0xcc>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b13      	cmp	r3, #19
 8002fb6:	d02a      	beq.n	800300e <USART3_IRQHandler+0x82>
 8002fb8:	2b13      	cmp	r3, #19
 8002fba:	dc36      	bgt.n	800302a <USART3_IRQHandler+0x9e>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <USART3_IRQHandler+0x3a>
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d010      	beq.n	8002fe6 <USART3_IRQHandler+0x5a>
 8002fc4:	e031      	b.n	800302a <USART3_IRQHandler+0x9e>
		{
		case 0 :	if(usart2_rx_data == OBC_2_PMIC_HEADER)
 8002fc6:	4b22      	ldr	r3, [pc, #136]	@ (8003050 <USART3_IRQHandler+0xc4>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b0f      	cmp	r3, #15
 8002fcc:	d139      	bne.n	8003042 <USART3_IRQHandler+0xb6>
					{sric_2_pmic_rx_buffer[cnt++] = usart2_rx_data;}			break;
 8002fce:	4b22      	ldr	r3, [pc, #136]	@ (8003058 <USART3_IRQHandler+0xcc>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	b2d1      	uxtb	r1, r2
 8002fd6:	4a20      	ldr	r2, [pc, #128]	@ (8003058 <USART3_IRQHandler+0xcc>)
 8002fd8:	7011      	strb	r1, [r2, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8003050 <USART3_IRQHandler+0xc4>)
 8002fde:	7819      	ldrb	r1, [r3, #0]
 8002fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800305c <USART3_IRQHandler+0xd0>)
 8002fe2:	5499      	strb	r1, [r3, r2]
 8002fe4:	e02d      	b.n	8003042 <USART3_IRQHandler+0xb6>

		case 1 :	if(usart2_rx_data == OBC_2_PMIC_COMMAND)
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8003050 <USART3_IRQHandler+0xc4>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b0f      	cmp	r3, #15
 8002fec:	d10b      	bne.n	8003006 <USART3_IRQHandler+0x7a>
					{sric_2_pmic_rx_buffer[cnt++] = usart2_rx_data;}
 8002fee:	4b1a      	ldr	r3, [pc, #104]	@ (8003058 <USART3_IRQHandler+0xcc>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	b2d1      	uxtb	r1, r2
 8002ff6:	4a18      	ldr	r2, [pc, #96]	@ (8003058 <USART3_IRQHandler+0xcc>)
 8002ff8:	7011      	strb	r1, [r2, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b14      	ldr	r3, [pc, #80]	@ (8003050 <USART3_IRQHandler+0xc4>)
 8002ffe:	7819      	ldrb	r1, [r3, #0]
 8003000:	4b16      	ldr	r3, [pc, #88]	@ (800305c <USART3_IRQHandler+0xd0>)
 8003002:	5499      	strb	r1, [r3, r2]
					else {cnt = 0;}												break;
 8003004:	e01e      	b.n	8003044 <USART3_IRQHandler+0xb8>
 8003006:	4b14      	ldr	r3, [pc, #80]	@ (8003058 <USART3_IRQHandler+0xcc>)
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
 800300c:	e01a      	b.n	8003044 <USART3_IRQHandler+0xb8>

		case 19:	sric_2_pmic_rx_buffer[cnt]    = usart2_rx_data;
 800300e:	4b12      	ldr	r3, [pc, #72]	@ (8003058 <USART3_IRQHandler+0xcc>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	4b0e      	ldr	r3, [pc, #56]	@ (8003050 <USART3_IRQHandler+0xc4>)
 8003016:	7819      	ldrb	r1, [r3, #0]
 8003018:	4b10      	ldr	r3, [pc, #64]	@ (800305c <USART3_IRQHandler+0xd0>)
 800301a:	5499      	strb	r1, [r3, r2]
					cnt=0;
 800301c:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <USART3_IRQHandler+0xcc>)
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]
					sric_2_pmic_rx_complete_flag  = 1;							break;
 8003022:	4b0f      	ldr	r3, [pc, #60]	@ (8003060 <USART3_IRQHandler+0xd4>)
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e00c      	b.n	8003044 <USART3_IRQHandler+0xb8>

		default:	sric_2_pmic_rx_buffer[cnt++]  = usart2_rx_data;				break;
 800302a:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <USART3_IRQHandler+0xcc>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	b2d1      	uxtb	r1, r2
 8003032:	4a09      	ldr	r2, [pc, #36]	@ (8003058 <USART3_IRQHandler+0xcc>)
 8003034:	7011      	strb	r1, [r2, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <USART3_IRQHandler+0xc4>)
 800303a:	7819      	ldrb	r1, [r3, #0]
 800303c:	4b07      	ldr	r3, [pc, #28]	@ (800305c <USART3_IRQHandler+0xd0>)
 800303e:	5499      	strb	r1, [r3, r2]
 8003040:	e000      	b.n	8003044 <USART3_IRQHandler+0xb8>
					{sric_2_pmic_rx_buffer[cnt++] = usart2_rx_data;}			break;
 8003042:	bf00      	nop

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003044:	bf00      	nop
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40004400 	.word	0x40004400
 800304c:	40004800 	.word	0x40004800
 8003050:	20000197 	.word	0x20000197
 8003054:	20000196 	.word	0x20000196
 8003058:	200001ca 	.word	0x200001ca
 800305c:	2000019c 	.word	0x2000019c
 8003060:	200001b0 	.word	0x200001b0

08003064 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003078:	4b06      	ldr	r3, [pc, #24]	@ (8003094 <SystemInit+0x20>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	4a05      	ldr	r2, [pc, #20]	@ (8003094 <SystemInit+0x20>)
 8003080:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003088:	bf00      	nop
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003098:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800309c:	f7ff ffea 	bl	8003074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030a0:	480c      	ldr	r0, [pc, #48]	@ (80030d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80030a2:	490d      	ldr	r1, [pc, #52]	@ (80030d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030a4:	4a0d      	ldr	r2, [pc, #52]	@ (80030dc <LoopForever+0xe>)
  movs r3, #0
 80030a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030a8:	e002      	b.n	80030b0 <LoopCopyDataInit>

080030aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ae:	3304      	adds	r3, #4

080030b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030b4:	d3f9      	bcc.n	80030aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030b6:	4a0a      	ldr	r2, [pc, #40]	@ (80030e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030b8:	4c0a      	ldr	r4, [pc, #40]	@ (80030e4 <LoopForever+0x16>)
  movs r3, #0
 80030ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030bc:	e001      	b.n	80030c2 <LoopFillZerobss>

080030be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030c0:	3204      	adds	r2, #4

080030c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030c4:	d3fb      	bcc.n	80030be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030c6:	f002 fb0f 	bl	80056e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030ca:	f7fe f8db 	bl	8001284 <main>

080030ce <LoopForever>:

LoopForever:
    b LoopForever
 80030ce:	e7fe      	b.n	80030ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030d0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80030d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80030dc:	080057b8 	.word	0x080057b8
  ldr r2, =_sbss
 80030e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80030e4:	200001d0 	.word	0x200001d0

080030e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030e8:	e7fe      	b.n	80030e8 <ADC1_2_IRQHandler>

080030ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030f4:	2003      	movs	r0, #3
 80030f6:	f000 fa1b 	bl	8003530 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030fa:	200f      	movs	r0, #15
 80030fc:	f000 f80e 	bl	800311c <HAL_InitTick>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	71fb      	strb	r3, [r7, #7]
 800310a:	e001      	b.n	8003110 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800310c:	f7ff fcca 	bl	8002aa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003110:	79fb      	ldrb	r3, [r7, #7]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003128:	4b17      	ldr	r3, [pc, #92]	@ (8003188 <HAL_InitTick+0x6c>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d023      	beq.n	8003178 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003130:	4b16      	ldr	r3, [pc, #88]	@ (800318c <HAL_InitTick+0x70>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b14      	ldr	r3, [pc, #80]	@ (8003188 <HAL_InitTick+0x6c>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	4619      	mov	r1, r3
 800313a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800313e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003142:	fbb2 f3f3 	udiv	r3, r2, r3
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fa19 	bl	800357e <HAL_SYSTICK_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b0f      	cmp	r3, #15
 8003156:	d809      	bhi.n	800316c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003158:	2200      	movs	r2, #0
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	f000 f9f1 	bl	8003546 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003164:	4a0a      	ldr	r2, [pc, #40]	@ (8003190 <HAL_InitTick+0x74>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	e007      	b.n	800317c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
 8003170:	e004      	b.n	800317c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]
 8003176:	e001      	b.n	800317c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000008 	.word	0x20000008
 800318c:	20000000 	.word	0x20000000
 8003190:	20000004 	.word	0x20000004

08003194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003198:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <HAL_IncTick+0x20>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <HAL_IncTick+0x24>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	4a04      	ldr	r2, [pc, #16]	@ (80031b8 <HAL_IncTick+0x24>)
 80031a6:	6013      	str	r3, [r2, #0]
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000008 	.word	0x20000008
 80031b8:	200001cc 	.word	0x200001cc

080031bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return uwTick;
 80031c0:	4b03      	ldr	r3, [pc, #12]	@ (80031d0 <HAL_GetTick+0x14>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	200001cc 	.word	0x200001cc

080031d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e0ed      	b.n	80033c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d102      	bne.n	80031f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff fc7a 	bl	8002aec <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003208:	f7ff ffd8 	bl	80031bc <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800320e:	e012      	b.n	8003236 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003210:	f7ff ffd4 	bl	80031bc <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b0a      	cmp	r3, #10
 800321c:	d90b      	bls.n	8003236 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2205      	movs	r2, #5
 800322e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0c5      	b.n	80033c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0e5      	beq.n	8003210 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0202 	bic.w	r2, r2, #2
 8003252:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003254:	f7ff ffb2 	bl	80031bc <HAL_GetTick>
 8003258:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800325a:	e012      	b.n	8003282 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800325c:	f7ff ffae 	bl	80031bc <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b0a      	cmp	r3, #10
 8003268:	d90b      	bls.n	8003282 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2205      	movs	r2, #5
 800327a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e09f      	b.n	80033c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e5      	bne.n	800325c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	7e1b      	ldrb	r3, [r3, #24]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d108      	bne.n	80032aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	e007      	b.n	80032ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7e5b      	ldrb	r3, [r3, #25]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d108      	bne.n	80032d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e007      	b.n	80032e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	7e9b      	ldrb	r3, [r3, #26]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d108      	bne.n	80032fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0220 	orr.w	r2, r2, #32
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	e007      	b.n	800330e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0220 	bic.w	r2, r2, #32
 800330c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	7edb      	ldrb	r3, [r3, #27]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d108      	bne.n	8003328 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0210 	bic.w	r2, r2, #16
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	e007      	b.n	8003338 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0210 	orr.w	r2, r2, #16
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	7f1b      	ldrb	r3, [r3, #28]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d108      	bne.n	8003352 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0208 	orr.w	r2, r2, #8
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e007      	b.n	8003362 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0208 	bic.w	r2, r2, #8
 8003360:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7f5b      	ldrb	r3, [r3, #29]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d108      	bne.n	800337c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f042 0204 	orr.w	r2, r2, #4
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e007      	b.n	800338c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0204 	bic.w	r2, r2, #4
 800338a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	ea42 0103 	orr.w	r1, r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	1e5a      	subs	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <__NVIC_SetPriorityGrouping>:
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003410 <__NVIC_SetPriorityGrouping+0x44>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033e8:	4013      	ands	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033fe:	4a04      	ldr	r2, [pc, #16]	@ (8003410 <__NVIC_SetPriorityGrouping+0x44>)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	60d3      	str	r3, [r2, #12]
}
 8003404:	bf00      	nop
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <__NVIC_GetPriorityGrouping>:
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003418:	4b04      	ldr	r3, [pc, #16]	@ (800342c <__NVIC_GetPriorityGrouping+0x18>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	0a1b      	lsrs	r3, r3, #8
 800341e:	f003 0307 	and.w	r3, r3, #7
}
 8003422:	4618      	mov	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <__NVIC_SetPriority>:
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	6039      	str	r1, [r7, #0]
 800343a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003440:	2b00      	cmp	r3, #0
 8003442:	db0a      	blt.n	800345a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	b2da      	uxtb	r2, r3
 8003448:	490c      	ldr	r1, [pc, #48]	@ (800347c <__NVIC_SetPriority+0x4c>)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	0112      	lsls	r2, r2, #4
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	440b      	add	r3, r1
 8003454:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003458:	e00a      	b.n	8003470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	4908      	ldr	r1, [pc, #32]	@ (8003480 <__NVIC_SetPriority+0x50>)
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	3b04      	subs	r3, #4
 8003468:	0112      	lsls	r2, r2, #4
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	440b      	add	r3, r1
 800346e:	761a      	strb	r2, [r3, #24]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000e100 	.word	0xe000e100
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <NVIC_EncodePriority>:
{
 8003484:	b480      	push	{r7}
 8003486:	b089      	sub	sp, #36	@ 0x24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f1c3 0307 	rsb	r3, r3, #7
 800349e:	2b04      	cmp	r3, #4
 80034a0:	bf28      	it	cs
 80034a2:	2304      	movcs	r3, #4
 80034a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3304      	adds	r3, #4
 80034aa:	2b06      	cmp	r3, #6
 80034ac:	d902      	bls.n	80034b4 <NVIC_EncodePriority+0x30>
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3b03      	subs	r3, #3
 80034b2:	e000      	b.n	80034b6 <NVIC_EncodePriority+0x32>
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b8:	f04f 32ff 	mov.w	r2, #4294967295
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43da      	mvns	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	401a      	ands	r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034cc:	f04f 31ff 	mov.w	r1, #4294967295
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	43d9      	mvns	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034dc:	4313      	orrs	r3, r2
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3724      	adds	r7, #36	@ 0x24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034fc:	d301      	bcc.n	8003502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034fe:	2301      	movs	r3, #1
 8003500:	e00f      	b.n	8003522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003502:	4a0a      	ldr	r2, [pc, #40]	@ (800352c <SysTick_Config+0x40>)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3b01      	subs	r3, #1
 8003508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800350a:	210f      	movs	r1, #15
 800350c:	f04f 30ff 	mov.w	r0, #4294967295
 8003510:	f7ff ff8e 	bl	8003430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003514:	4b05      	ldr	r3, [pc, #20]	@ (800352c <SysTick_Config+0x40>)
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800351a:	4b04      	ldr	r3, [pc, #16]	@ (800352c <SysTick_Config+0x40>)
 800351c:	2207      	movs	r2, #7
 800351e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	e000e010 	.word	0xe000e010

08003530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff ff47 	bl	80033cc <__NVIC_SetPriorityGrouping>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b086      	sub	sp, #24
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003558:	f7ff ff5c 	bl	8003414 <__NVIC_GetPriorityGrouping>
 800355c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	6978      	ldr	r0, [r7, #20]
 8003564:	f7ff ff8e 	bl	8003484 <NVIC_EncodePriority>
 8003568:	4602      	mov	r2, r0
 800356a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff5d 	bl	8003430 <__NVIC_SetPriority>
}
 8003576:	bf00      	nop
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ffb0 	bl	80034ec <SysTick_Config>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a6:	e166      	b.n	8003876 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2101      	movs	r1, #1
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	fa01 f303 	lsl.w	r3, r1, r3
 80035b4:	4013      	ands	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8158 	beq.w	8003870 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d005      	beq.n	80035d8 <HAL_GPIO_Init+0x40>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d130      	bne.n	800363a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	2203      	movs	r2, #3
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800360e:	2201      	movs	r2, #1
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 0201 	and.w	r2, r3, #1
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b03      	cmp	r3, #3
 8003644:	d017      	beq.n	8003676 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	2203      	movs	r2, #3
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	43db      	mvns	r3, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d123      	bne.n	80036ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	08da      	lsrs	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3208      	adds	r2, #8
 800368a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	220f      	movs	r2, #15
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4013      	ands	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	08da      	lsrs	r2, r3, #3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3208      	adds	r2, #8
 80036c4:	6939      	ldr	r1, [r7, #16]
 80036c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	2203      	movs	r2, #3
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 0203 	and.w	r2, r3, #3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80b2 	beq.w	8003870 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370c:	4b61      	ldr	r3, [pc, #388]	@ (8003894 <HAL_GPIO_Init+0x2fc>)
 800370e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003710:	4a60      	ldr	r2, [pc, #384]	@ (8003894 <HAL_GPIO_Init+0x2fc>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6613      	str	r3, [r2, #96]	@ 0x60
 8003718:	4b5e      	ldr	r3, [pc, #376]	@ (8003894 <HAL_GPIO_Init+0x2fc>)
 800371a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003724:	4a5c      	ldr	r2, [pc, #368]	@ (8003898 <HAL_GPIO_Init+0x300>)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	089b      	lsrs	r3, r3, #2
 800372a:	3302      	adds	r3, #2
 800372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	220f      	movs	r2, #15
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800374e:	d02b      	beq.n	80037a8 <HAL_GPIO_Init+0x210>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a52      	ldr	r2, [pc, #328]	@ (800389c <HAL_GPIO_Init+0x304>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d025      	beq.n	80037a4 <HAL_GPIO_Init+0x20c>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a51      	ldr	r2, [pc, #324]	@ (80038a0 <HAL_GPIO_Init+0x308>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d01f      	beq.n	80037a0 <HAL_GPIO_Init+0x208>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a50      	ldr	r2, [pc, #320]	@ (80038a4 <HAL_GPIO_Init+0x30c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d019      	beq.n	800379c <HAL_GPIO_Init+0x204>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a4f      	ldr	r2, [pc, #316]	@ (80038a8 <HAL_GPIO_Init+0x310>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d013      	beq.n	8003798 <HAL_GPIO_Init+0x200>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a4e      	ldr	r2, [pc, #312]	@ (80038ac <HAL_GPIO_Init+0x314>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00d      	beq.n	8003794 <HAL_GPIO_Init+0x1fc>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a4d      	ldr	r2, [pc, #308]	@ (80038b0 <HAL_GPIO_Init+0x318>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d007      	beq.n	8003790 <HAL_GPIO_Init+0x1f8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a4c      	ldr	r2, [pc, #304]	@ (80038b4 <HAL_GPIO_Init+0x31c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_GPIO_Init+0x1f4>
 8003788:	2307      	movs	r3, #7
 800378a:	e00e      	b.n	80037aa <HAL_GPIO_Init+0x212>
 800378c:	2308      	movs	r3, #8
 800378e:	e00c      	b.n	80037aa <HAL_GPIO_Init+0x212>
 8003790:	2306      	movs	r3, #6
 8003792:	e00a      	b.n	80037aa <HAL_GPIO_Init+0x212>
 8003794:	2305      	movs	r3, #5
 8003796:	e008      	b.n	80037aa <HAL_GPIO_Init+0x212>
 8003798:	2304      	movs	r3, #4
 800379a:	e006      	b.n	80037aa <HAL_GPIO_Init+0x212>
 800379c:	2303      	movs	r3, #3
 800379e:	e004      	b.n	80037aa <HAL_GPIO_Init+0x212>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e002      	b.n	80037aa <HAL_GPIO_Init+0x212>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_GPIO_Init+0x212>
 80037a8:	2300      	movs	r3, #0
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	f002 0203 	and.w	r2, r2, #3
 80037b0:	0092      	lsls	r2, r2, #2
 80037b2:	4093      	lsls	r3, r2
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037ba:	4937      	ldr	r1, [pc, #220]	@ (8003898 <HAL_GPIO_Init+0x300>)
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	3302      	adds	r3, #2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037c8:	4b3b      	ldr	r3, [pc, #236]	@ (80038b8 <HAL_GPIO_Init+0x320>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4013      	ands	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037ec:	4a32      	ldr	r2, [pc, #200]	@ (80038b8 <HAL_GPIO_Init+0x320>)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037f2:	4b31      	ldr	r3, [pc, #196]	@ (80038b8 <HAL_GPIO_Init+0x320>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003816:	4a28      	ldr	r2, [pc, #160]	@ (80038b8 <HAL_GPIO_Init+0x320>)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800381c:	4b26      	ldr	r3, [pc, #152]	@ (80038b8 <HAL_GPIO_Init+0x320>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	43db      	mvns	r3, r3
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003840:	4a1d      	ldr	r2, [pc, #116]	@ (80038b8 <HAL_GPIO_Init+0x320>)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003846:	4b1c      	ldr	r3, [pc, #112]	@ (80038b8 <HAL_GPIO_Init+0x320>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	43db      	mvns	r3, r3
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800386a:	4a13      	ldr	r2, [pc, #76]	@ (80038b8 <HAL_GPIO_Init+0x320>)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	3301      	adds	r3, #1
 8003874:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	f47f ae91 	bne.w	80035a8 <HAL_GPIO_Init+0x10>
  }
}
 8003886:	bf00      	nop
 8003888:	bf00      	nop
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	40021000 	.word	0x40021000
 8003898:	40010000 	.word	0x40010000
 800389c:	48000400 	.word	0x48000400
 80038a0:	48000800 	.word	0x48000800
 80038a4:	48000c00 	.word	0x48000c00
 80038a8:	48001000 	.word	0x48001000
 80038ac:	48001400 	.word	0x48001400
 80038b0:	48001800 	.word	0x48001800
 80038b4:	48001c00 	.word	0x48001c00
 80038b8:	40010400 	.word	0x40010400

080038bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e08d      	b.n	80039ea <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff f998 	bl	8002c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	@ 0x24
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800390c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800391c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d107      	bne.n	8003936 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	e006      	b.n	8003944 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003942:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d108      	bne.n	800395e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	e007      	b.n	800396e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800396c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800397c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003980:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003990:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69d9      	ldr	r1, [r3, #28]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1a      	ldr	r2, [r3, #32]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d138      	bne.n	8003a7a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e032      	b.n	8003a7c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2224      	movs	r2, #36	@ 0x24
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0201 	bic.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a44:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6819      	ldr	r1, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0201 	orr.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	e000      	b.n	8003a7c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a7a:	2302      	movs	r3, #2
  }
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	d139      	bne.n	8003b12 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e033      	b.n	8003b14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2224      	movs	r2, #36	@ 0x24
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0201 	bic.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ada:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0201 	orr.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e000      	b.n	8003b14 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
  }
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003b28:	f7ff fb48 	bl	80031bc <HAL_GetTick>
 8003b2c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e069      	b.n	8003c0c <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10b      	bne.n	8003b5c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff f8ab 	bl	8002ca8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003b52:	f241 3188 	movw	r1, #5000	@ 0x1388
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f85e 	bl	8003c18 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	021a      	lsls	r2, r3, #8
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2120      	movs	r1, #32
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f856 	bl	8003c34 <QSPI_WaitFlagStateUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003b8c:	7afb      	ldrb	r3, [r7, #11]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d137      	bne.n	8003c02 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b9c:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6852      	ldr	r2, [r2, #4]
 8003ba4:	0611      	lsls	r1, r2, #24
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	68d2      	ldr	r2, [r2, #12]
 8003baa:	4311      	orrs	r1, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	69d2      	ldr	r2, [r2, #28]
 8003bb0:	4311      	orrs	r1, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6a12      	ldr	r2, [r2, #32]
 8003bb6:	4311      	orrs	r1, r2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	430b      	orrs	r3, r1
 8003bbe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	4b13      	ldr	r3, [pc, #76]	@ (8003c14 <HAL_QSPI_Init+0xf4>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6912      	ldr	r2, [r2, #16]
 8003bce:	0411      	lsls	r1, r2, #16
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6952      	ldr	r2, [r2, #20]
 8003bd4:	4311      	orrs	r1, r2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6992      	ldr	r2, [r2, #24]
 8003bda:	4311      	orrs	r1, r2
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8003c0a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	ffe0f8fe 	.word	0xffe0f8fe

08003c18 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	4613      	mov	r3, r2
 8003c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003c44:	e01a      	b.n	8003c7c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d016      	beq.n	8003c7c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4e:	f7ff fab5 	bl	80031bc <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d302      	bcc.n	8003c64 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2204      	movs	r2, #4
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c70:	f043 0201 	orr.w	r2, r3, #1
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e00e      	b.n	8003c9a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bf14      	ite	ne
 8003c8a:	2301      	movne	r3, #1
 8003c8c:	2300      	moveq	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d1d6      	bne.n	8003c46 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <LL_ADC_REG_SetSequencerLength>:
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb0:	f023 020f 	bic.w	r2, r3, #15
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_ADC_IsEnabled>:
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <LL_ADC_IsEnabled+0x18>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <LL_ADC_IsEnabled+0x1a>
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, const LL_ADC_CommonInitTypeDef *pADC_CommonInitStruct)
{
 8003cf0:	b590      	push	{r4, r7, lr}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8003cfe:	481c      	ldr	r0, [pc, #112]	@ (8003d70 <LL_ADC_CommonInit+0x80>)
 8003d00:	f7ff ffe2 	bl	8003cc8 <LL_ADC_IsEnabled>
 8003d04:	4604      	mov	r4, r0
 8003d06:	481b      	ldr	r0, [pc, #108]	@ (8003d74 <LL_ADC_CommonInit+0x84>)
 8003d08:	f7ff ffde 	bl	8003cc8 <LL_ADC_IsEnabled>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	431c      	orrs	r4, r3
 8003d10:	4819      	ldr	r0, [pc, #100]	@ (8003d78 <LL_ADC_CommonInit+0x88>)
 8003d12:	f7ff ffd9 	bl	8003cc8 <LL_ADC_IsEnabled>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4323      	orrs	r3, r4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d120      	bne.n	8003d60 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (pADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d012      	beq.n	8003d4c <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	4b14      	ldr	r3, [pc, #80]	@ (8003d7c <LL_ADC_CommonInit+0x8c>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	6811      	ldr	r1, [r2, #0]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	6852      	ldr	r2, [r2, #4]
 8003d36:	4311      	orrs	r1, r2
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	6892      	ldr	r2, [r2, #8]
 8003d3c:	4311      	orrs	r1, r2
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	68d2      	ldr	r2, [r2, #12]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	609a      	str	r2, [r3, #8]
 8003d4a:	e00b      	b.n	8003d64 <LL_ADC_CommonInit+0x74>
                 | pADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	4b0a      	ldr	r3, [pc, #40]	@ (8003d7c <LL_ADC_CommonInit+0x8c>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	609a      	str	r2, [r3, #8]
 8003d5e:	e001      	b.n	8003d64 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd90      	pop	{r4, r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	50040000 	.word	0x50040000
 8003d74:	50040100 	.word	0x50040100
 8003d78:	50040200 	.word	0x50040200
 8003d7c:	ffc030e0 	.word	0xffc030e0

08003d80 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, const LL_ADC_InitTypeDef *pADC_InitStruct)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff ff9a 	bl	8003cc8 <LL_ADC_IsEnabled>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d111      	bne.n	8003dbe <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003da2:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	6811      	ldr	r1, [r2, #0]
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	6852      	ldr	r2, [r2, #4]
 8003dae:	4311      	orrs	r1, r2
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	6892      	ldr	r2, [r2, #8]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	60da      	str	r2, [r3, #12]
 8003dbc:	e001      	b.n	8003dc2 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, const LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff ff74 	bl	8003cc8 <LL_ADC_IsEnabled>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d132      	bne.n	8003e4c <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d015      	beq.n	8003e1a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e5c <LL_ADC_REG_Init+0x90>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	6811      	ldr	r1, [r2, #0]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	6892      	ldr	r2, [r2, #8]
 8003dfe:	4311      	orrs	r1, r2
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	68d2      	ldr	r2, [r2, #12]
 8003e04:	4311      	orrs	r1, r2
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	6912      	ldr	r2, [r2, #16]
 8003e0a:	4311      	orrs	r1, r2
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	6952      	ldr	r2, [r2, #20]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	60da      	str	r2, [r3, #12]
 8003e18:	e011      	b.n	8003e3e <LL_ADC_REG_Init+0x72>
                 | pADC_RegInitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e5c <LL_ADC_REG_Init+0x90>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	6811      	ldr	r1, [r2, #0]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	68d2      	ldr	r2, [r2, #12]
 8003e2a:	4311      	orrs	r1, r2
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	6912      	ldr	r2, [r2, #16]
 8003e30:	4311      	orrs	r1, r2
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	6952      	ldr	r2, [r2, #20]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4619      	mov	r1, r3
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ff2c 	bl	8003ca2 <LL_ADC_REG_SetSequencerLength>
 8003e4a:	e001      	b.n	8003e50 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	fff0c03c 	.word	0xfff0c03c

08003e60 <LL_GPIO_SetPinMode>:
{
 8003e60:	b480      	push	{r7}
 8003e62:	b08b      	sub	sp, #44	@ 0x2c
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	fa93 f3a3 	rbit	r3, r3
 8003e7a:	613b      	str	r3, [r7, #16]
  return result;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003e86:	2320      	movs	r3, #32
 8003e88:	e003      	b.n	8003e92 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	fab3 f383 	clz	r3, r3
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	2103      	movs	r1, #3
 8003e96:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	401a      	ands	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	fa93 f3a3 	rbit	r3, r3
 8003ea8:	61fb      	str	r3, [r7, #28]
  return result;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003eb4:	2320      	movs	r3, #32
 8003eb6:	e003      	b.n	8003ec0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eba:	fab3 f383 	clz	r3, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	601a      	str	r2, [r3, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	372c      	adds	r7, #44	@ 0x2c
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <LL_GPIO_SetPinOutputType>:
{
 8003eda:	b480      	push	{r7}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	401a      	ands	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	605a      	str	r2, [r3, #4]
}
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <LL_GPIO_SetPinSpeed>:
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b08b      	sub	sp, #44	@ 0x2c
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	fa93 f3a3 	rbit	r3, r3
 8003f24:	613b      	str	r3, [r7, #16]
  return result;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003f30:	2320      	movs	r3, #32
 8003f32:	e003      	b.n	8003f3c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	2103      	movs	r1, #3
 8003f40:	fa01 f303 	lsl.w	r3, r1, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	401a      	ands	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	fa93 f3a3 	rbit	r3, r3
 8003f52:	61fb      	str	r3, [r7, #28]
  return result;
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003f5e:	2320      	movs	r3, #32
 8003f60:	e003      	b.n	8003f6a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f72:	431a      	orrs	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	609a      	str	r2, [r3, #8]
}
 8003f78:	bf00      	nop
 8003f7a:	372c      	adds	r7, #44	@ 0x2c
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <LL_GPIO_SetPinPull>:
{
 8003f84:	b480      	push	{r7}
 8003f86:	b08b      	sub	sp, #44	@ 0x2c
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	fa93 f3a3 	rbit	r3, r3
 8003f9e:	613b      	str	r3, [r7, #16]
  return result;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003faa:	2320      	movs	r3, #32
 8003fac:	e003      	b.n	8003fb6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	fab3 f383 	clz	r3, r3
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	2103      	movs	r1, #3
 8003fba:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	401a      	ands	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	fa93 f3a3 	rbit	r3, r3
 8003fcc:	61fb      	str	r3, [r7, #28]
  return result;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003fd8:	2320      	movs	r3, #32
 8003fda:	e003      	b.n	8003fe4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fde:	fab3 f383 	clz	r3, r3
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fec:	431a      	orrs	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	60da      	str	r2, [r3, #12]
}
 8003ff2:	bf00      	nop
 8003ff4:	372c      	adds	r7, #44	@ 0x2c
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <LL_GPIO_SetAFPin_0_7>:
{
 8003ffe:	b480      	push	{r7}
 8004000:	b08b      	sub	sp, #44	@ 0x2c
 8004002:	af00      	add	r7, sp, #0
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a1a      	ldr	r2, [r3, #32]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	fa93 f3a3 	rbit	r3, r3
 8004018:	613b      	str	r3, [r7, #16]
  return result;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004024:	2320      	movs	r3, #32
 8004026:	e003      	b.n	8004030 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	fab3 f383 	clz	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	210f      	movs	r1, #15
 8004034:	fa01 f303 	lsl.w	r3, r1, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	401a      	ands	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	fa93 f3a3 	rbit	r3, r3
 8004046:	61fb      	str	r3, [r7, #28]
  return result;
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8004052:	2320      	movs	r3, #32
 8004054:	e003      	b.n	800405e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	fab3 f383 	clz	r3, r3
 800405c:	b2db      	uxtb	r3, r3
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	fa01 f303 	lsl.w	r3, r1, r3
 8004066:	431a      	orrs	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	621a      	str	r2, [r3, #32]
}
 800406c:	bf00      	nop
 800406e:	372c      	adds	r7, #44	@ 0x2c
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <LL_GPIO_SetAFPin_8_15>:
{
 8004078:	b480      	push	{r7}
 800407a:	b08b      	sub	sp, #44	@ 0x2c
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	0a1b      	lsrs	r3, r3, #8
 800408c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	fa93 f3a3 	rbit	r3, r3
 8004094:	613b      	str	r3, [r7, #16]
  return result;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80040a0:	2320      	movs	r3, #32
 80040a2:	e003      	b.n	80040ac <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	210f      	movs	r1, #15
 80040b0:	fa01 f303 	lsl.w	r3, r1, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	401a      	ands	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	61fb      	str	r3, [r7, #28]
  return result;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80040d0:	2320      	movs	r3, #32
 80040d2:	e003      	b.n	80040dc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80040d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	fa01 f303 	lsl.w	r3, r1, r3
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80040ea:	bf00      	nop
 80040ec:	372c      	adds	r7, #44	@ 0x2c
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b088      	sub	sp, #32
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	fa93 f3a3 	rbit	r3, r3
 800410c:	60fb      	str	r3, [r7, #12]
  return result;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <LL_GPIO_Init+0x26>
    return 32U;
 8004118:	2320      	movs	r3, #32
 800411a:	e003      	b.n	8004124 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	fab3 f383 	clz	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004126:	e048      	b.n	80041ba <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	2101      	movs	r1, #1
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	fa01 f303 	lsl.w	r3, r1, r3
 8004134:	4013      	ands	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d03a      	beq.n	80041b4 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d003      	beq.n	800414e <LL_GPIO_Init+0x58>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d10e      	bne.n	800416c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	461a      	mov	r2, r3
 8004154:	69b9      	ldr	r1, [r7, #24]
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff fed7 	bl	8003f0a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6819      	ldr	r1, [r3, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	461a      	mov	r2, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff feb7 	bl	8003eda <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	461a      	mov	r2, r3
 8004172:	69b9      	ldr	r1, [r7, #24]
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff ff05 	bl	8003f84 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d111      	bne.n	80041a6 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2bff      	cmp	r3, #255	@ 0xff
 8004186:	d807      	bhi.n	8004198 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	461a      	mov	r2, r3
 800418e:	69b9      	ldr	r1, [r7, #24]
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff ff34 	bl	8003ffe <LL_GPIO_SetAFPin_0_7>
 8004196:	e006      	b.n	80041a6 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	461a      	mov	r2, r3
 800419e:	69b9      	ldr	r1, [r7, #24]
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ff69 	bl	8004078 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	461a      	mov	r2, r3
 80041ac:	69b9      	ldr	r1, [r7, #24]
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff fe56 	bl	8003e60 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	3301      	adds	r3, #1
 80041b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1af      	bne.n	8004128 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3720      	adds	r7, #32
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <LL_RCC_HSI_IsReady>:
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80041d8:	4b07      	ldr	r3, [pc, #28]	@ (80041f8 <LL_RCC_HSI_IsReady+0x24>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e4:	d101      	bne.n	80041ea <LL_RCC_HSI_IsReady+0x16>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <LL_RCC_HSI_IsReady+0x18>
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000

080041fc <LL_RCC_LSE_IsReady>:
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8004200:	4b07      	ldr	r3, [pc, #28]	@ (8004220 <LL_RCC_LSE_IsReady+0x24>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b02      	cmp	r3, #2
 800420c:	d101      	bne.n	8004212 <LL_RCC_LSE_IsReady+0x16>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <LL_RCC_LSE_IsReady+0x18>
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40021000 	.word	0x40021000

08004224 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8004228:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b08      	cmp	r3, #8
 8004232:	d101      	bne.n	8004238 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	40021000 	.word	0x40021000

08004248 <LL_RCC_MSI_GetRange>:
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800424c:	4b04      	ldr	r3, [pc, #16]	@ (8004260 <LL_RCC_MSI_GetRange+0x18>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004254:	4618      	mov	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40021000 	.word	0x40021000

08004264 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004268:	4b04      	ldr	r3, [pc, #16]	@ (800427c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800426a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800426e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8004272:	4618      	mov	r0, r3
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40021000 	.word	0x40021000

08004280 <LL_RCC_GetSysClkSource>:
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004284:	4b04      	ldr	r3, [pc, #16]	@ (8004298 <LL_RCC_GetSysClkSource+0x18>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 030c 	and.w	r3, r3, #12
}
 800428c:	4618      	mov	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40021000 	.word	0x40021000

0800429c <LL_RCC_GetAHBPrescaler>:
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80042a0:	4b04      	ldr	r3, [pc, #16]	@ (80042b4 <LL_RCC_GetAHBPrescaler+0x18>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40021000 	.word	0x40021000

080042b8 <LL_RCC_GetAPB1Prescaler>:
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80042bc:	4b04      	ldr	r3, [pc, #16]	@ (80042d0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000

080042d4 <LL_RCC_GetAPB2Prescaler>:
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80042d8:	4b04      	ldr	r3, [pc, #16]	@ (80042ec <LL_RCC_GetAPB2Prescaler+0x18>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000

080042f0 <LL_RCC_GetUSARTClockSource>:
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80042f8:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <LL_RCC_GetUSARTClockSource+0x24>)
 80042fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	401a      	ands	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	041b      	lsls	r3, r3, #16
 8004306:	4313      	orrs	r3, r2
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40021000 	.word	0x40021000

08004318 <LL_RCC_GetUARTClockSource>:
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8004320:	4b06      	ldr	r3, [pc, #24]	@ (800433c <LL_RCC_GetUARTClockSource+0x24>)
 8004322:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	401a      	ands	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	041b      	lsls	r3, r3, #16
 800432e:	4313      	orrs	r3, r2
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40021000 	.word	0x40021000

08004340 <LL_RCC_PLL_GetMainSource>:
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004344:	4b04      	ldr	r3, [pc, #16]	@ (8004358 <LL_RCC_PLL_GetMainSource+0x18>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0303 	and.w	r3, r3, #3
}
 800434c:	4618      	mov	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000

0800435c <LL_RCC_PLL_GetN>:
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004360:	4b04      	ldr	r3, [pc, #16]	@ (8004374 <LL_RCC_PLL_GetN+0x18>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	0a1b      	lsrs	r3, r3, #8
 8004366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800436a:	4618      	mov	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40021000 	.word	0x40021000

08004378 <LL_RCC_PLL_GetR>:
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800437c:	4b04      	ldr	r3, [pc, #16]	@ (8004390 <LL_RCC_PLL_GetR+0x18>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8004384:	4618      	mov	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40021000 	.word	0x40021000

08004394 <LL_RCC_PLL_GetDivider>:
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004398:	4b04      	ldr	r3, [pc, #16]	@ (80043ac <LL_RCC_PLL_GetDivider+0x18>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000

080043b0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d137      	bne.n	8004432 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff ff94 	bl	80042f0 <LL_RCC_GetUSARTClockSource>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	f200 80b3 	bhi.w	800453a <LL_RCC_GetUSARTClockFreq+0x18a>
 80043d4:	a201      	add	r2, pc, #4	@ (adr r2, 80043dc <LL_RCC_GetUSARTClockFreq+0x2c>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	0800441b 	.word	0x0800441b
 80043e0:	080043ed 	.word	0x080043ed
 80043e4:	080043f5 	.word	0x080043f5
 80043e8:	08004407 	.word	0x08004407
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80043ec:	f000 f956 	bl	800469c <RCC_GetSystemClockFreq>
 80043f0:	60f8      	str	r0, [r7, #12]
        break;
 80043f2:	e0b3      	b.n	800455c <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80043f4:	f7ff feee 	bl	80041d4 <LL_RCC_HSI_IsReady>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 809f 	beq.w	800453e <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8004400:	4b59      	ldr	r3, [pc, #356]	@ (8004568 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8004402:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004404:	e09b      	b.n	800453e <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004406:	f7ff fef9 	bl	80041fc <LL_RCC_LSE_IsReady>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8098 	beq.w	8004542 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8004412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004416:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004418:	e093      	b.n	8004542 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800441a:	f000 f93f 	bl	800469c <RCC_GetSystemClockFreq>
 800441e:	4603      	mov	r3, r0
 8004420:	4618      	mov	r0, r3
 8004422:	f000 f9c9 	bl	80047b8 <RCC_GetHCLKClockFreq>
 8004426:	4603      	mov	r3, r0
 8004428:	4618      	mov	r0, r3
 800442a:	f000 f9ef 	bl	800480c <RCC_GetPCLK2ClockFreq>
 800442e:	60f8      	str	r0, [r7, #12]
        break;
 8004430:	e094      	b.n	800455c <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b0c      	cmp	r3, #12
 8004436:	d146      	bne.n	80044c6 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff ff59 	bl	80042f0 <LL_RCC_GetUSARTClockSource>
 800443e:	4603      	mov	r3, r0
 8004440:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8004444:	2b0c      	cmp	r3, #12
 8004446:	d87e      	bhi.n	8004546 <LL_RCC_GetUSARTClockFreq+0x196>
 8004448:	a201      	add	r2, pc, #4	@ (adr r2, 8004450 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800444a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444e:	bf00      	nop
 8004450:	080044af 	.word	0x080044af
 8004454:	08004547 	.word	0x08004547
 8004458:	08004547 	.word	0x08004547
 800445c:	08004547 	.word	0x08004547
 8004460:	08004485 	.word	0x08004485
 8004464:	08004547 	.word	0x08004547
 8004468:	08004547 	.word	0x08004547
 800446c:	08004547 	.word	0x08004547
 8004470:	0800448d 	.word	0x0800448d
 8004474:	08004547 	.word	0x08004547
 8004478:	08004547 	.word	0x08004547
 800447c:	08004547 	.word	0x08004547
 8004480:	0800449d 	.word	0x0800449d
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004484:	f000 f90a 	bl	800469c <RCC_GetSystemClockFreq>
 8004488:	60f8      	str	r0, [r7, #12]
        break;
 800448a:	e067      	b.n	800455c <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800448c:	f7ff fea2 	bl	80041d4 <LL_RCC_HSI_IsReady>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d059      	beq.n	800454a <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8004496:	4b34      	ldr	r3, [pc, #208]	@ (8004568 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8004498:	60fb      	str	r3, [r7, #12]
        }
        break;
 800449a:	e056      	b.n	800454a <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800449c:	f7ff feae 	bl	80041fc <LL_RCC_LSE_IsReady>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d053      	beq.n	800454e <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 80044a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044aa:	60fb      	str	r3, [r7, #12]
        }
        break;
 80044ac:	e04f      	b.n	800454e <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80044ae:	f000 f8f5 	bl	800469c <RCC_GetSystemClockFreq>
 80044b2:	4603      	mov	r3, r0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 f97f 	bl	80047b8 <RCC_GetHCLKClockFreq>
 80044ba:	4603      	mov	r3, r0
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 f991 	bl	80047e4 <RCC_GetPCLK1ClockFreq>
 80044c2:	60f8      	str	r0, [r7, #12]
        break;
 80044c4:	e04a      	b.n	800455c <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b30      	cmp	r3, #48	@ 0x30
 80044ca:	d147      	bne.n	800455c <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff0f 	bl	80042f0 <LL_RCC_GetUSARTClockSource>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80044d8:	d01a      	beq.n	8004510 <LL_RCC_GetUSARTClockFreq+0x160>
 80044da:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80044de:	d838      	bhi.n	8004552 <LL_RCC_GetUSARTClockFreq+0x1a2>
 80044e0:	4a22      	ldr	r2, [pc, #136]	@ (800456c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00c      	beq.n	8004500 <LL_RCC_GetUSARTClockFreq+0x150>
 80044e6:	4a21      	ldr	r2, [pc, #132]	@ (800456c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d832      	bhi.n	8004552 <LL_RCC_GetUSARTClockFreq+0x1a2>
 80044ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044f0:	d017      	beq.n	8004522 <LL_RCC_GetUSARTClockFreq+0x172>
 80044f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004570 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d12c      	bne.n	8004552 <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80044f8:	f000 f8d0 	bl	800469c <RCC_GetSystemClockFreq>
 80044fc:	60f8      	str	r0, [r7, #12]
          break;
 80044fe:	e02d      	b.n	800455c <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8004500:	f7ff fe68 	bl	80041d4 <LL_RCC_HSI_IsReady>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d025      	beq.n	8004556 <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 800450a:	4b17      	ldr	r3, [pc, #92]	@ (8004568 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800450c:	60fb      	str	r3, [r7, #12]
          }
          break;
 800450e:	e022      	b.n	8004556 <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8004510:	f7ff fe74 	bl	80041fc <LL_RCC_LSE_IsReady>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d01f      	beq.n	800455a <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 800451a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800451e:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004520:	e01b      	b.n	800455a <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004522:	f000 f8bb 	bl	800469c <RCC_GetSystemClockFreq>
 8004526:	4603      	mov	r3, r0
 8004528:	4618      	mov	r0, r3
 800452a:	f000 f945 	bl	80047b8 <RCC_GetHCLKClockFreq>
 800452e:	4603      	mov	r3, r0
 8004530:	4618      	mov	r0, r3
 8004532:	f000 f957 	bl	80047e4 <RCC_GetPCLK1ClockFreq>
 8004536:	60f8      	str	r0, [r7, #12]
          break;
 8004538:	e010      	b.n	800455c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800453a:	bf00      	nop
 800453c:	e00e      	b.n	800455c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800453e:	bf00      	nop
 8004540:	e00c      	b.n	800455c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8004542:	bf00      	nop
 8004544:	e00a      	b.n	800455c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8004546:	bf00      	nop
 8004548:	e008      	b.n	800455c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800454a:	bf00      	nop
 800454c:	e006      	b.n	800455c <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800454e:	bf00      	nop
 8004550:	e004      	b.n	800455c <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8004552:	bf00      	nop
 8004554:	e002      	b.n	800455c <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 800455a:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 800455c:	68fb      	ldr	r3, [r7, #12]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	00f42400 	.word	0x00f42400
 800456c:	00300020 	.word	0x00300020
 8004570:	00300010 	.word	0x00300010

08004574 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2bc0      	cmp	r3, #192	@ 0xc0
 8004584:	d13b      	bne.n	80045fe <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff fec6 	bl	8004318 <LL_RCC_GetUARTClockSource>
 800458c:	4603      	mov	r3, r0
 800458e:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8004592:	d01a      	beq.n	80045ca <LL_RCC_GetUARTClockFreq+0x56>
 8004594:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8004598:	d82c      	bhi.n	80045f4 <LL_RCC_GetUARTClockFreq+0x80>
 800459a:	4a3b      	ldr	r2, [pc, #236]	@ (8004688 <LL_RCC_GetUARTClockFreq+0x114>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00c      	beq.n	80045ba <LL_RCC_GetUARTClockFreq+0x46>
 80045a0:	4a39      	ldr	r2, [pc, #228]	@ (8004688 <LL_RCC_GetUARTClockFreq+0x114>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d826      	bhi.n	80045f4 <LL_RCC_GetUARTClockFreq+0x80>
 80045a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045aa:	d017      	beq.n	80045dc <LL_RCC_GetUARTClockFreq+0x68>
 80045ac:	4a37      	ldr	r2, [pc, #220]	@ (800468c <LL_RCC_GetUARTClockFreq+0x118>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d120      	bne.n	80045f4 <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80045b2:	f000 f873 	bl	800469c <RCC_GetSystemClockFreq>
 80045b6:	60f8      	str	r0, [r7, #12]
        break;
 80045b8:	e021      	b.n	80045fe <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80045ba:	f7ff fe0b 	bl	80041d4 <LL_RCC_HSI_IsReady>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d019      	beq.n	80045f8 <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 80045c4:	4b32      	ldr	r3, [pc, #200]	@ (8004690 <LL_RCC_GetUARTClockFreq+0x11c>)
 80045c6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80045c8:	e016      	b.n	80045f8 <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80045ca:	f7ff fe17 	bl	80041fc <LL_RCC_LSE_IsReady>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d013      	beq.n	80045fc <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 80045d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045d8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80045da:	e00f      	b.n	80045fc <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80045dc:	f000 f85e 	bl	800469c <RCC_GetSystemClockFreq>
 80045e0:	4603      	mov	r3, r0
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 f8e8 	bl	80047b8 <RCC_GetHCLKClockFreq>
 80045e8:	4603      	mov	r3, r0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 f8fa 	bl	80047e4 <RCC_GetPCLK1ClockFreq>
 80045f0:	60f8      	str	r0, [r7, #12]
        break;
 80045f2:	e004      	b.n	80045fe <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 80045f4:	bf00      	nop
 80045f6:	e002      	b.n	80045fe <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 80045f8:	bf00      	nop
 80045fa:	e000      	b.n	80045fe <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 80045fc:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004604:	d13b      	bne.n	800467e <LL_RCC_GetUARTClockFreq+0x10a>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff fe86 	bl	8004318 <LL_RCC_GetUARTClockSource>
 800460c:	4603      	mov	r3, r0
 800460e:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8004612:	d01a      	beq.n	800464a <LL_RCC_GetUARTClockFreq+0xd6>
 8004614:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8004618:	d82c      	bhi.n	8004674 <LL_RCC_GetUARTClockFreq+0x100>
 800461a:	4a1e      	ldr	r2, [pc, #120]	@ (8004694 <LL_RCC_GetUARTClockFreq+0x120>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00c      	beq.n	800463a <LL_RCC_GetUARTClockFreq+0xc6>
 8004620:	4a1c      	ldr	r2, [pc, #112]	@ (8004694 <LL_RCC_GetUARTClockFreq+0x120>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d826      	bhi.n	8004674 <LL_RCC_GetUARTClockFreq+0x100>
 8004626:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800462a:	d017      	beq.n	800465c <LL_RCC_GetUARTClockFreq+0xe8>
 800462c:	4a1a      	ldr	r2, [pc, #104]	@ (8004698 <LL_RCC_GetUARTClockFreq+0x124>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d120      	bne.n	8004674 <LL_RCC_GetUARTClockFreq+0x100>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004632:	f000 f833 	bl	800469c <RCC_GetSystemClockFreq>
 8004636:	60f8      	str	r0, [r7, #12]
        break;
 8004638:	e021      	b.n	800467e <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800463a:	f7ff fdcb 	bl	80041d4 <LL_RCC_HSI_IsReady>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d019      	beq.n	8004678 <LL_RCC_GetUARTClockFreq+0x104>
        {
          uart_frequency = HSI_VALUE;
 8004644:	4b12      	ldr	r3, [pc, #72]	@ (8004690 <LL_RCC_GetUARTClockFreq+0x11c>)
 8004646:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004648:	e016      	b.n	8004678 <LL_RCC_GetUARTClockFreq+0x104>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800464a:	f7ff fdd7 	bl	80041fc <LL_RCC_LSE_IsReady>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d013      	beq.n	800467c <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = LSE_VALUE;
 8004654:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004658:	60fb      	str	r3, [r7, #12]
        }
        break;
 800465a:	e00f      	b.n	800467c <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800465c:	f000 f81e 	bl	800469c <RCC_GetSystemClockFreq>
 8004660:	4603      	mov	r3, r0
 8004662:	4618      	mov	r0, r3
 8004664:	f000 f8a8 	bl	80047b8 <RCC_GetHCLKClockFreq>
 8004668:	4603      	mov	r3, r0
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f8ba 	bl	80047e4 <RCC_GetPCLK1ClockFreq>
 8004670:	60f8      	str	r0, [r7, #12]
        break;
 8004672:	e004      	b.n	800467e <LL_RCC_GetUARTClockFreq+0x10a>

      default:
        break;
 8004674:	bf00      	nop
 8004676:	e002      	b.n	800467e <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8004678:	bf00      	nop
 800467a:	e000      	b.n	800467e <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 800467c:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800467e:	68fb      	ldr	r3, [r7, #12]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	00c00080 	.word	0x00c00080
 800468c:	00c00040 	.word	0x00c00040
 8004690:	00f42400 	.word	0x00f42400
 8004694:	03000200 	.word	0x03000200
 8004698:	03000100 	.word	0x03000100

0800469c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80046a2:	f7ff fded 	bl	8004280 <LL_RCC_GetSysClkSource>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b0c      	cmp	r3, #12
 80046aa:	d851      	bhi.n	8004750 <RCC_GetSystemClockFreq+0xb4>
 80046ac:	a201      	add	r2, pc, #4	@ (adr r2, 80046b4 <RCC_GetSystemClockFreq+0x18>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046e9 	.word	0x080046e9
 80046b8:	08004751 	.word	0x08004751
 80046bc:	08004751 	.word	0x08004751
 80046c0:	08004751 	.word	0x08004751
 80046c4:	0800473d 	.word	0x0800473d
 80046c8:	08004751 	.word	0x08004751
 80046cc:	08004751 	.word	0x08004751
 80046d0:	08004751 	.word	0x08004751
 80046d4:	08004743 	.word	0x08004743
 80046d8:	08004751 	.word	0x08004751
 80046dc:	08004751 	.word	0x08004751
 80046e0:	08004751 	.word	0x08004751
 80046e4:	08004749 	.word	0x08004749
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80046e8:	f7ff fd9c 	bl	8004224 <LL_RCC_MSI_IsEnabledRangeSelect>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d111      	bne.n	8004716 <RCC_GetSystemClockFreq+0x7a>
 80046f2:	f7ff fd97 	bl	8004224 <LL_RCC_MSI_IsEnabledRangeSelect>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d004      	beq.n	8004706 <RCC_GetSystemClockFreq+0x6a>
 80046fc:	f7ff fda4 	bl	8004248 <LL_RCC_MSI_GetRange>
 8004700:	4603      	mov	r3, r0
 8004702:	0a1b      	lsrs	r3, r3, #8
 8004704:	e003      	b.n	800470e <RCC_GetSystemClockFreq+0x72>
 8004706:	f7ff fdad 	bl	8004264 <LL_RCC_MSI_GetRangeAfterStandby>
 800470a:	4603      	mov	r3, r0
 800470c:	0a1b      	lsrs	r3, r3, #8
 800470e:	4a28      	ldr	r2, [pc, #160]	@ (80047b0 <RCC_GetSystemClockFreq+0x114>)
 8004710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004714:	e010      	b.n	8004738 <RCC_GetSystemClockFreq+0x9c>
 8004716:	f7ff fd85 	bl	8004224 <LL_RCC_MSI_IsEnabledRangeSelect>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <RCC_GetSystemClockFreq+0x8e>
 8004720:	f7ff fd92 	bl	8004248 <LL_RCC_MSI_GetRange>
 8004724:	4603      	mov	r3, r0
 8004726:	091b      	lsrs	r3, r3, #4
 8004728:	e003      	b.n	8004732 <RCC_GetSystemClockFreq+0x96>
 800472a:	f7ff fd9b 	bl	8004264 <LL_RCC_MSI_GetRangeAfterStandby>
 800472e:	4603      	mov	r3, r0
 8004730:	091b      	lsrs	r3, r3, #4
 8004732:	4a1f      	ldr	r2, [pc, #124]	@ (80047b0 <RCC_GetSystemClockFreq+0x114>)
 8004734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004738:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800473a:	e033      	b.n	80047a4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800473c:	4b1d      	ldr	r3, [pc, #116]	@ (80047b4 <RCC_GetSystemClockFreq+0x118>)
 800473e:	607b      	str	r3, [r7, #4]
      break;
 8004740:	e030      	b.n	80047a4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004742:	4b1c      	ldr	r3, [pc, #112]	@ (80047b4 <RCC_GetSystemClockFreq+0x118>)
 8004744:	607b      	str	r3, [r7, #4]
      break;
 8004746:	e02d      	b.n	80047a4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004748:	f000 f874 	bl	8004834 <RCC_PLL_GetFreqDomain_SYS>
 800474c:	6078      	str	r0, [r7, #4]
      break;
 800474e:	e029      	b.n	80047a4 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004750:	f7ff fd68 	bl	8004224 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d111      	bne.n	800477e <RCC_GetSystemClockFreq+0xe2>
 800475a:	f7ff fd63 	bl	8004224 <LL_RCC_MSI_IsEnabledRangeSelect>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d004      	beq.n	800476e <RCC_GetSystemClockFreq+0xd2>
 8004764:	f7ff fd70 	bl	8004248 <LL_RCC_MSI_GetRange>
 8004768:	4603      	mov	r3, r0
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	e003      	b.n	8004776 <RCC_GetSystemClockFreq+0xda>
 800476e:	f7ff fd79 	bl	8004264 <LL_RCC_MSI_GetRangeAfterStandby>
 8004772:	4603      	mov	r3, r0
 8004774:	0a1b      	lsrs	r3, r3, #8
 8004776:	4a0e      	ldr	r2, [pc, #56]	@ (80047b0 <RCC_GetSystemClockFreq+0x114>)
 8004778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477c:	e010      	b.n	80047a0 <RCC_GetSystemClockFreq+0x104>
 800477e:	f7ff fd51 	bl	8004224 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <RCC_GetSystemClockFreq+0xf6>
 8004788:	f7ff fd5e 	bl	8004248 <LL_RCC_MSI_GetRange>
 800478c:	4603      	mov	r3, r0
 800478e:	091b      	lsrs	r3, r3, #4
 8004790:	e003      	b.n	800479a <RCC_GetSystemClockFreq+0xfe>
 8004792:	f7ff fd67 	bl	8004264 <LL_RCC_MSI_GetRangeAfterStandby>
 8004796:	4603      	mov	r3, r0
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	4a05      	ldr	r2, [pc, #20]	@ (80047b0 <RCC_GetSystemClockFreq+0x114>)
 800479c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047a0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80047a2:	bf00      	nop
  }

  return frequency;
 80047a4:	687b      	ldr	r3, [r7, #4]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	08005780 	.word	0x08005780
 80047b4:	00f42400 	.word	0x00f42400

080047b8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80047c0:	f7ff fd6c 	bl	800429c <LL_RCC_GetAHBPrescaler>
 80047c4:	4603      	mov	r3, r0
 80047c6:	091b      	lsrs	r3, r3, #4
 80047c8:	f003 030f 	and.w	r3, r3, #15
 80047cc:	4a04      	ldr	r2, [pc, #16]	@ (80047e0 <RCC_GetHCLKClockFreq+0x28>)
 80047ce:	5cd3      	ldrb	r3, [r2, r3]
 80047d0:	461a      	mov	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	40d3      	lsrs	r3, r2
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	08005768 	.word	0x08005768

080047e4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80047ec:	f7ff fd64 	bl	80042b8 <LL_RCC_GetAPB1Prescaler>
 80047f0:	4603      	mov	r3, r0
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	4a04      	ldr	r2, [pc, #16]	@ (8004808 <RCC_GetPCLK1ClockFreq+0x24>)
 80047f6:	5cd3      	ldrb	r3, [r2, r3]
 80047f8:	461a      	mov	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	40d3      	lsrs	r3, r2
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	08005778 	.word	0x08005778

0800480c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004814:	f7ff fd5e 	bl	80042d4 <LL_RCC_GetAPB2Prescaler>
 8004818:	4603      	mov	r3, r0
 800481a:	0adb      	lsrs	r3, r3, #11
 800481c:	4a04      	ldr	r2, [pc, #16]	@ (8004830 <RCC_GetPCLK2ClockFreq+0x24>)
 800481e:	5cd3      	ldrb	r3, [r2, r3]
 8004820:	461a      	mov	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	40d3      	lsrs	r3, r2
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	08005778 	.word	0x08005778

08004834 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800483a:	f7ff fd81 	bl	8004340 <LL_RCC_PLL_GetMainSource>
 800483e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b03      	cmp	r3, #3
 8004844:	d036      	beq.n	80048b4 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b03      	cmp	r3, #3
 800484a:	d836      	bhi.n	80048ba <RCC_PLL_GetFreqDomain_SYS+0x86>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d003      	beq.n	800485a <RCC_PLL_GetFreqDomain_SYS+0x26>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d02a      	beq.n	80048ae <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8004858:	e02f      	b.n	80048ba <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800485a:	f7ff fce3 	bl	8004224 <LL_RCC_MSI_IsEnabledRangeSelect>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d111      	bne.n	8004888 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8004864:	f7ff fcde 	bl	8004224 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800486e:	f7ff fceb 	bl	8004248 <LL_RCC_MSI_GetRange>
 8004872:	4603      	mov	r3, r0
 8004874:	0a1b      	lsrs	r3, r3, #8
 8004876:	e003      	b.n	8004880 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8004878:	f7ff fcf4 	bl	8004264 <LL_RCC_MSI_GetRangeAfterStandby>
 800487c:	4603      	mov	r3, r0
 800487e:	0a1b      	lsrs	r3, r3, #8
 8004880:	4a2f      	ldr	r2, [pc, #188]	@ (8004940 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8004882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004886:	e010      	b.n	80048aa <RCC_PLL_GetFreqDomain_SYS+0x76>
 8004888:	f7ff fccc 	bl	8004224 <LL_RCC_MSI_IsEnabledRangeSelect>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d004      	beq.n	800489c <RCC_PLL_GetFreqDomain_SYS+0x68>
 8004892:	f7ff fcd9 	bl	8004248 <LL_RCC_MSI_GetRange>
 8004896:	4603      	mov	r3, r0
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	e003      	b.n	80048a4 <RCC_PLL_GetFreqDomain_SYS+0x70>
 800489c:	f7ff fce2 	bl	8004264 <LL_RCC_MSI_GetRangeAfterStandby>
 80048a0:	4603      	mov	r3, r0
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	4a26      	ldr	r2, [pc, #152]	@ (8004940 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80048a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048aa:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80048ac:	e02f      	b.n	800490e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80048ae:	4b25      	ldr	r3, [pc, #148]	@ (8004944 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80048b0:	607b      	str	r3, [r7, #4]
      break;
 80048b2:	e02c      	b.n	800490e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80048b4:	4b23      	ldr	r3, [pc, #140]	@ (8004944 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80048b6:	607b      	str	r3, [r7, #4]
      break;
 80048b8:	e029      	b.n	800490e <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80048ba:	f7ff fcb3 	bl	8004224 <LL_RCC_MSI_IsEnabledRangeSelect>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d111      	bne.n	80048e8 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80048c4:	f7ff fcae 	bl	8004224 <LL_RCC_MSI_IsEnabledRangeSelect>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d004      	beq.n	80048d8 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80048ce:	f7ff fcbb 	bl	8004248 <LL_RCC_MSI_GetRange>
 80048d2:	4603      	mov	r3, r0
 80048d4:	0a1b      	lsrs	r3, r3, #8
 80048d6:	e003      	b.n	80048e0 <RCC_PLL_GetFreqDomain_SYS+0xac>
 80048d8:	f7ff fcc4 	bl	8004264 <LL_RCC_MSI_GetRangeAfterStandby>
 80048dc:	4603      	mov	r3, r0
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	4a17      	ldr	r2, [pc, #92]	@ (8004940 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80048e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e6:	e010      	b.n	800490a <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80048e8:	f7ff fc9c 	bl	8004224 <LL_RCC_MSI_IsEnabledRangeSelect>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d004      	beq.n	80048fc <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80048f2:	f7ff fca9 	bl	8004248 <LL_RCC_MSI_GetRange>
 80048f6:	4603      	mov	r3, r0
 80048f8:	091b      	lsrs	r3, r3, #4
 80048fa:	e003      	b.n	8004904 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 80048fc:	f7ff fcb2 	bl	8004264 <LL_RCC_MSI_GetRangeAfterStandby>
 8004900:	4603      	mov	r3, r0
 8004902:	091b      	lsrs	r3, r3, #4
 8004904:	4a0e      	ldr	r2, [pc, #56]	@ (8004940 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8004906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800490a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800490c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800490e:	f7ff fd41 	bl	8004394 <LL_RCC_PLL_GetDivider>
 8004912:	4603      	mov	r3, r0
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	3301      	adds	r3, #1
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	fbb2 f4f3 	udiv	r4, r2, r3
 800491e:	f7ff fd1d 	bl	800435c <LL_RCC_PLL_GetN>
 8004922:	4603      	mov	r3, r0
 8004924:	fb03 f404 	mul.w	r4, r3, r4
 8004928:	f7ff fd26 	bl	8004378 <LL_RCC_PLL_GetR>
 800492c:	4603      	mov	r3, r0
 800492e:	0e5b      	lsrs	r3, r3, #25
 8004930:	3301      	adds	r3, #1
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8004938:	4618      	mov	r0, r3
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	bd90      	pop	{r4, r7, pc}
 8004940:	08005780 	.word	0x08005780
 8004944:	00f42400 	.word	0x00f42400

08004948 <LL_RTC_SetHourFormat>:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetHourFormat(RTC_TypeDef *RTCx, uint32_t HourFormat)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	609a      	str	r2, [r3, #8]
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f04f 32ff 	mov.w	r2, #4294967295
 800497c:	60da      	str	r2, [r3, #12]
}
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004998:	60da      	str	r2, [r3, #12]
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	611a      	str	r2, [r3, #16]
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80049e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	611a      	str	r2, [r3, #16]
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	22ff      	movs	r2, #255	@ 0xff
 8004a04:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <LL_RTC_DisableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	22ca      	movs	r2, #202	@ 0xca
 8004a1e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2253      	movs	r2, #83	@ 0x53
 8004a24:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a42:	2b40      	cmp	r3, #64	@ 0x40
 8004a44:	bf0c      	ite	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	2300      	movne	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8004a5c:	4b07      	ldr	r3, [pc, #28]	@ (8004a7c <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a68:	bf0c      	ite	eq
 8004a6a:	2301      	moveq	r3, #1
 8004a6c:	2300      	movne	r3, #0
 8004a6e:	b2db      	uxtb	r3, r3
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	e000e010 	.word	0xe000e010

08004a80 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff ffbf 	bl	8004a12 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f822 	bl	8004ade <LL_RTC_EnterInitMode>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d016      	beq.n	8004ace <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff ff4e 	bl	8004948 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff ff8b 	bl	80049ce <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	4619      	mov	r1, r3
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff ff71 	bl	80049a6 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff ff60 	bl	800498a <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8004aca:	2300      	movs	r3, #0
 8004acc:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff ff92 	bl	80049f8 <LL_RTC_EnableWriteProtection>

  return status;
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b086      	sub	sp, #24
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8004ae6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004aea:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8004aec:	2300      	movs	r3, #0
 8004aee:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff ff9e 	bl	8004a32 <LL_RTC_IsActiveFlag_INIT>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d11e      	bne.n	8004b3a <LL_RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff ff36 	bl	800496e <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff ff95 	bl	8004a32 <LL_RTC_IsActiveFlag_INIT>
 8004b08:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8004b0a:	e010      	b.n	8004b2e <LL_RTC_EnterInitMode+0x50>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8004b0c:	f7ff ffa4 	bl	8004a58 <LL_SYSTICK_IsActiveCounterFlag>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d102      	bne.n	8004b1c <LL_RTC_EnterInitMode+0x3e>
      {
        timeout --;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff ff88 	bl	8004a32 <LL_RTC_IsActiveFlag_INIT>
 8004b22:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <LL_RTC_EnterInitMode+0x50>
      {
        status = ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <LL_RTC_EnterInitMode+0x5c>
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d1e8      	bne.n	8004b0c <LL_RTC_EnterInitMode+0x2e>
      }
    }
  }
  return status;
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <LL_SPI_IsEnabled>:
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b54:	2b40      	cmp	r3, #64	@ 0x40
 8004b56:	d101      	bne.n	8004b5c <LL_SPI_IsEnabled+0x18>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <LL_SPI_IsEnabled+0x1a>
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <LL_SPI_SetRxFIFOThreshold>:
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	605a      	str	r2, [r3, #4]
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <LL_SPI_SetCRCPolynomial>:
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	611a      	str	r2, [r3, #16]
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff ffc0 	bl	8004b44 <LL_SPI_IsEnabled>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d145      	bne.n	8004c56 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bd2:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	6811      	ldr	r1, [r2, #0]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	6852      	ldr	r2, [r2, #4]
 8004bde:	4311      	orrs	r1, r2
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	68d2      	ldr	r2, [r2, #12]
 8004be4:	4311      	orrs	r1, r2
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	6912      	ldr	r2, [r2, #16]
 8004bea:	4311      	orrs	r1, r2
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	6952      	ldr	r2, [r2, #20]
 8004bf0:	4311      	orrs	r1, r2
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	6992      	ldr	r2, [r2, #24]
 8004bf6:	4311      	orrs	r1, r2
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	69d2      	ldr	r2, [r2, #28]
 8004bfc:	4311      	orrs	r1, r2
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	6a12      	ldr	r2, [r2, #32]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004c12:	f023 0304 	bic.w	r3, r3, #4
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	6891      	ldr	r1, [r2, #8]
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	6952      	ldr	r2, [r2, #20]
 8004c1e:	0c12      	lsrs	r2, r2, #16
 8004c20:	430a      	orrs	r2, r1
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c30:	d204      	bcs.n	8004c3c <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8004c32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff ff97 	bl	8004b6a <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c44:	d105      	bne.n	8004c52 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7ff ff9f 	bl	8004b90 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <LL_TIM_SetPrescaler>:
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <LL_TIM_SetAutoReload>:
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <LL_TIM_SetRepetitionCounter>:
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <LL_TIM_OC_SetCompareCH1>:
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <LL_TIM_OC_SetCompareCH2>:
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <LL_TIM_OC_SetCompareCH3>:
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <LL_TIM_OC_SetCompareCH4>:
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <LL_TIM_OC_SetCompareCH5>:
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <LL_TIM_OC_SetCompareCH6>:
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	f043 0201 	orr.w	r2, r3, #1
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	615a      	str	r2, [r3, #20]
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a3d      	ldr	r2, [pc, #244]	@ (8004e88 <LL_TIM_Init+0x108>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d013      	beq.n	8004dc0 <LL_TIM_Init+0x40>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d9e:	d00f      	beq.n	8004dc0 <LL_TIM_Init+0x40>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a3a      	ldr	r2, [pc, #232]	@ (8004e8c <LL_TIM_Init+0x10c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00b      	beq.n	8004dc0 <LL_TIM_Init+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a39      	ldr	r2, [pc, #228]	@ (8004e90 <LL_TIM_Init+0x110>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d007      	beq.n	8004dc0 <LL_TIM_Init+0x40>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a38      	ldr	r2, [pc, #224]	@ (8004e94 <LL_TIM_Init+0x114>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <LL_TIM_Init+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a37      	ldr	r2, [pc, #220]	@ (8004e98 <LL_TIM_Init+0x118>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d106      	bne.n	8004dce <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8004e88 <LL_TIM_Init+0x108>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01f      	beq.n	8004e16 <LL_TIM_Init+0x96>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ddc:	d01b      	beq.n	8004e16 <LL_TIM_Init+0x96>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e8c <LL_TIM_Init+0x10c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d017      	beq.n	8004e16 <LL_TIM_Init+0x96>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a29      	ldr	r2, [pc, #164]	@ (8004e90 <LL_TIM_Init+0x110>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <LL_TIM_Init+0x96>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a28      	ldr	r2, [pc, #160]	@ (8004e94 <LL_TIM_Init+0x114>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00f      	beq.n	8004e16 <LL_TIM_Init+0x96>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a27      	ldr	r2, [pc, #156]	@ (8004e98 <LL_TIM_Init+0x118>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00b      	beq.n	8004e16 <LL_TIM_Init+0x96>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a26      	ldr	r2, [pc, #152]	@ (8004e9c <LL_TIM_Init+0x11c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d007      	beq.n	8004e16 <LL_TIM_Init+0x96>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a25      	ldr	r2, [pc, #148]	@ (8004ea0 <LL_TIM_Init+0x120>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d003      	beq.n	8004e16 <LL_TIM_Init+0x96>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a24      	ldr	r2, [pc, #144]	@ (8004ea4 <LL_TIM_Init+0x124>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d106      	bne.n	8004e24 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff ff23 	bl	8004c7c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7ff ff0f 	bl	8004c60 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a10      	ldr	r2, [pc, #64]	@ (8004e88 <LL_TIM_Init+0x108>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00f      	beq.n	8004e6a <LL_TIM_Init+0xea>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a12      	ldr	r2, [pc, #72]	@ (8004e98 <LL_TIM_Init+0x118>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00b      	beq.n	8004e6a <LL_TIM_Init+0xea>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a11      	ldr	r2, [pc, #68]	@ (8004e9c <LL_TIM_Init+0x11c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d007      	beq.n	8004e6a <LL_TIM_Init+0xea>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a10      	ldr	r2, [pc, #64]	@ (8004ea0 <LL_TIM_Init+0x120>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <LL_TIM_Init+0xea>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a0f      	ldr	r2, [pc, #60]	@ (8004ea4 <LL_TIM_Init+0x124>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d105      	bne.n	8004e76 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff ff11 	bl	8004c98 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff ff72 	bl	8004d60 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40012c00 	.word	0x40012c00
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800
 8004e94:	40000c00 	.word	0x40000c00
 8004e98:	40013400 	.word	0x40013400
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	40014400 	.word	0x40014400
 8004ea4:	40014800 	.word	0x40014800

08004ea8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ebe:	d045      	beq.n	8004f4c <LL_TIM_OC_Init+0xa4>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ec6:	d848      	bhi.n	8004f5a <LL_TIM_OC_Init+0xb2>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ece:	d036      	beq.n	8004f3e <LL_TIM_OC_Init+0x96>
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ed6:	d840      	bhi.n	8004f5a <LL_TIM_OC_Init+0xb2>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ede:	d027      	beq.n	8004f30 <LL_TIM_OC_Init+0x88>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ee6:	d838      	bhi.n	8004f5a <LL_TIM_OC_Init+0xb2>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eee:	d018      	beq.n	8004f22 <LL_TIM_OC_Init+0x7a>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ef6:	d830      	bhi.n	8004f5a <LL_TIM_OC_Init+0xb2>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d003      	beq.n	8004f06 <LL_TIM_OC_Init+0x5e>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b10      	cmp	r3, #16
 8004f02:	d007      	beq.n	8004f14 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004f04:	e029      	b.n	8004f5a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f82d 	bl	8004f68 <OC1Config>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	75fb      	strb	r3, [r7, #23]
      break;
 8004f12:	e023      	b.n	8004f5c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f8a6 	bl	8005068 <OC2Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f20:	e01c      	b.n	8004f5c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 f923 	bl	8005170 <OC3Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2e:	e015      	b.n	8004f5c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 f9a0 	bl	8005278 <OC4Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f3c:	e00e      	b.n	8004f5c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 fa05 	bl	8005350 <OC5Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	75fb      	strb	r3, [r7, #23]
      break;
 8004f4a:	e007      	b.n	8004f5c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 fa62 	bl	8005418 <OC6Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]
      break;
 8004f58:	e000      	b.n	8004f5c <LL_TIM_OC_Init+0xb4>
      break;
 8004f5a:	bf00      	nop
  }

  return result;
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f023 0201 	bic.w	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0303 	bic.w	r3, r3, #3
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f023 0202 	bic.w	r2, r3, #2
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0201 	bic.w	r2, r3, #1
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a22      	ldr	r2, [pc, #136]	@ (8005054 <OC1Config+0xec>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00f      	beq.n	8004fee <OC1Config+0x86>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a21      	ldr	r2, [pc, #132]	@ (8005058 <OC1Config+0xf0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00b      	beq.n	8004fee <OC1Config+0x86>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a20      	ldr	r2, [pc, #128]	@ (800505c <OC1Config+0xf4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d007      	beq.n	8004fee <OC1Config+0x86>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8005060 <OC1Config+0xf8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d003      	beq.n	8004fee <OC1Config+0x86>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8005064 <OC1Config+0xfc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d11e      	bne.n	800502c <OC1Config+0xc4>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f023 0208 	bic.w	r2, r3, #8
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f023 0204 	bic.w	r2, r3, #4
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4619      	mov	r1, r3
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7ff fe38 	bl	8004cb4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40012c00 	.word	0x40012c00
 8005058:	40013400 	.word	0x40013400
 800505c:	40014000 	.word	0x40014000
 8005060:	40014400 	.word	0x40014400
 8005064:	40014800 	.word	0x40014800

08005068 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f023 0210 	bic.w	r2, r3, #16
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800509e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	6812      	ldr	r2, [r2, #0]
 80050a6:	0212      	lsls	r2, r2, #8
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f023 0220 	bic.w	r2, r3, #32
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	f023 0210 	bic.w	r2, r3, #16
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a23      	ldr	r2, [pc, #140]	@ (800515c <OC2Config+0xf4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00f      	beq.n	80050f4 <OC2Config+0x8c>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a22      	ldr	r2, [pc, #136]	@ (8005160 <OC2Config+0xf8>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00b      	beq.n	80050f4 <OC2Config+0x8c>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a21      	ldr	r2, [pc, #132]	@ (8005164 <OC2Config+0xfc>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d007      	beq.n	80050f4 <OC2Config+0x8c>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a20      	ldr	r2, [pc, #128]	@ (8005168 <OC2Config+0x100>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <OC2Config+0x8c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a1f      	ldr	r2, [pc, #124]	@ (800516c <OC2Config+0x104>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d11f      	bne.n	8005134 <OC2Config+0xcc>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	019b      	lsls	r3, r3, #6
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	019b      	lsls	r3, r3, #6
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff fdc2 	bl	8004cd0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40013400 	.word	0x40013400
 8005164:	40014000 	.word	0x40014000
 8005168:	40014400 	.word	0x40014400
 800516c:	40014800 	.word	0x40014800

08005170 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0303 	bic.w	r3, r3, #3
 800519e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	021b      	lsls	r3, r3, #8
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a23      	ldr	r2, [pc, #140]	@ (8005264 <OC3Config+0xf4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00f      	beq.n	80051fa <OC3Config+0x8a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a22      	ldr	r2, [pc, #136]	@ (8005268 <OC3Config+0xf8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00b      	beq.n	80051fa <OC3Config+0x8a>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a21      	ldr	r2, [pc, #132]	@ (800526c <OC3Config+0xfc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d007      	beq.n	80051fa <OC3Config+0x8a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a20      	ldr	r2, [pc, #128]	@ (8005270 <OC3Config+0x100>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d003      	beq.n	80051fa <OC3Config+0x8a>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005274 <OC3Config+0x104>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d11f      	bne.n	800523a <OC3Config+0xca>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	029b      	lsls	r3, r3, #10
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	029b      	lsls	r3, r3, #10
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	015b      	lsls	r3, r3, #5
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fd4d 	bl	8004cec <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40012c00 	.word	0x40012c00
 8005268:	40013400 	.word	0x40013400
 800526c:	40014000 	.word	0x40014000
 8005270:	40014400 	.word	0x40014400
 8005274:	40014800 	.word	0x40014800

08005278 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	0212      	lsls	r2, r2, #8
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	031b      	lsls	r3, r3, #12
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	031b      	lsls	r3, r3, #12
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a17      	ldr	r2, [pc, #92]	@ (800533c <OC4Config+0xc4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00f      	beq.n	8005304 <OC4Config+0x8c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a16      	ldr	r2, [pc, #88]	@ (8005340 <OC4Config+0xc8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00b      	beq.n	8005304 <OC4Config+0x8c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a15      	ldr	r2, [pc, #84]	@ (8005344 <OC4Config+0xcc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d007      	beq.n	8005304 <OC4Config+0x8c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a14      	ldr	r2, [pc, #80]	@ (8005348 <OC4Config+0xd0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <OC4Config+0x8c>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a13      	ldr	r2, [pc, #76]	@ (800534c <OC4Config+0xd4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d107      	bne.n	8005314 <OC4Config+0x9c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	019b      	lsls	r3, r3, #6
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff fcee 	bl	8004d08 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3718      	adds	r7, #24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40013400 	.word	0x40013400
 8005344:	40014000 	.word	0x40014000
 8005348:	40014400 	.word	0x40014400
 800534c:	40014800 	.word	0x40014800

08005350 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005370:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	4313      	orrs	r3, r2
 8005382:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	041b      	lsls	r3, r3, #16
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	041b      	lsls	r3, r3, #16
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a17      	ldr	r2, [pc, #92]	@ (8005404 <OC5Config+0xb4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d00f      	beq.n	80053cc <OC5Config+0x7c>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a16      	ldr	r2, [pc, #88]	@ (8005408 <OC5Config+0xb8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00b      	beq.n	80053cc <OC5Config+0x7c>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a15      	ldr	r2, [pc, #84]	@ (800540c <OC5Config+0xbc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d007      	beq.n	80053cc <OC5Config+0x7c>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a14      	ldr	r2, [pc, #80]	@ (8005410 <OC5Config+0xc0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <OC5Config+0x7c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a13      	ldr	r2, [pc, #76]	@ (8005414 <OC5Config+0xc4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d109      	bne.n	80053e0 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	021b      	lsls	r3, r3, #8
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	4619      	mov	r1, r3
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff fc99 	bl	8004d24 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40013400 	.word	0x40013400
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400
 8005414:	40014800 	.word	0x40014800

08005418 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005438:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005440:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	6812      	ldr	r2, [r2, #0]
 8005448:	0212      	lsls	r2, r2, #8
 800544a:	4313      	orrs	r3, r2
 800544c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	051b      	lsls	r3, r3, #20
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	051b      	lsls	r3, r3, #20
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a16      	ldr	r2, [pc, #88]	@ (80054cc <OC6Config+0xb4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00f      	beq.n	8005496 <OC6Config+0x7e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a15      	ldr	r2, [pc, #84]	@ (80054d0 <OC6Config+0xb8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00b      	beq.n	8005496 <OC6Config+0x7e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a14      	ldr	r2, [pc, #80]	@ (80054d4 <OC6Config+0xbc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <OC6Config+0x7e>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a13      	ldr	r2, [pc, #76]	@ (80054d8 <OC6Config+0xc0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <OC6Config+0x7e>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a12      	ldr	r2, [pc, #72]	@ (80054dc <OC6Config+0xc4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d109      	bne.n	80054aa <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	029b      	lsls	r3, r3, #10
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	4619      	mov	r1, r3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff fc44 	bl	8004d44 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40012c00 	.word	0x40012c00
 80054d0:	40013400 	.word	0x40013400
 80054d4:	40014000 	.word	0x40014000
 80054d8:	40014400 	.word	0x40014400
 80054dc:	40014800 	.word	0x40014800

080054e0 <LL_USART_IsEnabled>:
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <LL_USART_IsEnabled+0x18>
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <LL_USART_IsEnabled+0x1a>
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <LL_USART_SetStopBitsLength>:
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	605a      	str	r2, [r3, #4]
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <LL_USART_SetHWFlowCtrl>:
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	609a      	str	r2, [r3, #8]
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <LL_USART_SetBaudRate>:
{
 8005552:	b480      	push	{r7}
 8005554:	b087      	sub	sp, #28
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005566:	d11a      	bne.n	800559e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	005a      	lsls	r2, r3, #1
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	085b      	lsrs	r3, r3, #1
 8005570:	441a      	add	r2, r3
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	b29b      	uxth	r3, r3
 800557a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8005582:	4013      	ands	r3, r2
 8005584:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	085b      	lsrs	r3, r3, #1
 800558a:	b29b      	uxth	r3, r3
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	60da      	str	r2, [r3, #12]
}
 800559c:	e00a      	b.n	80055b4 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	085a      	lsrs	r2, r3, #1
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	441a      	add	r2, r3
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	60da      	str	r2, [r3, #12]
}
 80055b4:	bf00      	nop
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7ff ff84 	bl	80054e0 <LL_USART_IsEnabled>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d15b      	bne.n	8005696 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b2f      	ldr	r3, [pc, #188]	@ (80056a0 <LL_USART_Init+0xe0>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	6851      	ldr	r1, [r2, #4]
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	68d2      	ldr	r2, [r2, #12]
 80055ee:	4311      	orrs	r1, r2
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	6912      	ldr	r2, [r2, #16]
 80055f4:	4311      	orrs	r1, r2
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	6992      	ldr	r2, [r2, #24]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff ff7c 	bl	8005506 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	4619      	mov	r1, r3
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff ff89 	bl	800552c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a21      	ldr	r2, [pc, #132]	@ (80056a4 <LL_USART_Init+0xe4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d104      	bne.n	800562c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8005622:	2003      	movs	r0, #3
 8005624:	f7fe fec4 	bl	80043b0 <LL_RCC_GetUSARTClockFreq>
 8005628:	60b8      	str	r0, [r7, #8]
 800562a:	e023      	b.n	8005674 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a1e      	ldr	r2, [pc, #120]	@ (80056a8 <LL_USART_Init+0xe8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d104      	bne.n	800563e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8005634:	200c      	movs	r0, #12
 8005636:	f7fe febb 	bl	80043b0 <LL_RCC_GetUSARTClockFreq>
 800563a:	60b8      	str	r0, [r7, #8]
 800563c:	e01a      	b.n	8005674 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a1a      	ldr	r2, [pc, #104]	@ (80056ac <LL_USART_Init+0xec>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d104      	bne.n	8005650 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8005646:	2030      	movs	r0, #48	@ 0x30
 8005648:	f7fe feb2 	bl	80043b0 <LL_RCC_GetUSARTClockFreq>
 800564c:	60b8      	str	r0, [r7, #8]
 800564e:	e011      	b.n	8005674 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a17      	ldr	r2, [pc, #92]	@ (80056b0 <LL_USART_Init+0xf0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d104      	bne.n	8005662 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8005658:	20c0      	movs	r0, #192	@ 0xc0
 800565a:	f7fe ff8b 	bl	8004574 <LL_RCC_GetUARTClockFreq>
 800565e:	60b8      	str	r0, [r7, #8]
 8005660:	e008      	b.n	8005674 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a13      	ldr	r2, [pc, #76]	@ (80056b4 <LL_USART_Init+0xf4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d104      	bne.n	8005674 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800566a:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800566e:	f7fe ff81 	bl	8004574 <LL_RCC_GetUARTClockFreq>
 8005672:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00d      	beq.n	8005696 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d009      	beq.n	8005696 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff ff5e 	bl	8005552 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005696:	7bfb      	ldrb	r3, [r7, #15]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	efff69f3 	.word	0xefff69f3
 80056a4:	40013800 	.word	0x40013800
 80056a8:	40004400 	.word	0x40004400
 80056ac:	40004800 	.word	0x40004800
 80056b0:	40004c00 	.word	0x40004c00
 80056b4:	40005000 	.word	0x40005000

080056b8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80056c0:	4a04      	ldr	r2, [pc, #16]	@ (80056d4 <LL_SetSystemCoreClock+0x1c>)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6013      	str	r3, [r2, #0]
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20000000 	.word	0x20000000

080056d8 <memset>:
 80056d8:	4402      	add	r2, r0
 80056da:	4603      	mov	r3, r0
 80056dc:	4293      	cmp	r3, r2
 80056de:	d100      	bne.n	80056e2 <memset+0xa>
 80056e0:	4770      	bx	lr
 80056e2:	f803 1b01 	strb.w	r1, [r3], #1
 80056e6:	e7f9      	b.n	80056dc <memset+0x4>

080056e8 <__libc_init_array>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005720 <__libc_init_array+0x38>)
 80056ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005724 <__libc_init_array+0x3c>)
 80056ee:	1b64      	subs	r4, r4, r5
 80056f0:	10a4      	asrs	r4, r4, #2
 80056f2:	2600      	movs	r6, #0
 80056f4:	42a6      	cmp	r6, r4
 80056f6:	d109      	bne.n	800570c <__libc_init_array+0x24>
 80056f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005728 <__libc_init_array+0x40>)
 80056fa:	4c0c      	ldr	r4, [pc, #48]	@ (800572c <__libc_init_array+0x44>)
 80056fc:	f000 f818 	bl	8005730 <_init>
 8005700:	1b64      	subs	r4, r4, r5
 8005702:	10a4      	asrs	r4, r4, #2
 8005704:	2600      	movs	r6, #0
 8005706:	42a6      	cmp	r6, r4
 8005708:	d105      	bne.n	8005716 <__libc_init_array+0x2e>
 800570a:	bd70      	pop	{r4, r5, r6, pc}
 800570c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005710:	4798      	blx	r3
 8005712:	3601      	adds	r6, #1
 8005714:	e7ee      	b.n	80056f4 <__libc_init_array+0xc>
 8005716:	f855 3b04 	ldr.w	r3, [r5], #4
 800571a:	4798      	blx	r3
 800571c:	3601      	adds	r6, #1
 800571e:	e7f2      	b.n	8005706 <__libc_init_array+0x1e>
 8005720:	080057b0 	.word	0x080057b0
 8005724:	080057b0 	.word	0x080057b0
 8005728:	080057b0 	.word	0x080057b0
 800572c:	080057b4 	.word	0x080057b4

08005730 <_init>:
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005732:	bf00      	nop
 8005734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005736:	bc08      	pop	{r3}
 8005738:	469e      	mov	lr, r3
 800573a:	4770      	bx	lr

0800573c <_fini>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	bf00      	nop
 8005740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005742:	bc08      	pop	{r3}
 8005744:	469e      	mov	lr, r3
 8005746:	4770      	bx	lr
