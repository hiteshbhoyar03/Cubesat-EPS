
EPS SRIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003388  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800351c  0800351c  0000451c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800356c  0800356c  00005004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800356c  0800356c  00005004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800356c  0800356c  00005004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800356c  0800356c  0000456c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003570  08003570  00004570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08003574  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000004  08003578  00005004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08003578  000050b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e79  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001564  00000000  00000000  0000cead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0000e418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000801  00000000  00000000  0000eed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df0a  00000000  00000000  0000f6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000077d0  00000000  00000000  0002d5db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a937b  00000000  00000000  00034dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de126  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d04  00000000  00000000  000de16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000e0e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003504 	.word	0x08003504

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08003504 	.word	0x08003504

080001d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f003 0307 	and.w	r3, r3, #7
 80001e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000218 <__NVIC_SetPriorityGrouping+0x44>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001ea:	68ba      	ldr	r2, [r7, #8]
 80001ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80001f0:	4013      	ands	r3, r2
 80001f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001f8:	68bb      	ldr	r3, [r7, #8]
 80001fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000206:	4a04      	ldr	r2, [pc, #16]	@ (8000218 <__NVIC_SetPriorityGrouping+0x44>)
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	60d3      	str	r3, [r2, #12]
}
 800020c:	bf00      	nop
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	e000ed00 	.word	0xe000ed00

0800021c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000220:	4b04      	ldr	r3, [pc, #16]	@ (8000234 <__NVIC_GetPriorityGrouping+0x18>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	0a1b      	lsrs	r3, r3, #8
 8000226:	f003 0307 	and.w	r3, r3, #7
}
 800022a:	4618      	mov	r0, r3
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00

08000238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000246:	2b00      	cmp	r3, #0
 8000248:	db0b      	blt.n	8000262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	f003 021f 	and.w	r2, r3, #31
 8000250:	4907      	ldr	r1, [pc, #28]	@ (8000270 <__NVIC_EnableIRQ+0x38>)
 8000252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000256:	095b      	lsrs	r3, r3, #5
 8000258:	2001      	movs	r0, #1
 800025a:	fa00 f202 	lsl.w	r2, r0, r2
 800025e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000e100 	.word	0xe000e100

08000274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	6039      	str	r1, [r7, #0]
 800027e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000284:	2b00      	cmp	r3, #0
 8000286:	db0a      	blt.n	800029e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	b2da      	uxtb	r2, r3
 800028c:	490c      	ldr	r1, [pc, #48]	@ (80002c0 <__NVIC_SetPriority+0x4c>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	0112      	lsls	r2, r2, #4
 8000294:	b2d2      	uxtb	r2, r2
 8000296:	440b      	add	r3, r1
 8000298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800029c:	e00a      	b.n	80002b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	4908      	ldr	r1, [pc, #32]	@ (80002c4 <__NVIC_SetPriority+0x50>)
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	f003 030f 	and.w	r3, r3, #15
 80002aa:	3b04      	subs	r3, #4
 80002ac:	0112      	lsls	r2, r2, #4
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	440b      	add	r3, r1
 80002b2:	761a      	strb	r2, [r3, #24]
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	e000e100 	.word	0xe000e100
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b089      	sub	sp, #36	@ 0x24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	f003 0307 	and.w	r3, r3, #7
 80002da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002dc:	69fb      	ldr	r3, [r7, #28]
 80002de:	f1c3 0307 	rsb	r3, r3, #7
 80002e2:	2b04      	cmp	r3, #4
 80002e4:	bf28      	it	cs
 80002e6:	2304      	movcs	r3, #4
 80002e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ea:	69fb      	ldr	r3, [r7, #28]
 80002ec:	3304      	adds	r3, #4
 80002ee:	2b06      	cmp	r3, #6
 80002f0:	d902      	bls.n	80002f8 <NVIC_EncodePriority+0x30>
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	3b03      	subs	r3, #3
 80002f6:	e000      	b.n	80002fa <NVIC_EncodePriority+0x32>
 80002f8:	2300      	movs	r3, #0
 80002fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000300:	69bb      	ldr	r3, [r7, #24]
 8000302:	fa02 f303 	lsl.w	r3, r2, r3
 8000306:	43da      	mvns	r2, r3
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	401a      	ands	r2, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000310:	f04f 31ff 	mov.w	r1, #4294967295
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	fa01 f303 	lsl.w	r3, r1, r3
 800031a:	43d9      	mvns	r1, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000320:	4313      	orrs	r3, r2
         );
}
 8000322:	4618      	mov	r0, r3
 8000324:	3724      	adds	r7, #36	@ 0x24
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <LL_ADC_DMA_GetRegAddr>:

  return data_reg_addr;
}
#else
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(const ADC_TypeDef *ADCx, uint32_t Register)
{
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(Register);

  /* Retrieve address of register DR */
  return (uint32_t) &(ADCx->DR);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3340      	adds	r3, #64	@ 0x40
}
 800033c:	4618      	mov	r0, r3
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	689b      	ldr	r3, [r3, #8]
 8000356:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	431a      	orrs	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	609a      	str	r2, [r3, #8]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800036e:	b480      	push	{r7}
 8000370:	b087      	sub	sp, #28
 8000372:	af00      	add	r7, sp, #0
 8000374:	60f8      	str	r0, [r7, #12]
 8000376:	60b9      	str	r1, [r7, #8]
 8000378:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3330      	adds	r3, #48	@ 0x30
 800037e:	461a      	mov	r2, r3
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	0a1b      	lsrs	r3, r3, #8
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	f003 030c 	and.w	r3, r3, #12
 800038a:	4413      	add	r3, r2
 800038c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	f003 031f 	and.w	r3, r3, #31
 8000398:	211f      	movs	r1, #31
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	43db      	mvns	r3, r3
 80003a0:	401a      	ands	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	0e9b      	lsrs	r3, r3, #26
 80003a6:	f003 011f 	and.w	r1, r3, #31
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	f003 031f 	and.w	r3, r3, #31
 80003b0:	fa01 f303 	lsl.w	r3, r1, r3
 80003b4:	431a      	orrs	r2, r3
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80003ba:	bf00      	nop
 80003bc:	371c      	adds	r7, #28
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b087      	sub	sp, #28
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	3314      	adds	r3, #20
 80003d6:	461a      	mov	r2, r3
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	0e5b      	lsrs	r3, r3, #25
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	f003 0304 	and.w	r3, r3, #4
 80003e2:	4413      	add	r3, r2
 80003e4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	0d1b      	lsrs	r3, r3, #20
 80003ee:	f003 031f 	and.w	r3, r3, #31
 80003f2:	2107      	movs	r1, #7
 80003f4:	fa01 f303 	lsl.w	r3, r1, r3
 80003f8:	43db      	mvns	r3, r3
 80003fa:	401a      	ands	r2, r3
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	0d1b      	lsrs	r3, r3, #20
 8000400:	f003 031f 	and.w	r3, r3, #31
 8000404:	6879      	ldr	r1, [r7, #4]
 8000406:	fa01 f303 	lsl.w	r3, r1, r3
 800040a:	431a      	orrs	r2, r3
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000410:	bf00      	nop
 8000412:	371c      	adds	r7, #28
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000434:	43db      	mvns	r3, r3
 8000436:	401a      	ands	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f003 0318 	and.w	r3, r3, #24
 800043e:	4908      	ldr	r1, [pc, #32]	@ (8000460 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000440:	40d9      	lsrs	r1, r3
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	400b      	ands	r3, r1
 8000446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800044a:	431a      	orrs	r2, r3
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000452:	bf00      	nop
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	0007ffff 	.word	0x0007ffff

08000464 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	691b      	ldr	r3, [r3, #16]
 8000472:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000476:	f023 0303 	bic.w	r3, r3, #3
 800047a:	683a      	ldr	r2, [r7, #0]
 800047c:	431a      	orrs	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	611a      	str	r2, [r3, #16]
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800049e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	6093      	str	r3, [r2, #8]
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr

080004b2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	689b      	ldr	r3, [r3, #8]
 80004be:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80004c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80004c6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80004da:	b480      	push	{r7}
 80004dc:	b083      	sub	sp, #12
 80004de:	af00      	add	r7, sp, #0
 80004e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	689b      	ldr	r3, [r3, #8]
 80004e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80004ea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80004ee:	f043 0201 	orr.w	r2, r3, #1
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000512:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000516:	f043 0204 	orr.w	r2, r3, #4
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
	...

0800052c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_EN);
 800053a:	4a0c      	ldr	r2, [pc, #48]	@ (800056c <LL_DMA_EnableChannel+0x40>)
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	4413      	add	r3, r2
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	461a      	mov	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4413      	add	r3, r2
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4908      	ldr	r1, [pc, #32]	@ (800056c <LL_DMA_EnableChannel+0x40>)
 800054c:	683a      	ldr	r2, [r7, #0]
 800054e:	440a      	add	r2, r1
 8000550:	7812      	ldrb	r2, [r2, #0]
 8000552:	4611      	mov	r1, r2
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	440a      	add	r2, r1
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6013      	str	r3, [r2, #0]
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	0800351c 	.word	0x0800351c

08000570 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000570:	b480      	push	{r7}
 8000572:	b087      	sub	sp, #28
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8000580:	4a0e      	ldr	r2, [pc, #56]	@ (80005bc <LL_DMA_SetDataTransferDirection+0x4c>)
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4413      	add	r3, r2
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	461a      	mov	r2, r3
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	4413      	add	r3, r2
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000594:	f023 0310 	bic.w	r3, r3, #16
 8000598:	4908      	ldr	r1, [pc, #32]	@ (80005bc <LL_DMA_SetDataTransferDirection+0x4c>)
 800059a:	68ba      	ldr	r2, [r7, #8]
 800059c:	440a      	add	r2, r1
 800059e:	7812      	ldrb	r2, [r2, #0]
 80005a0:	4611      	mov	r1, r2
 80005a2:	697a      	ldr	r2, [r7, #20]
 80005a4:	440a      	add	r2, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80005ae:	bf00      	nop
 80005b0:	371c      	adds	r7, #28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	0800351c 	.word	0x0800351c

080005c0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b087      	sub	sp, #28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80005d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000608 <LL_DMA_SetMode+0x48>)
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4413      	add	r3, r2
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	4413      	add	r3, r2
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f023 0220 	bic.w	r2, r3, #32
 80005e4:	4908      	ldr	r1, [pc, #32]	@ (8000608 <LL_DMA_SetMode+0x48>)
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	440b      	add	r3, r1
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	440b      	add	r3, r1
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	600b      	str	r3, [r1, #0]
             Mode);
}
 80005fa:	bf00      	nop
 80005fc:	371c      	adds	r7, #28
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	0800351c 	.word	0x0800351c

0800060c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800060c:	b480      	push	{r7}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 800061c:	4a0d      	ldr	r2, [pc, #52]	@ (8000654 <LL_DMA_SetPeriphIncMode+0x48>)
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	4413      	add	r3, r2
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000630:	4908      	ldr	r1, [pc, #32]	@ (8000654 <LL_DMA_SetPeriphIncMode+0x48>)
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	440b      	add	r3, r1
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	440b      	add	r3, r1
 800063e:	4619      	mov	r1, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4313      	orrs	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000646:	bf00      	nop
 8000648:	371c      	adds	r7, #28
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	0800351c 	.word	0x0800351c

08000658 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000658:	b480      	push	{r7}
 800065a:	b087      	sub	sp, #28
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8000668:	4a0d      	ldr	r2, [pc, #52]	@ (80006a0 <LL_DMA_SetMemoryIncMode+0x48>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	4413      	add	r3, r2
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800067c:	4908      	ldr	r1, [pc, #32]	@ (80006a0 <LL_DMA_SetMemoryIncMode+0x48>)
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	440b      	add	r3, r1
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	440b      	add	r3, r1
 800068a:	4619      	mov	r1, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4313      	orrs	r3, r2
 8000690:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000692:	bf00      	nop
 8000694:	371c      	adds	r7, #28
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	0800351c 	.word	0x0800351c

080006a4 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b087      	sub	sp, #28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80006b4:	4a0d      	ldr	r2, [pc, #52]	@ (80006ec <LL_DMA_SetPeriphSize+0x48>)
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	4413      	add	r3, r2
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	4413      	add	r3, r2
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80006c8:	4908      	ldr	r1, [pc, #32]	@ (80006ec <LL_DMA_SetPeriphSize+0x48>)
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	440b      	add	r3, r1
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	440b      	add	r3, r1
 80006d6:	4619      	mov	r1, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4313      	orrs	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80006de:	bf00      	nop
 80006e0:	371c      	adds	r7, #28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	0800351c 	.word	0x0800351c

080006f0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b087      	sub	sp, #28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8000700:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <LL_DMA_SetMemorySize+0x48>)
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	4413      	add	r3, r2
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000714:	4908      	ldr	r1, [pc, #32]	@ (8000738 <LL_DMA_SetMemorySize+0x48>)
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	440b      	add	r3, r1
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	440b      	add	r3, r1
 8000722:	4619      	mov	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4313      	orrs	r3, r2
 8000728:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800072a:	bf00      	nop
 800072c:	371c      	adds	r7, #28
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	0800351c 	.word	0x0800351c

0800073c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800073c:	b480      	push	{r7}
 800073e:	b087      	sub	sp, #28
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 800074c:	4a0d      	ldr	r2, [pc, #52]	@ (8000784 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	4413      	add	r3, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	4413      	add	r3, r2
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000760:	4908      	ldr	r1, [pc, #32]	@ (8000784 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	440b      	add	r3, r1
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	440b      	add	r3, r1
 800076e:	4619      	mov	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4313      	orrs	r3, r2
 8000774:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000776:	bf00      	nop
 8000778:	371c      	adds	r7, #28
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	0800351c 	.word	0x0800351c

08000788 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000788:	b480      	push	{r7}
 800078a:	b087      	sub	sp, #28
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 8000798:	4a0d      	ldr	r2, [pc, #52]	@ (80007d0 <LL_DMA_SetDataLength+0x48>)
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	4413      	add	r3, r2
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	0c1b      	lsrs	r3, r3, #16
 80007aa:	041b      	lsls	r3, r3, #16
 80007ac:	4908      	ldr	r1, [pc, #32]	@ (80007d0 <LL_DMA_SetDataLength+0x48>)
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	440a      	add	r2, r1
 80007b2:	7812      	ldrb	r2, [r2, #0]
 80007b4:	4611      	mov	r1, r2
 80007b6:	697a      	ldr	r2, [r7, #20]
 80007b8:	440a      	add	r2, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80007c2:	bf00      	nop
 80007c4:	371c      	adds	r7, #28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	0800351c 	.word	0x0800351c

080007d4 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	617b      	str	r3, [r7, #20]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80007e6:	6a3b      	ldr	r3, [r7, #32]
 80007e8:	2b10      	cmp	r3, #16
 80007ea:	d114      	bne.n	8000816 <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, SrcAddress);
 80007ec:	4a17      	ldr	r2, [pc, #92]	@ (800084c <LL_DMA_ConfigAddresses+0x78>)
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	4413      	add	r3, r2
 80007fa:	461a      	mov	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, DstAddress);
 8000800:	4a12      	ldr	r2, [pc, #72]	@ (800084c <LL_DMA_ConfigAddresses+0x78>)
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	4413      	add	r3, r2
 800080e:	461a      	mov	r2, r3
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
  }
}
 8000814:	e013      	b.n	800083e <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, SrcAddress);
 8000816:	4a0d      	ldr	r2, [pc, #52]	@ (800084c <LL_DMA_ConfigAddresses+0x78>)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	4413      	add	r3, r2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	4413      	add	r3, r2
 8000824:	461a      	mov	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, DstAddress);
 800082a:	4a08      	ldr	r2, [pc, #32]	@ (800084c <LL_DMA_ConfigAddresses+0x78>)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	4413      	add	r3, r2
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	4413      	add	r3, r2
 8000838:	461a      	mov	r2, r3
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	60d3      	str	r3, [r2, #12]
}
 800083e:	bf00      	nop
 8000840:	371c      	adds	r7, #28
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	0800351c 	.word	0x0800351c

08000850 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMA_REQUEST_6
  *         @arg @ref LL_DMA_REQUEST_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8000850:	b480      	push	{r7}
 8000852:	b089      	sub	sp, #36	@ 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Request_TypeDef *)((uint32_t)((uint32_t)DMAx + DMA_CSELR_OFFSET)))->CSELR,
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	33a8      	adds	r3, #168	@ 0xa8
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	f003 031c 	and.w	r3, r3, #28
 800086a:	210f      	movs	r1, #15
 800086c:	fa01 f303 	lsl.w	r3, r1, r3
 8000870:	43db      	mvns	r3, r3
 8000872:	401a      	ands	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	f003 031c 	and.w	r3, r3, #28
 800087c:	210f      	movs	r1, #15
 800087e:	fa01 f303 	lsl.w	r3, r1, r3
 8000882:	61bb      	str	r3, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	fa93 f3a3 	rbit	r3, r3
 800088a:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	61fb      	str	r3, [r7, #28]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d101      	bne.n	800089a <LL_DMA_SetPeriphRequest+0x4a>
  {
    return 32U;
 8000896:	2320      	movs	r3, #32
 8000898:	e003      	b.n	80008a2 <LL_DMA_SetPeriphRequest+0x52>
  }
  return __builtin_clz(value);
 800089a:	69fb      	ldr	r3, [r7, #28]
 800089c:	fab3 f383 	clz	r3, r3
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	408b      	lsls	r3, r1
 80008a8:	68f9      	ldr	r1, [r7, #12]
 80008aa:	31a8      	adds	r1, #168	@ 0xa8
 80008ac:	4313      	orrs	r3, r2
 80008ae:	600b      	str	r3, [r1, #0]
             DMA_CSELR_C1S << (((Channel) * 4U) & 0x1FU), PeriphRequest << DMA_POSITION_CSELR_CXS(Channel));
}
 80008b0:	bf00      	nop
 80008b2:	3724      	adds	r7, #36	@ 0x24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <LL_RCC_HSE_EnableCSS>:
  * @brief  Enable the Clock Security System.
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80008c0:	4b05      	ldr	r3, [pc, #20]	@ (80008d8 <LL_RCC_HSE_EnableCSS+0x1c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <LL_RCC_HSE_EnableCSS+0x1c>)
 80008c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008ca:	6013      	str	r3, [r2, #0]
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <LL_RCC_HSE_Enable+0x1c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a04      	ldr	r2, [pc, #16]	@ (80008f8 <LL_RCC_HSE_Enable+0x1c>)
 80008e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <LL_RCC_HSE_IsReady+0x24>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800090c:	d101      	bne.n	8000912 <LL_RCC_HSE_IsReady+0x16>
 800090e:	2301      	movs	r3, #1
 8000910:	e000      	b.n	8000914 <LL_RCC_HSE_IsReady+0x18>
 8000912:	2300      	movs	r3, #0
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <LL_RCC_LSE_Enable+0x20>)
 800092a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800092e:	4a05      	ldr	r2, [pc, #20]	@ (8000944 <LL_RCC_LSE_Enable+0x20>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000950:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000956:	f023 0218 	bic.w	r2, r3, #24
 800095a:	4905      	ldr	r1, [pc, #20]	@ (8000970 <LL_RCC_LSE_SetDriveCapability+0x28>)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4313      	orrs	r3, r2
 8000960:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	40021000 	.word	0x40021000

08000974 <LL_RCC_LSE_EnableCSS>:
  * @brief  Enable Clock security system on LSE.
  * @rmtoll BDCR         LSECSSON      LL_RCC_LSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableCSS(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <LL_RCC_LSE_EnableCSS+0x20>)
 800097a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800097e:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <LL_RCC_LSE_EnableCSS+0x20>)
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <LL_RCC_LSE_IsReady+0x24>)
 800099e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d101      	bne.n	80009ae <LL_RCC_LSE_IsReady+0x16>
 80009aa:	2301      	movs	r3, #1
 80009ac:	e000      	b.n	80009b0 <LL_RCC_LSE_IsReady+0x18>
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <LL_RCC_SetSysClkSource+0x24>)
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	f023 0203 	bic.w	r2, r3, #3
 80009d0:	4904      	ldr	r1, [pc, #16]	@ (80009e4 <LL_RCC_SetSysClkSource+0x24>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	608b      	str	r3, [r1, #8]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	40021000 	.word	0x40021000

080009e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80009ec:	4b04      	ldr	r3, [pc, #16]	@ (8000a00 <LL_RCC_GetSysClkSource+0x18>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f003 030c 	and.w	r3, r3, #12
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000

08000a04 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000a14:	4904      	ldr	r1, [pc, #16]	@ (8000a28 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	608b      	str	r3, [r1, #8]
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	40021000 	.word	0x40021000

08000a2c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000a3c:	4904      	ldr	r1, [pc, #16]	@ (8000a50 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	608b      	str	r3, [r1, #8]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	40021000 	.word	0x40021000

08000a54 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000a64:	4904      	ldr	r1, [pc, #16]	@ (8000a78 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	608b      	str	r3, [r1, #8]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	40021000 	.word	0x40021000

08000a7c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <LL_RCC_SetUSARTClockSource+0x30>)
 8000a86:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	0c1b      	lsrs	r3, r3, #16
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	401a      	ands	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	4905      	ldr	r1, [pc, #20]	@ (8000aac <LL_RCC_SetUSARTClockSource+0x30>)
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000

08000ab0 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8000ab8:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <LL_RCC_SetADCClockSource+0x28>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000abe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8000ac2:	4905      	ldr	r1, [pc, #20]	@ (8000ad8 <LL_RCC_SetADCClockSource+0x28>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	40021000 	.word	0x40021000

08000adc <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000ae4:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <LL_RCC_SetRTCClockSource+0x28>)
 8000ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000aea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000aee:	4905      	ldr	r1, [pc, #20]	@ (8000b04 <LL_RCC_SetRTCClockSource+0x28>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	40021000 	.word	0x40021000

08000b08 <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <LL_RCC_GetRTCClockSource+0x18>)
 8000b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000

08000b24 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <LL_RCC_EnableRTC+0x20>)
 8000b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b2e:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <LL_RCC_EnableRTC+0x20>)
 8000b30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40021000 	.word	0x40021000

08000b48 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <LL_RCC_ForceBackupDomainReset+0x20>)
 8000b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <LL_RCC_ForceBackupDomainReset+0x20>)
 8000b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000

08000b6c <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b76:	4a05      	ldr	r2, [pc, #20]	@ (8000b8c <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000b78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <LL_RCC_PLL_Enable+0x1c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <LL_RCC_PLL_Enable+0x1c>)
 8000b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000

08000bb0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000bb4:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <LL_RCC_PLL_IsReady+0x24>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000bc0:	d101      	bne.n	8000bc6 <LL_RCC_PLL_IsReady+0x16>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e000      	b.n	8000bc8 <LL_RCC_PLL_IsReady+0x18>
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000be8:	68da      	ldr	r2, [r3, #12]
 8000bea:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000bec:	4013      	ands	r3, r2
 8000bee:	68f9      	ldr	r1, [r7, #12]
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	4311      	orrs	r1, r2
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	0212      	lsls	r2, r2, #8
 8000bf8:	4311      	orrs	r1, r2
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	4904      	ldr	r1, [pc, #16]	@ (8000c10 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000c00:	4313      	orrs	r3, r2
 8000c02:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	40021000 	.word	0x40021000
 8000c14:	f9ff808c 	.word	0xf9ff808c

08000c18 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000c1c:	4b05      	ldr	r3, [pc, #20]	@ (8000c34 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	4a04      	ldr	r2, [pc, #16]	@ (8000c34 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000c22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <LL_RCC_PLLSAI1_Enable>:
  * @brief  Enable PLLSAI1
  * @rmtoll CR           PLLSAI1ON     LL_RCC_PLLSAI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_Enable(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <LL_RCC_PLLSAI1_Enable+0x1c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <LL_RCC_PLLSAI1_Enable+0x1c>)
 8000c42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40021000 	.word	0x40021000

08000c58 <LL_RCC_PLLSAI1_IsReady>:
  * @brief  Check if PLLSAI1 Ready
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8000c5c:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <LL_RCC_PLLSAI1_IsReady+0x24>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000c68:	d101      	bne.n	8000c6e <LL_RCC_PLLSAI1_IsReady+0x16>
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e000      	b.n	8000c70 <LL_RCC_PLLSAI1_IsReady+0x18>
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <LL_RCC_PLLSAI1_ConfigDomain_ADC>:
  *         @arg @ref LL_RCC_PLLSAI1R_DIV_6
  *         @arg @ref LL_RCC_PLLSAI1R_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_ConfigDomain_ADC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8000c96:	68f9      	ldr	r1, [r7, #12]
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	430b      	orrs	r3, r1
 8000c9c:	490a      	ldr	r1, [pc, #40]	@ (8000cc8 <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1R, PLLN << RCC_PLLSAI1CFGR_PLLSAI1N_Pos | PLLR);
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8000caa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	0211      	lsls	r1, r2, #8
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	4904      	ldr	r1, [pc, #16]	@ (8000cc8 <LL_RCC_PLLSAI1_ConfigDomain_ADC+0x48>)
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	610b      	str	r3, [r1, #16]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	40021000 	.word	0x40021000

08000ccc <LL_RCC_PLLSAI1_EnableDomain_ADC>:
  * @brief  Enable PLLSAI1 output mapped on ADC domain clock
  * @rmtoll PLLSAI1CFGR  PLLSAI1REN    LL_RCC_PLLSAI1_EnableDomain_ADC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI1_EnableDomain_ADC(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1REN);
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <LL_RCC_PLLSAI1_EnableDomain_ADC+0x1c>)
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <LL_RCC_PLLSAI1_EnableDomain_ADC+0x1c>)
 8000cd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cda:	6113      	str	r3, [r2, #16]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40021000 	.word	0x40021000

08000cec <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000cf4:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cf6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000cf8:	4907      	ldr	r1, [pc, #28]	@ (8000d18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4013      	ands	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	40021000 	.word	0x40021000

08000d1c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d28:	4907      	ldr	r1, [pc, #28]	@ (8000d48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4013      	ands	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	40021000 	.word	0x40021000

08000d4c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d54:	4b08      	ldr	r3, [pc, #32]	@ (8000d78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d56:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d58:	4907      	ldr	r1, [pc, #28]	@ (8000d78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d62:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4013      	ands	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	40021000 	.word	0x40021000

08000d7c <LL_APB1_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8000d84:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <LL_APB1_GRP1_IsEnabledClock+0x28>)
 8000d86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d101      	bne.n	8000d96 <LL_APB1_GRP1_IsEnabledClock+0x1a>
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <LL_APB1_GRP1_IsEnabledClock+0x1c>
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	40021000 	.word	0x40021000

08000da8 <LL_APB1_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <LL_APB1_GRP1_DisableClock+0x24>)
 8000db2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	4904      	ldr	r1, [pc, #16]	@ (8000dcc <LL_APB1_GRP1_DisableClock+0x24>)
 8000dba:	4013      	ands	r3, r2
 8000dbc:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000dd8:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dda:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ddc:	4907      	ldr	r1, [pc, #28]	@ (8000dfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000de4:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8000de6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4013      	ands	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	40021000 	.word	0x40021000

08000e00 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <LL_FLASH_SetLatency+0x24>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f023 0207 	bic.w	r2, r3, #7
 8000e10:	4904      	ldr	r1, [pc, #16]	@ (8000e24 <LL_FLASH_SetLatency+0x24>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	600b      	str	r3, [r1, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40022000 	.word	0x40022000

08000e28 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <LL_FLASH_GetLatency+0x18>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0307 	and.w	r3, r3, #7
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40022000 	.word	0x40022000

08000e44 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000e54:	4904      	ldr	r1, [pc, #16]	@ (8000e68 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	600b      	str	r3, [r1, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	40007000 	.word	0x40007000

08000e6c <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e70:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40007000 	.word	0x40007000

08000e8c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000e90:	4b07      	ldr	r3, [pc, #28]	@ (8000eb0 <LL_PWR_IsEnabledBkUpAccess+0x24>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e9c:	d101      	bne.n	8000ea2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40007000 	.word	0x40007000

08000eb4 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ec4:	d101      	bne.n	8000eca <LL_PWR_IsActiveFlag_VOS+0x16>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <LL_PWR_IsActiveFlag_VOS+0x18>
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40007000 	.word	0x40007000

08000edc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f043 0201 	orr.w	r2, r3, #1
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	601a      	str	r2, [r3, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	e853 3f00 	ldrex	r3, [r3]
 8000f3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	f043 0320 	orr.w	r3, r3, #32
 8000f42:	61fb      	str	r3, [r7, #28]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	61ba      	str	r2, [r7, #24]
 8000f4a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f4c:	6979      	ldr	r1, [r7, #20]
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	e841 2300 	strex	r3, r2, [r1]
 8000f54:	613b      	str	r3, [r7, #16]
   return(result);
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1e9      	bne.n	8000f30 <LL_USART_EnableIT_RXNE+0x8>
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3724      	adds	r7, #36	@ 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f7ff ff1e 	bl	8000dd0 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000f94:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000f98:	f7ff fed8 	bl	8000d4c <LL_APB1_GRP1_EnableClock>

	/* System interrupt init*/
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f7ff f919 	bl	80001d4 <__NVIC_SetPriorityGrouping>

	/* SysTick_IRQn interrupt configuration */
	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000fa2:	f7ff f93b 	bl	800021c <__NVIC_GetPriorityGrouping>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2200      	movs	r2, #0
 8000faa:	210f      	movs	r1, #15
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff f98b 	bl	80002c8 <NVIC_EncodePriority>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	f7ff f95b 	bl	8000274 <__NVIC_SetPriority>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fbe:	f000 f89f 	bl	8001100 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000fc2:	f000 f8f7 	bl	80011b4 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fc6:	f000 fbf1 	bl	80017ac <MX_GPIO_Init>
	MX_DMA_Init();
 8000fca:	f000 fbd7 	bl	800177c <MX_DMA_Init>
	MX_ADC1_Init();
 8000fce:	f000 f907 	bl	80011e0 <MX_ADC1_Init>
	MX_RTC_Init();
 8000fd2:	f000 fa29 	bl	8001428 <MX_RTC_Init>
	MX_USART1_UART_Init();
 8000fd6:	f000 faa3 	bl	8001520 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000fda:	f000 fb05 	bl	80015e8 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8000fde:	f000 fb67 	bl	80016b0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	LL_USART_EnableIT_RXNE(USART1);				// DEBUG
 8000fe2:	4837      	ldr	r0, [pc, #220]	@ (80010c0 <main+0x138>)
 8000fe4:	f7ff ffa0 	bl	8000f28 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_RXNE(USART2);				// Uart EPS-SR
 8000fe8:	4836      	ldr	r0, [pc, #216]	@ (80010c4 <main+0x13c>)
 8000fea:	f7ff ff9d 	bl	8000f28 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_RXNE(USART3);				// Uart OBC-SR
 8000fee:	4836      	ldr	r0, [pc, #216]	@ (80010c8 <main+0x140>)
 8000ff0:	f7ff ff9a 	bl	8000f28 <LL_USART_EnableIT_RXNE>

	LL_DMA_ConfigAddresses(DMA1,				// DMA ADC
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4835      	ldr	r0, [pc, #212]	@ (80010cc <main+0x144>)
 8000ff8:	f7ff f999 	bl	800032e <LL_ADC_DMA_GetRegAddr>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	4934      	ldr	r1, [pc, #208]	@ (80010d0 <main+0x148>)
 8001000:	2300      	movs	r3, #0
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	460b      	mov	r3, r1
 8001006:	2100      	movs	r1, #0
 8001008:	4832      	ldr	r0, [pc, #200]	@ (80010d4 <main+0x14c>)
 800100a:	f7ff fbe3 	bl	80007d4 <LL_DMA_ConfigAddresses>
			LL_DMA_CHANNEL_1,
			LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
			(uint32_t)adcVal,
			LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 6);			// configure DMA length
 800100e:	2206      	movs	r2, #6
 8001010:	2100      	movs	r1, #0
 8001012:	4830      	ldr	r0, [pc, #192]	@ (80010d4 <main+0x14c>)
 8001014:	f7ff fbb8 	bl	8000788 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);				// enable DMA stream
 8001018:	2100      	movs	r1, #0
 800101a:	482e      	ldr	r0, [pc, #184]	@ (80010d4 <main+0x14c>)
 800101c:	f7ff fa86 	bl	800052c <LL_DMA_EnableChannel>
	LL_ADC_Enable(ADC1);										// enable ADC
 8001020:	482a      	ldr	r0, [pc, #168]	@ (80010cc <main+0x144>)
 8001022:	f7ff fa5a 	bl	80004da <LL_ADC_Enable>
	LL_ADC_REG_StartConversion(ADC1);							// start conversion
 8001026:	4829      	ldr	r0, [pc, #164]	@ (80010cc <main+0x144>)
 8001028:	f7ff fa6b 	bl	8000502 <LL_ADC_REG_StartConversion>


	LL_GPIO_ResetOutputPin(nEN_EPS_3V3_SR_GPIO_Port,nEN_EPS_3V3_SR_Pin); // KEEP EPS ON
 800102c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001030:	4829      	ldr	r0, [pc, #164]	@ (80010d8 <main+0x150>)
 8001032:	f7ff ff9a 	bl	8000f6a <LL_GPIO_ResetOutputPin>

	sric_2_pmic_tx_buffer[0]=0xFE;								// HEADER SETUP
 8001036:	4b29      	ldr	r3, [pc, #164]	@ (80010dc <main+0x154>)
 8001038:	22fe      	movs	r2, #254	@ 0xfe
 800103a:	701a      	strb	r2, [r3, #0]
	sric_2_pmic_tx_buffer[1]=0X00;
 800103c:	4b27      	ldr	r3, [pc, #156]	@ (80010dc <main+0x154>)
 800103e:	2200      	movs	r2, #0
 8001040:	705a      	strb	r2, [r3, #1]
	sric_2_obc_tx_buffer[0]=0xFB;
 8001042:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <main+0x158>)
 8001044:	22fb      	movs	r2, #251	@ 0xfb
 8001046:	701a      	strb	r2, [r3, #0]
	sric_2_obc_tx_buffer[1]=0X00;
 8001048:	4b25      	ldr	r3, [pc, #148]	@ (80010e0 <main+0x158>)
 800104a:	2200      	movs	r2, #0
 800104c:	705a      	strb	r2, [r3, #1]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* DMA ---------------------------------------------------------------------------------------*/
		while(!flagDMATC);
 800104e:	bf00      	nop
 8001050:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <main+0x15c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0fb      	beq.n	8001050 <main+0xc8>
		// clear flag
		flagDMATC = 0;
 8001058:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <main+0x15c>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]

		/* UART PMIC_2_SRIC --------------------------------------------------------------------------*/
		if(pmic_2_sric_rx_complete_flag == 1)
 800105e:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <main+0x160>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d10c      	bne.n	8001080 <main+0xf8>
		{
			pmic_2_sric_rx_complete_flag = 0;
 8001066:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <main+0x160>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
			if(PMIC_2_SRIC_Check_CHKSUM(&pmic_2_sric_rx_buffer[0]) == 1){
 800106c:	481f      	ldr	r0, [pc, #124]	@ (80010ec <main+0x164>)
 800106e:	f000 fc3c 	bl	80018ea <PMIC_2_SRIC_Check_CHKSUM>
 8001072:	4603      	mov	r3, r0
 8001074:	2b01      	cmp	r3, #1
 8001076:	d103      	bne.n	8001080 <main+0xf8>
				PMIC_2_SRIC_Parsing(&pmic_2_sric_rx_buffer[0], &pm2sr);
 8001078:	491d      	ldr	r1, [pc, #116]	@ (80010f0 <main+0x168>)
 800107a:	481c      	ldr	r0, [pc, #112]	@ (80010ec <main+0x164>)
 800107c:	f000 fc66 	bl	800194c <PMIC_2_SRIC_Parsing>
			}
		}

		/* UART OBC_2_SRIC ---------------------------------------------------------------------------*/
		if(obc_2_sric_rx_complete_flag == 1)
 8001080:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <main+0x16c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d10c      	bne.n	80010a2 <main+0x11a>
		{
			obc_2_sric_rx_complete_flag = 0;
 8001088:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <main+0x16c>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
			if(OBC_2_SRIC_Check_CHKSUM(&obc_2_sric_rx_buffer[0]) == 1){
 800108e:	481a      	ldr	r0, [pc, #104]	@ (80010f8 <main+0x170>)
 8001090:	f000 fca7 	bl	80019e2 <OBC_2_SRIC_Check_CHKSUM>
 8001094:	4603      	mov	r3, r0
 8001096:	2b01      	cmp	r3, #1
 8001098:	d103      	bne.n	80010a2 <main+0x11a>
				OBC_2_SRIC_Parsing(&obc_2_sric_rx_buffer[0], &obc2sr);
 800109a:	4918      	ldr	r1, [pc, #96]	@ (80010fc <main+0x174>)
 800109c:	4816      	ldr	r0, [pc, #88]	@ (80010f8 <main+0x170>)
 800109e:	f000 fcd1 	bl	8001a44 <OBC_2_SRIC_Parsing>
			}
		}

		/* CONFIGURE SATELLITE POWER -----------------------------------------------------------------*/
		SRIC_CONFIG_SAT_POWER( &obc2sr,  &pm2sr );
 80010a2:	4913      	ldr	r1, [pc, #76]	@ (80010f0 <main+0x168>)
 80010a4:	4815      	ldr	r0, [pc, #84]	@ (80010fc <main+0x174>)
 80010a6:	f000 fd19 	bl	8001adc <SRIC_CONFIG_SAT_POWER>




		/* SEND DATA SRIC_2_PMIC ---------------------------------------------------------------------*/
		SEND_DATA_UART(&sric_2_pmic_tx_buffer[0], USART2, 20);// CONTAINS CHKSUM GENRATOR
 80010aa:	2214      	movs	r2, #20
 80010ac:	4905      	ldr	r1, [pc, #20]	@ (80010c4 <main+0x13c>)
 80010ae:	480b      	ldr	r0, [pc, #44]	@ (80010dc <main+0x154>)
 80010b0:	f000 fdf2 	bl	8001c98 <SEND_DATA_UART>
		/* SEND DATA SRIC_2_OBC ----------------------------------------------------------------------*/
		SEND_DATA_UART(&sric_2_obc_tx_buffer[0], USART3, 20);
 80010b4:	2214      	movs	r2, #20
 80010b6:	4904      	ldr	r1, [pc, #16]	@ (80010c8 <main+0x140>)
 80010b8:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <main+0x158>)
 80010ba:	f000 fded 	bl	8001c98 <SEND_DATA_UART>
		while(!flagDMATC);
 80010be:	e7c6      	b.n	800104e <main+0xc6>
 80010c0:	40013800 	.word	0x40013800
 80010c4:	40004400 	.word	0x40004400
 80010c8:	40004800 	.word	0x40004800
 80010cc:	50040000 	.word	0x50040000
 80010d0:	20000024 	.word	0x20000024
 80010d4:	40020000 	.word	0x40020000
 80010d8:	48000800 	.word	0x48000800
 80010dc:	20000030 	.word	0x20000030
 80010e0:	20000044 	.word	0x20000044
 80010e4:	20000020 	.word	0x20000020
 80010e8:	20000094 	.word	0x20000094
 80010ec:	20000080 	.word	0x20000080
 80010f0:	20000068 	.word	0x20000068
 80010f4:	200000ac 	.word	0x200000ac
 80010f8:	20000098 	.word	0x20000098
 80010fc:	20000058 	.word	0x20000058

08001100 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001104:	2003      	movs	r0, #3
 8001106:	f7ff fe7b 	bl	8000e00 <LL_FLASH_SetLatency>
	while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 800110a:	bf00      	nop
 800110c:	f7ff fe8c 	bl	8000e28 <LL_FLASH_GetLatency>
 8001110:	4603      	mov	r3, r0
 8001112:	2b03      	cmp	r3, #3
 8001114:	d1fa      	bne.n	800110c <SystemClock_Config+0xc>
	{
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001116:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800111a:	f7ff fe93 	bl	8000e44 <LL_PWR_SetRegulVoltageScaling>
	while (LL_PWR_IsActiveFlag_VOS() != 0)
 800111e:	bf00      	nop
 8001120:	f7ff fec8 	bl	8000eb4 <LL_PWR_IsActiveFlag_VOS>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1fa      	bne.n	8001120 <SystemClock_Config+0x20>
	{
	}
	LL_RCC_HSE_Enable();
 800112a:	f7ff fbd7 	bl	80008dc <LL_RCC_HSE_Enable>

	/* Wait till HSE is ready */
	while(LL_RCC_HSE_IsReady() != 1)
 800112e:	bf00      	nop
 8001130:	f7ff fbe4 	bl	80008fc <LL_RCC_HSE_IsReady>
 8001134:	4603      	mov	r3, r0
 8001136:	2b01      	cmp	r3, #1
 8001138:	d1fa      	bne.n	8001130 <SystemClock_Config+0x30>
	{

	}
	LL_PWR_EnableBkUpAccess();
 800113a:	f7ff fe97 	bl	8000e6c <LL_PWR_EnableBkUpAccess>
	LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff fc02 	bl	8000948 <LL_RCC_LSE_SetDriveCapability>
	LL_RCC_LSE_Enable();
 8001144:	f7ff fbee 	bl	8000924 <LL_RCC_LSE_Enable>

	/* Wait till LSE is ready */
	while(LL_RCC_LSE_IsReady() != 1)
 8001148:	bf00      	nop
 800114a:	f7ff fc25 	bl	8000998 <LL_RCC_LSE_IsReady>
 800114e:	4603      	mov	r3, r0
 8001150:	2b01      	cmp	r3, #1
 8001152:	d1fa      	bne.n	800114a <SystemClock_Config+0x4a>
	{

	}
	LL_RCC_HSE_EnableCSS();
 8001154:	f7ff fbb2 	bl	80008bc <LL_RCC_HSE_EnableCSS>
	LL_RCC_LSE_EnableCSS();
 8001158:	f7ff fc0c 	bl	8000974 <LL_RCC_LSE_EnableCSS>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 800115c:	2300      	movs	r3, #0
 800115e:	2208      	movs	r2, #8
 8001160:	2100      	movs	r1, #0
 8001162:	2003      	movs	r0, #3
 8001164:	f7ff fd38 	bl	8000bd8 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_EnableDomain_SYS();
 8001168:	f7ff fd56 	bl	8000c18 <LL_RCC_PLL_EnableDomain_SYS>
	LL_RCC_PLL_Enable();
 800116c:	f7ff fd10 	bl	8000b90 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1)
 8001170:	bf00      	nop
 8001172:	f7ff fd1d 	bl	8000bb0 <LL_RCC_PLL_IsReady>
 8001176:	4603      	mov	r3, r0
 8001178:	2b01      	cmp	r3, #1
 800117a:	d1fa      	bne.n	8001172 <SystemClock_Config+0x72>
	{

	}
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800117c:	2003      	movs	r0, #3
 800117e:	f7ff fc1f 	bl	80009c0 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001182:	bf00      	nop
 8001184:	f7ff fc30 	bl	80009e8 <LL_RCC_GetSysClkSource>
 8001188:	4603      	mov	r3, r0
 800118a:	2b0c      	cmp	r3, #12
 800118c:	d1fa      	bne.n	8001184 <SystemClock_Config+0x84>
	{

	}
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800118e:	2000      	movs	r0, #0
 8001190:	f7ff fc38 	bl	8000a04 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff fc49 	bl	8000a2c <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff fc5a 	bl	8000a54 <LL_RCC_SetAPB2Prescaler>

	LL_Init1msTick(64000000);
 80011a0:	4803      	ldr	r0, [pc, #12]	@ (80011b0 <SystemClock_Config+0xb0>)
 80011a2:	f002 f96d 	bl	8003480 <LL_Init1msTick>

	LL_SetSystemCoreClock(64000000);
 80011a6:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <SystemClock_Config+0xb0>)
 80011a8:	f002 f978 	bl	800349c <LL_SetSystemCoreClock>
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	03d09000 	.word	0x03d09000

080011b4 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	LL_RCC_PLLSAI1_ConfigDomain_ADC(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLSAI1R_DIV_2);
 80011b8:	2300      	movs	r3, #0
 80011ba:	2208      	movs	r2, #8
 80011bc:	2100      	movs	r1, #0
 80011be:	2003      	movs	r0, #3
 80011c0:	f7ff fd5e 	bl	8000c80 <LL_RCC_PLLSAI1_ConfigDomain_ADC>
	LL_RCC_PLLSAI1_EnableDomain_ADC();
 80011c4:	f7ff fd82 	bl	8000ccc <LL_RCC_PLLSAI1_EnableDomain_ADC>
	LL_RCC_PLLSAI1_Enable();
 80011c8:	f7ff fd36 	bl	8000c38 <LL_RCC_PLLSAI1_Enable>

	/* Wait till PLLSAI1 is ready */
	while(LL_RCC_PLLSAI1_IsReady() != 1)
 80011cc:	bf00      	nop
 80011ce:	f7ff fd43 	bl	8000c58 <LL_RCC_PLLSAI1_IsReady>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d1fa      	bne.n	80011ce <PeriphCommonClock_Config+0x1a>
	{

	}
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b092      	sub	sp, #72	@ 0x48
 80011e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80011e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
	LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80011f2:	f107 0320 	add.w	r3, r7, #32
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]
 8001202:	615a      	str	r2, [r3, #20]
	LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
 8001216:	615a      	str	r2, [r3, #20]

	LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLLSAI1);
 8001218:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800121c:	f7ff fc48 	bl	8000ab0 <LL_RCC_SetADCClockSource>

	/* Peripheral clock enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC);
 8001220:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001224:	f7ff fd7a 	bl	8000d1c <LL_AHB2_GRP1_EnableClock>

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001228:	2001      	movs	r0, #1
 800122a:	f7ff fd77 	bl	8000d1c <LL_AHB2_GRP1_EnableClock>
  PA0   ------> ADC1_IN5
  PA1   ------> ADC1_IN6
  PA4   ------> ADC1_IN9
  PA5   ------> ADC1_IN10
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800122e:	2333      	movs	r3, #51	@ 0x33
 8001230:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001232:	2303      	movs	r3, #3
 8001234:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001242:	f001 f932 	bl	80024aa <LL_GPIO_Init>

	/* ADC1 DMA Init */

	/* ADC1 Init */
	LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMA_REQUEST_0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	486b      	ldr	r0, [pc, #428]	@ (80013f8 <MX_ADC1_Init+0x218>)
 800124c:	f7ff fb00 	bl	8000850 <LL_DMA_SetPeriphRequest>

	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	4868      	ldr	r0, [pc, #416]	@ (80013f8 <MX_ADC1_Init+0x218>)
 8001256:	f7ff f98b 	bl	8000570 <LL_DMA_SetDataTransferDirection>

	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_MEDIUM);
 800125a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800125e:	2100      	movs	r1, #0
 8001260:	4865      	ldr	r0, [pc, #404]	@ (80013f8 <MX_ADC1_Init+0x218>)
 8001262:	f7ff fa6b 	bl	800073c <LL_DMA_SetChannelPriorityLevel>

	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	4863      	ldr	r0, [pc, #396]	@ (80013f8 <MX_ADC1_Init+0x218>)
 800126c:	f7ff f9a8 	bl	80005c0 <LL_DMA_SetMode>

	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	4860      	ldr	r0, [pc, #384]	@ (80013f8 <MX_ADC1_Init+0x218>)
 8001276:	f7ff f9c9 	bl	800060c <LL_DMA_SetPeriphIncMode>

	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 800127a:	2280      	movs	r2, #128	@ 0x80
 800127c:	2100      	movs	r1, #0
 800127e:	485e      	ldr	r0, [pc, #376]	@ (80013f8 <MX_ADC1_Init+0x218>)
 8001280:	f7ff f9ea 	bl	8000658 <LL_DMA_SetMemoryIncMode>

	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8001284:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001288:	2100      	movs	r1, #0
 800128a:	485b      	ldr	r0, [pc, #364]	@ (80013f8 <MX_ADC1_Init+0x218>)
 800128c:	f7ff fa0a 	bl	80006a4 <LL_DMA_SetPeriphSize>

	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8001290:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001294:	2100      	movs	r1, #0
 8001296:	4858      	ldr	r0, [pc, #352]	@ (80013f8 <MX_ADC1_Init+0x218>)
 8001298:	f7ff fa2a 	bl	80006f0 <LL_DMA_SetMemorySize>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800129c:	2300      	movs	r3, #0
 800129e:	63bb      	str	r3, [r7, #56]	@ 0x38
	ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	643b      	str	r3, [r7, #64]	@ 0x40
	LL_ADC_Init(ADC1, &ADC_InitStruct);
 80012a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012ac:	4619      	mov	r1, r3
 80012ae:	4853      	ldr	r0, [pc, #332]	@ (80013fc <MX_ADC1_Init+0x21c>)
 80012b0:	f000 ff40 	bl	8002134 <LL_ADC_Init>
	ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
	ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS;
 80012b8:	2305      	movs	r3, #5
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
	ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28
	ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80012c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80012c6:	2303      	movs	r3, #3
 80012c8:	633b      	str	r3, [r7, #48]	@ 0x30
	ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80012ca:	2300      	movs	r3, #0
 80012cc:	637b      	str	r3, [r7, #52]	@ 0x34
	LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80012ce:	f107 0320 	add.w	r3, r7, #32
 80012d2:	4619      	mov	r1, r3
 80012d4:	4849      	ldr	r0, [pc, #292]	@ (80013fc <MX_ADC1_Init+0x21c>)
 80012d6:	f000 ff53 	bl	8002180 <LL_ADC_REG_Init>
	LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80012da:	2100      	movs	r1, #0
 80012dc:	4847      	ldr	r0, [pc, #284]	@ (80013fc <MX_ADC1_Init+0x21c>)
 80012de:	f7ff f8c1 	bl	8000464 <LL_ADC_SetOverSamplingScope>
	LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_PATH_INTERNAL_VREFINT|LL_ADC_PATH_INTERNAL_VBAT);
 80012e2:	f04f 71a0 	mov.w	r1, #20971520	@ 0x1400000
 80012e6:	4846      	ldr	r0, [pc, #280]	@ (8001400 <MX_ADC1_Init+0x220>)
 80012e8:	f7ff f82e 	bl	8000348 <LL_ADC_SetCommonPathInternalCh>
	ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
	LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	4842      	ldr	r0, [pc, #264]	@ (8001400 <MX_ADC1_Init+0x220>)
 80012f8:	f000 fefe 	bl	80020f8 <LL_ADC_CommonInit>

	/* Disable ADC deep power down (enabled by default after reset state) */
	LL_ADC_DisableDeepPowerDown(ADC1);
 80012fc:	483f      	ldr	r0, [pc, #252]	@ (80013fc <MX_ADC1_Init+0x21c>)
 80012fe:	f7ff f8c6 	bl	800048e <LL_ADC_DisableDeepPowerDown>
	/* Enable ADC internal voltage regulator */
	LL_ADC_EnableInternalRegulator(ADC1);
 8001302:	483e      	ldr	r0, [pc, #248]	@ (80013fc <MX_ADC1_Init+0x21c>)
 8001304:	f7ff f8d5 	bl	80004b2 <LL_ADC_EnableInternalRegulator>
	/* Note: Variable divided by 2 to compensate partially */
	/* CPU processing cycles (depends on compilation optimization). */
	/* Note: If system core clock frequency is below 200kHz, wait time */
	/* is only a few CPU processing cycles. */
	uint32_t wait_loop_index;
	wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001308:	4b3e      	ldr	r3, [pc, #248]	@ (8001404 <MX_ADC1_Init+0x224>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	099b      	lsrs	r3, r3, #6
 800130e:	4a3e      	ldr	r2, [pc, #248]	@ (8001408 <MX_ADC1_Init+0x228>)
 8001310:	fba2 2303 	umull	r2, r3, r2, r3
 8001314:	099a      	lsrs	r2, r3, #6
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	461a      	mov	r2, r3
 8001320:	4b3a      	ldr	r3, [pc, #232]	@ (800140c <MX_ADC1_Init+0x22c>)
 8001322:	fba3 2302 	umull	r2, r3, r3, r2
 8001326:	08db      	lsrs	r3, r3, #3
 8001328:	647b      	str	r3, [r7, #68]	@ 0x44
	while(wait_loop_index != 0)
 800132a:	e002      	b.n	8001332 <MX_ADC1_Init+0x152>
	{
		wait_loop_index--;
 800132c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800132e:	3b01      	subs	r3, #1
 8001330:	647b      	str	r3, [r7, #68]	@ 0x44
	while(wait_loop_index != 0)
 8001332:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f9      	bne.n	800132c <MX_ADC1_Init+0x14c>
	}

	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_5);
 8001338:	4a35      	ldr	r2, [pc, #212]	@ (8001410 <MX_ADC1_Init+0x230>)
 800133a:	2106      	movs	r1, #6
 800133c:	482f      	ldr	r0, [pc, #188]	@ (80013fc <MX_ADC1_Init+0x21c>)
 800133e:	f7ff f816 	bl	800036e <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001342:	2206      	movs	r2, #6
 8001344:	4932      	ldr	r1, [pc, #200]	@ (8001410 <MX_ADC1_Init+0x230>)
 8001346:	482d      	ldr	r0, [pc, #180]	@ (80013fc <MX_ADC1_Init+0x21c>)
 8001348:	f7ff f83d 	bl	80003c6 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_5, LL_ADC_SINGLE_ENDED);
 800134c:	227f      	movs	r2, #127	@ 0x7f
 800134e:	4930      	ldr	r1, [pc, #192]	@ (8001410 <MX_ADC1_Init+0x230>)
 8001350:	482a      	ldr	r0, [pc, #168]	@ (80013fc <MX_ADC1_Init+0x21c>)
 8001352:	f7ff f863 	bl	800041c <LL_ADC_SetChannelSingleDiff>

	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_6);
 8001356:	4a2f      	ldr	r2, [pc, #188]	@ (8001414 <MX_ADC1_Init+0x234>)
 8001358:	210c      	movs	r1, #12
 800135a:	4828      	ldr	r0, [pc, #160]	@ (80013fc <MX_ADC1_Init+0x21c>)
 800135c:	f7ff f807 	bl	800036e <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 8001360:	2206      	movs	r2, #6
 8001362:	492c      	ldr	r1, [pc, #176]	@ (8001414 <MX_ADC1_Init+0x234>)
 8001364:	4825      	ldr	r0, [pc, #148]	@ (80013fc <MX_ADC1_Init+0x21c>)
 8001366:	f7ff f82e 	bl	80003c6 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SINGLE_ENDED);
 800136a:	227f      	movs	r2, #127	@ 0x7f
 800136c:	4929      	ldr	r1, [pc, #164]	@ (8001414 <MX_ADC1_Init+0x234>)
 800136e:	4823      	ldr	r0, [pc, #140]	@ (80013fc <MX_ADC1_Init+0x21c>)
 8001370:	f7ff f854 	bl	800041c <LL_ADC_SetChannelSingleDiff>

	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_3, LL_ADC_CHANNEL_9);
 8001374:	4a28      	ldr	r2, [pc, #160]	@ (8001418 <MX_ADC1_Init+0x238>)
 8001376:	2112      	movs	r1, #18
 8001378:	4820      	ldr	r0, [pc, #128]	@ (80013fc <MX_ADC1_Init+0x21c>)
 800137a:	f7fe fff8 	bl	800036e <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 800137e:	2206      	movs	r2, #6
 8001380:	4925      	ldr	r1, [pc, #148]	@ (8001418 <MX_ADC1_Init+0x238>)
 8001382:	481e      	ldr	r0, [pc, #120]	@ (80013fc <MX_ADC1_Init+0x21c>)
 8001384:	f7ff f81f 	bl	80003c6 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_9, LL_ADC_SINGLE_ENDED);
 8001388:	227f      	movs	r2, #127	@ 0x7f
 800138a:	4923      	ldr	r1, [pc, #140]	@ (8001418 <MX_ADC1_Init+0x238>)
 800138c:	481b      	ldr	r0, [pc, #108]	@ (80013fc <MX_ADC1_Init+0x21c>)
 800138e:	f7ff f845 	bl	800041c <LL_ADC_SetChannelSingleDiff>

	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_10);
 8001392:	4a22      	ldr	r2, [pc, #136]	@ (800141c <MX_ADC1_Init+0x23c>)
 8001394:	2118      	movs	r1, #24
 8001396:	4819      	ldr	r0, [pc, #100]	@ (80013fc <MX_ADC1_Init+0x21c>)
 8001398:	f7fe ffe9 	bl	800036e <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 800139c:	2206      	movs	r2, #6
 800139e:	491f      	ldr	r1, [pc, #124]	@ (800141c <MX_ADC1_Init+0x23c>)
 80013a0:	4816      	ldr	r0, [pc, #88]	@ (80013fc <MX_ADC1_Init+0x21c>)
 80013a2:	f7ff f810 	bl	80003c6 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_10, LL_ADC_SINGLE_ENDED);
 80013a6:	227f      	movs	r2, #127	@ 0x7f
 80013a8:	491c      	ldr	r1, [pc, #112]	@ (800141c <MX_ADC1_Init+0x23c>)
 80013aa:	4814      	ldr	r0, [pc, #80]	@ (80013fc <MX_ADC1_Init+0x21c>)
 80013ac:	f7ff f836 	bl	800041c <LL_ADC_SetChannelSingleDiff>

	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_5, LL_ADC_CHANNEL_VBAT);
 80013b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001420 <MX_ADC1_Init+0x240>)
 80013b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013b6:	4811      	ldr	r0, [pc, #68]	@ (80013fc <MX_ADC1_Init+0x21c>)
 80013b8:	f7fe ffd9 	bl	800036e <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VBAT, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 80013bc:	2206      	movs	r2, #6
 80013be:	4918      	ldr	r1, [pc, #96]	@ (8001420 <MX_ADC1_Init+0x240>)
 80013c0:	480e      	ldr	r0, [pc, #56]	@ (80013fc <MX_ADC1_Init+0x21c>)
 80013c2:	f7ff f800 	bl	80003c6 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_VBAT, LL_ADC_SINGLE_ENDED);
 80013c6:	227f      	movs	r2, #127	@ 0x7f
 80013c8:	4915      	ldr	r1, [pc, #84]	@ (8001420 <MX_ADC1_Init+0x240>)
 80013ca:	480c      	ldr	r0, [pc, #48]	@ (80013fc <MX_ADC1_Init+0x21c>)
 80013cc:	f7ff f826 	bl	800041c <LL_ADC_SetChannelSingleDiff>

	/** Configure Regular Channel
	 */
	LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_6, LL_ADC_CHANNEL_VREFINT);
 80013d0:	4a14      	ldr	r2, [pc, #80]	@ (8001424 <MX_ADC1_Init+0x244>)
 80013d2:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80013d6:	4809      	ldr	r0, [pc, #36]	@ (80013fc <MX_ADC1_Init+0x21c>)
 80013d8:	f7fe ffc9 	bl	800036e <LL_ADC_REG_SetSequencerRanks>
	LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 80013dc:	2206      	movs	r2, #6
 80013de:	4911      	ldr	r1, [pc, #68]	@ (8001424 <MX_ADC1_Init+0x244>)
 80013e0:	4806      	ldr	r0, [pc, #24]	@ (80013fc <MX_ADC1_Init+0x21c>)
 80013e2:	f7fe fff0 	bl	80003c6 <LL_ADC_SetChannelSamplingTime>
	LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_VREFINT, LL_ADC_SINGLE_ENDED);
 80013e6:	227f      	movs	r2, #127	@ 0x7f
 80013e8:	490e      	ldr	r1, [pc, #56]	@ (8001424 <MX_ADC1_Init+0x244>)
 80013ea:	4804      	ldr	r0, [pc, #16]	@ (80013fc <MX_ADC1_Init+0x21c>)
 80013ec:	f7ff f816 	bl	800041c <LL_ADC_SetChannelSingleDiff>
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	3748      	adds	r7, #72	@ 0x48
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40020000 	.word	0x40020000
 80013fc:	50040000 	.word	0x50040000
 8001400:	50040300 	.word	0x50040300
 8001404:	20000000 	.word	0x20000000
 8001408:	053e2d63 	.word	0x053e2d63
 800140c:	cccccccd 	.word	0xcccccccd
 8001410:	14f00020 	.word	0x14f00020
 8001414:	19200040 	.word	0x19200040
 8001418:	25b00200 	.word	0x25b00200
 800141c:	2a000400 	.word	0x2a000400
 8001420:	cb840000 	.word	0xcb840000
 8001424:	80000001 	.word	0x80000001

08001428 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	LL_RTC_InitTypeDef RTC_InitStruct = {0};
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
	LL_RTC_TimeTypeDef RTC_TimeStruct = {0};
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
	LL_RTC_DateTypeDef RTC_DateStruct = {0};
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]

	if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 8001448:	f7ff fb5e 	bl	8000b08 <LL_RCC_GetRTCClockSource>
 800144c:	4603      	mov	r3, r0
 800144e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001452:	d035      	beq.n	80014c0 <MX_RTC_Init+0x98>
	{
		FlagStatus pwrclkchanged = RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	77fb      	strb	r3, [r7, #31]
		/* Update LSE configuration in Backup Domain control register */
		/* Requires to enable write access to Backup Domain if necessary */
		if (LL_APB1_GRP1_IsEnabledClock (LL_APB1_GRP1_PERIPH_PWR) != 1U)
 8001458:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800145c:	f7ff fc8e 	bl	8000d7c <LL_APB1_GRP1_IsEnabledClock>
 8001460:	4603      	mov	r3, r0
 8001462:	2b01      	cmp	r3, #1
 8001464:	d005      	beq.n	8001472 <MX_RTC_Init+0x4a>
		{
			/* Enables the PWR Clock and Enables access to the backup domain */
			LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001466:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800146a:	f7ff fc6f 	bl	8000d4c <LL_APB1_GRP1_EnableClock>
			pwrclkchanged = SET;
 800146e:	2301      	movs	r3, #1
 8001470:	77fb      	strb	r3, [r7, #31]
		}
		if (LL_PWR_IsEnabledBkUpAccess () != 1U)
 8001472:	f7ff fd0b 	bl	8000e8c <LL_PWR_IsEnabledBkUpAccess>
 8001476:	4603      	mov	r3, r0
 8001478:	2b01      	cmp	r3, #1
 800147a:	d007      	beq.n	800148c <MX_RTC_Init+0x64>
		{
			/* Enable write access to Backup domain */
			LL_PWR_EnableBkUpAccess();
 800147c:	f7ff fcf6 	bl	8000e6c <LL_PWR_EnableBkUpAccess>
			while (LL_PWR_IsEnabledBkUpAccess () == 0U)
 8001480:	bf00      	nop
 8001482:	f7ff fd03 	bl	8000e8c <LL_PWR_IsEnabledBkUpAccess>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0fa      	beq.n	8001482 <MX_RTC_Init+0x5a>
			{
			}
		}
		LL_RCC_ForceBackupDomainReset();
 800148c:	f7ff fb5c 	bl	8000b48 <LL_RCC_ForceBackupDomainReset>
		LL_RCC_ReleaseBackupDomainReset();
 8001490:	f7ff fb6c 	bl	8000b6c <LL_RCC_ReleaseBackupDomainReset>
		LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8001494:	2000      	movs	r0, #0
 8001496:	f7ff fa57 	bl	8000948 <LL_RCC_LSE_SetDriveCapability>
		LL_RCC_LSE_Enable();
 800149a:	f7ff fa43 	bl	8000924 <LL_RCC_LSE_Enable>

		/* Wait till LSE is ready */
		while(LL_RCC_LSE_IsReady() != 1)
 800149e:	bf00      	nop
 80014a0:	f7ff fa7a 	bl	8000998 <LL_RCC_LSE_IsReady>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d1fa      	bne.n	80014a0 <MX_RTC_Init+0x78>
		{
		}
		LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 80014aa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80014ae:	f7ff fb15 	bl	8000adc <LL_RCC_SetRTCClockSource>
		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET)
 80014b2:	7ffb      	ldrb	r3, [r7, #31]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d103      	bne.n	80014c0 <MX_RTC_Init+0x98>
		{
			LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_PWR);
 80014b8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80014bc:	f7ff fc74 	bl	8000da8 <LL_APB1_GRP1_DisableClock>
		}
	}

	/* Peripheral clock enable */
	LL_RCC_EnableRTC();
 80014c0:	f7ff fb30 	bl	8000b24 <LL_RCC_EnableRTC>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC and set the Time and Date
	 */
	RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
	RTC_InitStruct.AsynchPrescaler = 127;
 80014c8:	237f      	movs	r3, #127	@ 0x7f
 80014ca:	617b      	str	r3, [r7, #20]
	RTC_InitStruct.SynchPrescaler = 255;
 80014cc:	23ff      	movs	r3, #255	@ 0xff
 80014ce:	61bb      	str	r3, [r7, #24]
	LL_RTC_Init(RTC, &RTC_InitStruct);
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	4619      	mov	r1, r3
 80014d6:	4811      	ldr	r0, [pc, #68]	@ (800151c <MX_RTC_Init+0xf4>)
 80014d8:	f001 fcfe 	bl	8002ed8 <LL_RTC_Init>

	/** Initialize RTC and set the Time and Date
	 */
	RTC_TimeStruct.Hours = 0x0;
 80014dc:	2300      	movs	r3, #0
 80014de:	733b      	strb	r3, [r7, #12]
	RTC_TimeStruct.Minutes = 0x0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	737b      	strb	r3, [r7, #13]
	RTC_TimeStruct.Seconds = 0x0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73bb      	strb	r3, [r7, #14]

	LL_RTC_TIME_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_TimeStruct);
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	461a      	mov	r2, r3
 80014ee:	2101      	movs	r1, #1
 80014f0:	480a      	ldr	r0, [pc, #40]	@ (800151c <MX_RTC_Init+0xf4>)
 80014f2:	f001 fd21 	bl	8002f38 <LL_RTC_TIME_Init>
	RTC_DateStruct.WeekDay = LL_RTC_WEEKDAY_THURSDAY;
 80014f6:	2304      	movs	r3, #4
 80014f8:	713b      	strb	r3, [r7, #4]
	RTC_DateStruct.Month = LL_RTC_MONTH_JUNE;
 80014fa:	2306      	movs	r3, #6
 80014fc:	717b      	strb	r3, [r7, #5]
	RTC_DateStruct.Day = 0x12;
 80014fe:	2312      	movs	r3, #18
 8001500:	71bb      	strb	r3, [r7, #6]
	RTC_DateStruct.Year = 0x25;
 8001502:	2325      	movs	r3, #37	@ 0x25
 8001504:	71fb      	strb	r3, [r7, #7]

	LL_RTC_DATE_Init(RTC, LL_RTC_FORMAT_BCD, &RTC_DateStruct);
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	461a      	mov	r2, r3
 800150a:	2101      	movs	r1, #1
 800150c:	4803      	ldr	r0, [pc, #12]	@ (800151c <MX_RTC_Init+0xf4>)
 800150e:	f001 fdb9 	bl	8003084 <LL_RTC_DATE_Init>
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40002800 	.word	0x40002800

08001520 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08e      	sub	sp, #56	@ 0x38
 8001524:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART1_Init 0 */

	/* USER CODE END USART1_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = {0};
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	615a      	str	r2, [r3, #20]
 8001538:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	615a      	str	r2, [r3, #20]

	LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 800154a:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 800154e:	f7ff fa95 	bl	8000a7c <LL_RCC_SetUSARTClockSource>

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001552:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001556:	f7ff fc3b 	bl	8000dd0 <LL_APB2_GRP1_EnableClock>

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff fbde 	bl	8000d1c <LL_AHB2_GRP1_EnableClock>
	/**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001560:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001564:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001566:	2302      	movs	r3, #2
 8001568:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001576:	2307      	movs	r3, #7
 8001578:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001582:	f000 ff92 	bl	80024aa <LL_GPIO_Init>

	/* USART1 interrupt Init */
	NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001586:	f7fe fe49 	bl	800021c <__NVIC_GetPriorityGrouping>
 800158a:	4603      	mov	r3, r0
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fe99 	bl	80002c8 <NVIC_EncodePriority>
 8001596:	4603      	mov	r3, r0
 8001598:	4619      	mov	r1, r3
 800159a:	2025      	movs	r0, #37	@ 0x25
 800159c:	f7fe fe6a 	bl	8000274 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 80015a0:	2025      	movs	r0, #37	@ 0x25
 80015a2:	f7fe fe49 	bl	8000238 <__NVIC_EnableIRQ>

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	USART_InitStruct.BaudRate = 115200;
 80015a6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80015aa:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80015b8:	230c      	movs	r3, #12
 80015ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80015bc:	2300      	movs	r3, #0
 80015be:	633b      	str	r3, [r7, #48]	@ 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80015c0:	2300      	movs	r3, #0
 80015c2:	637b      	str	r3, [r7, #52]	@ 0x34
	LL_USART_Init(USART1, &USART_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	4806      	ldr	r0, [pc, #24]	@ (80015e4 <MX_USART1_UART_Init+0xc4>)
 80015cc:	f001 fece 	bl	800336c <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART1);
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_USART1_UART_Init+0xc4>)
 80015d2:	f7ff fc93 	bl	8000efc <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART1);
 80015d6:	4803      	ldr	r0, [pc, #12]	@ (80015e4 <MX_USART1_UART_Init+0xc4>)
 80015d8:	f7ff fc80 	bl	8000edc <LL_USART_Enable>
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3738      	adds	r7, #56	@ 0x38
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40013800 	.word	0x40013800

080015e8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08e      	sub	sp, #56	@ 0x38
 80015ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART2_Init 0 */

	/* USER CODE END USART2_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = {0};
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]
 80015fe:	615a      	str	r2, [r3, #20]
 8001600:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	615a      	str	r2, [r3, #20]

	LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001612:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8001616:	f7ff fa31 	bl	8000a7c <LL_RCC_SetUSARTClockSource>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800161a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800161e:	f7ff fb95 	bl	8000d4c <LL_APB1_GRP1_EnableClock>

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001622:	2001      	movs	r0, #1
 8001624:	f7ff fb7a 	bl	8000d1c <LL_AHB2_GRP1_EnableClock>
	/**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001628:	230c      	movs	r3, #12
 800162a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800162c:	2302      	movs	r3, #2
 800162e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800163c:	2307      	movs	r3, #7
 800163e:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001648:	f000 ff2f 	bl	80024aa <LL_GPIO_Init>

	/* USART2 interrupt Init */
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800164c:	f7fe fde6 	bl	800021c <__NVIC_GetPriorityGrouping>
 8001650:	4603      	mov	r3, r0
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fe36 	bl	80002c8 <NVIC_EncodePriority>
 800165c:	4603      	mov	r3, r0
 800165e:	4619      	mov	r1, r3
 8001660:	2026      	movs	r0, #38	@ 0x26
 8001662:	f7fe fe07 	bl	8000274 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8001666:	2026      	movs	r0, #38	@ 0x26
 8001668:	f7fe fde6 	bl	8000238 <__NVIC_EnableIRQ>

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	USART_InitStruct.BaudRate = 115200;
 800166c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001670:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800167a:	2300      	movs	r3, #0
 800167c:	62bb      	str	r3, [r7, #40]	@ 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800167e:	230c      	movs	r3, #12
 8001680:	62fb      	str	r3, [r7, #44]	@ 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001682:	2300      	movs	r3, #0
 8001684:	633b      	str	r3, [r7, #48]	@ 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001686:	2300      	movs	r3, #0
 8001688:	637b      	str	r3, [r7, #52]	@ 0x34
	LL_USART_Init(USART2, &USART_InitStruct);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	4806      	ldr	r0, [pc, #24]	@ (80016ac <MX_USART2_UART_Init+0xc4>)
 8001692:	f001 fe6b 	bl	800336c <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART2);
 8001696:	4805      	ldr	r0, [pc, #20]	@ (80016ac <MX_USART2_UART_Init+0xc4>)
 8001698:	f7ff fc30 	bl	8000efc <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 800169c:	4803      	ldr	r0, [pc, #12]	@ (80016ac <MX_USART2_UART_Init+0xc4>)
 800169e:	f7ff fc1d 	bl	8000edc <LL_USART_Enable>
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	3738      	adds	r7, #56	@ 0x38
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40004400 	.word	0x40004400

080016b0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08e      	sub	sp, #56	@ 0x38
 80016b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART3_Init 0 */

	/* USER CODE END USART3_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = {0};
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
 80016c6:	615a      	str	r2, [r3, #20]
 80016c8:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
 80016d8:	615a      	str	r2, [r3, #20]

	LL_RCC_SetUSARTClockSource(LL_RCC_USART3_CLKSOURCE_PCLK1);
 80016da:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 80016de:	f7ff f9cd 	bl	8000a7c <LL_RCC_SetUSARTClockSource>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80016e2:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80016e6:	f7ff fb31 	bl	8000d4c <LL_APB1_GRP1_EnableClock>

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80016ea:	2002      	movs	r0, #2
 80016ec:	f7ff fb16 	bl	8000d1c <LL_AHB2_GRP1_EnableClock>
	/**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80016f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016f4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016f6:	2302      	movs	r3, #2
 80016f8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001706:	2307      	movs	r3, #7
 8001708:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4819      	ldr	r0, [pc, #100]	@ (8001774 <MX_USART3_UART_Init+0xc4>)
 8001710:	f000 fecb 	bl	80024aa <LL_GPIO_Init>

	/* USART3 interrupt Init */
	NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001714:	f7fe fd82 	bl	800021c <__NVIC_GetPriorityGrouping>
 8001718:	4603      	mov	r3, r0
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fdd2 	bl	80002c8 <NVIC_EncodePriority>
 8001724:	4603      	mov	r3, r0
 8001726:	4619      	mov	r1, r3
 8001728:	2027      	movs	r0, #39	@ 0x27
 800172a:	f7fe fda3 	bl	8000274 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART3_IRQn);
 800172e:	2027      	movs	r0, #39	@ 0x27
 8001730:	f7fe fd82 	bl	8000238 <__NVIC_EnableIRQ>

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	USART_InitStruct.BaudRate = 115200;
 8001734:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001738:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001742:	2300      	movs	r3, #0
 8001744:	62bb      	str	r3, [r7, #40]	@ 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001746:	230c      	movs	r3, #12
 8001748:	62fb      	str	r3, [r7, #44]	@ 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800174a:	2300      	movs	r3, #0
 800174c:	633b      	str	r3, [r7, #48]	@ 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800174e:	2300      	movs	r3, #0
 8001750:	637b      	str	r3, [r7, #52]	@ 0x34
	LL_USART_Init(USART3, &USART_InitStruct);
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	4619      	mov	r1, r3
 8001758:	4807      	ldr	r0, [pc, #28]	@ (8001778 <MX_USART3_UART_Init+0xc8>)
 800175a:	f001 fe07 	bl	800336c <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART3);
 800175e:	4806      	ldr	r0, [pc, #24]	@ (8001778 <MX_USART3_UART_Init+0xc8>)
 8001760:	f7ff fbcc 	bl	8000efc <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART3);
 8001764:	4804      	ldr	r0, [pc, #16]	@ (8001778 <MX_USART3_UART_Init+0xc8>)
 8001766:	f7ff fbb9 	bl	8000edc <LL_USART_Enable>
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	3738      	adds	r7, #56	@ 0x38
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	48000400 	.word	0x48000400
 8001778:	40004800 	.word	0x40004800

0800177c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

	/* Init with LL driver */
	/* DMA controller clock enable */
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001780:	2001      	movs	r0, #1
 8001782:	f7ff fab3 	bl	8000cec <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001786:	f7fe fd49 	bl	800021c <__NVIC_GetPriorityGrouping>
 800178a:	4603      	mov	r3, r0
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fd99 	bl	80002c8 <NVIC_EncodePriority>
 8001796:	4603      	mov	r3, r0
 8001798:	4619      	mov	r1, r3
 800179a:	200b      	movs	r0, #11
 800179c:	f7fe fd6a 	bl	8000274 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017a0:	200b      	movs	r0, #11
 80017a2:	f7fe fd49 	bl	8000238 <__NVIC_EnableIRQ>

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	463b      	mov	r3, r7
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
 80017c0:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80017c2:	2004      	movs	r0, #4
 80017c4:	f7ff faaa 	bl	8000d1c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80017c8:	2080      	movs	r0, #128	@ 0x80
 80017ca:	f7ff faa7 	bl	8000d1c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80017ce:	2001      	movs	r0, #1
 80017d0:	f7ff faa4 	bl	8000d1c <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80017d4:	2002      	movs	r0, #2
 80017d6:	f7ff faa1 	bl	8000d1c <LL_AHB2_GRP1_EnableClock>

	/**/
	LL_GPIO_ResetOutputPin(nEN_EPS_3V3_SR_GPIO_Port, nEN_EPS_3V3_SR_Pin);
 80017da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017de:	4821      	ldr	r0, [pc, #132]	@ (8001864 <MX_GPIO_Init+0xb8>)
 80017e0:	f7ff fbc3 	bl	8000f6a <LL_GPIO_ResetOutputPin>

	/**/
	LL_GPIO_ResetOutputPin(GPIOA, EN_MCU_BUCK_SR_Pin|EN_MCU_3V3_SR_Pin|EN_5V_SR_Pin|WAKE_SR_Pin
 80017e4:	f44f 51ce 	mov.w	r1, #6592	@ 0x19c0
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ec:	f7ff fbbd 	bl	8000f6a <LL_GPIO_ResetOutputPin>
			|DONE_SR_Pin);

	/**/
	LL_GPIO_ResetOutputPin(GPIOB, EN_3V3_2_BUCK_SR_Pin|EN_3V3_2_SR_Pin|EN_UNREG1_SR_Pin|EN_UNREG2_SR_Pin
 80017f0:	f24f 31c7 	movw	r1, #62407	@ 0xf3c7
 80017f4:	481c      	ldr	r0, [pc, #112]	@ (8001868 <MX_GPIO_Init+0xbc>)
 80017f6:	f7ff fbb8 	bl	8000f6a <LL_GPIO_ResetOutputPin>
			|EN_3V3_1_BUCK_SR_Pin|EN_3V3_1_SR_Pin|EN_5V_BOOST_SR_Pin|DEBUG_LED4_SR_Pin
			|DEBUG_LED3_SR_Pin|DEBUG_LED2_SR_Pin|DEBUG_LED1_SR_Pin);

	/**/
	GPIO_InitStruct.Pin = nEN_EPS_3V3_SR_Pin;
 80017fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017fe:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001800:	2301      	movs	r3, #1
 8001802:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(nEN_EPS_3V3_SR_GPIO_Port, &GPIO_InitStruct);
 8001810:	463b      	mov	r3, r7
 8001812:	4619      	mov	r1, r3
 8001814:	4813      	ldr	r0, [pc, #76]	@ (8001864 <MX_GPIO_Init+0xb8>)
 8001816:	f000 fe48 	bl	80024aa <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = EN_MCU_BUCK_SR_Pin|EN_MCU_3V3_SR_Pin|EN_5V_SR_Pin|WAKE_SR_Pin
 800181a:	f44f 53ce 	mov.w	r3, #6592	@ 0x19c0
 800181e:	603b      	str	r3, [r7, #0]
			|DONE_SR_Pin;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001820:	2301      	movs	r3, #1
 8001822:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	463b      	mov	r3, r7
 8001832:	4619      	mov	r1, r3
 8001834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001838:	f000 fe37 	bl	80024aa <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = EN_3V3_2_BUCK_SR_Pin|EN_3V3_2_SR_Pin|EN_UNREG1_SR_Pin|EN_UNREG2_SR_Pin
 800183c:	f24f 33c7 	movw	r3, #62407	@ 0xf3c7
 8001840:	603b      	str	r3, [r7, #0]
			|EN_3V3_1_BUCK_SR_Pin|EN_3V3_1_SR_Pin|EN_5V_BOOST_SR_Pin|DEBUG_LED4_SR_Pin
			|DEBUG_LED3_SR_Pin|DEBUG_LED2_SR_Pin|DEBUG_LED1_SR_Pin;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001842:	2301      	movs	r3, #1
 8001844:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001852:	463b      	mov	r3, r7
 8001854:	4619      	mov	r1, r3
 8001856:	4804      	ldr	r0, [pc, #16]	@ (8001868 <MX_GPIO_Init+0xbc>)
 8001858:	f000 fe27 	bl	80024aa <LL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800185c:	bf00      	nop
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	48000800 	.word	0x48000800
 8001868:	48000400 	.word	0x48000400

0800186c <LL_USART_IsActiveFlag_TXE>:
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800187c:	2b80      	cmp	r3, #128	@ 0x80
 800187e:	d101      	bne.n	8001884 <LL_USART_IsActiveFlag_TXE+0x18>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <LL_USART_IsActiveFlag_TXE+0x1a>
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_GPIO_SetOutputPin>:
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	619a      	str	r2, [r3, #24]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <LL_GPIO_ResetOutputPin>:
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <PMIC_2_SRIC_Check_CHKSUM>:

Struct_OBC_2_SRIC obc2sr;
Struct_PMIC_2_SRIC pm2sr;

unsigned char PMIC_2_SRIC_Check_CHKSUM(unsigned char* data)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b085      	sub	sp, #20
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
	unsigned short crc = 0xFFFF;
 80018f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018f6:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<18;i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	e00a      	b.n	8001914 <PMIC_2_SRIC_Check_CHKSUM+0x2a>
	{
		crc = crc - data[i];
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	4413      	add	r3, r2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	89fb      	ldrh	r3, [r7, #14]
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<18;i++)
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	3301      	adds	r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2b11      	cmp	r3, #17
 8001918:	ddf1      	ble.n	80018fe <PMIC_2_SRIC_Check_CHKSUM+0x14>
	}

	return ((crc&0x00FF) == data[18]) && ((crc >> 8) == data[19]);
 800191a:	89fb      	ldrh	r3, [r7, #14]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	3212      	adds	r2, #18
 8001922:	7812      	ldrb	r2, [r2, #0]
 8001924:	4293      	cmp	r3, r2
 8001926:	d109      	bne.n	800193c <PMIC_2_SRIC_Check_CHKSUM+0x52>
 8001928:	89fb      	ldrh	r3, [r7, #14]
 800192a:	0a1b      	lsrs	r3, r3, #8
 800192c:	b29b      	uxth	r3, r3
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	3213      	adds	r2, #19
 8001932:	7812      	ldrb	r2, [r2, #0]
 8001934:	4293      	cmp	r3, r2
 8001936:	d101      	bne.n	800193c <PMIC_2_SRIC_Check_CHKSUM+0x52>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <PMIC_2_SRIC_Check_CHKSUM+0x54>
 800193c:	2300      	movs	r3, #0
 800193e:	b2db      	uxtb	r3, r3
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <PMIC_2_SRIC_Parsing>:

void PMIC_2_SRIC_Parsing(unsigned char* data, Struct_PMIC_2_SRIC* pm2sr)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	pm2sr->channel_0 = (unsigned char)(data[2]) & 0xFF;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	789a      	ldrb	r2, [r3, #2]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	701a      	strb	r2, [r3, #0]
	pm2sr->channel_1 = (unsigned char)(data[3]) & 0xFF;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	78da      	ldrb	r2, [r3, #3]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	705a      	strb	r2, [r3, #1]
	pm2sr->channel_2 = (unsigned char)(data[4]) & 0xFF;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	791a      	ldrb	r2, [r3, #4]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	709a      	strb	r2, [r3, #2]
	pm2sr->channel_3 = (unsigned char)(data[5]) & 0xFF;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	795a      	ldrb	r2, [r3, #5]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	70da      	strb	r2, [r3, #3]
	pm2sr->channel_4 = (unsigned char)(data[6]) & 0xFF;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	799a      	ldrb	r2, [r3, #6]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	711a      	strb	r2, [r3, #4]
	pm2sr->channel_5 = (unsigned char)(data[7]) & 0xFF;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	79da      	ldrb	r2, [r3, #7]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	715a      	strb	r2, [r3, #5]
	pm2sr->channel_6 = (unsigned char)(data[8]) & 0xFF;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7a1a      	ldrb	r2, [r3, #8]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	719a      	strb	r2, [r3, #6]
	pm2sr->channel_7 = (unsigned char)(data[8]) & 0xFF;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7a1a      	ldrb	r2, [r3, #8]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	71da      	strb	r2, [r3, #7]
	pm2sr->channel_8 = (unsigned char)(data[10]) & 0xFF;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7a9a      	ldrb	r2, [r3, #10]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	721a      	strb	r2, [r3, #8]
	pm2sr->channel_9 = (unsigned char)(data[11]) & 0xFF;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7ada      	ldrb	r2, [r3, #11]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	725a      	strb	r2, [r3, #9]
	pm2sr->channel_a = (unsigned char)(data[12]) & 0xFF;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	7b1a      	ldrb	r2, [r3, #12]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	729a      	strb	r2, [r3, #10]
	pm2sr->channel_b = (unsigned char)(data[13]) & 0xFF;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7b5a      	ldrb	r2, [r3, #13]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	72da      	strb	r2, [r3, #11]
	pm2sr->channel_c = (unsigned char)(data[14]) & 0xFF;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7b9a      	ldrb	r2, [r3, #14]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	731a      	strb	r2, [r3, #12]
	pm2sr->channel_d = (unsigned char)(data[15]) & 0xFF;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7bda      	ldrb	r2, [r3, #15]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	735a      	strb	r2, [r3, #13]
	pm2sr->channel_e = (unsigned char)(data[16]) & 0xFF;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7c1a      	ldrb	r2, [r3, #16]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	739a      	strb	r2, [r3, #14]
	pm2sr->channel_f = (unsigned char)(data[17]) & 0xFF;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7c5a      	ldrb	r2, [r3, #17]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	73da      	strb	r2, [r3, #15]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <OBC_2_SRIC_Check_CHKSUM>:
{

}

unsigned char OBC_2_SRIC_Check_CHKSUM(unsigned char* data)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b085      	sub	sp, #20
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
	unsigned short crc = 0xFFFF;
 80019ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019ee:	81fb      	strh	r3, [r7, #14]

	for(int i=0;i<18;i++)
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	e00a      	b.n	8001a0c <OBC_2_SRIC_Check_CHKSUM+0x2a>
	{
		crc = crc - data[i];
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4413      	add	r3, r2
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	89fb      	ldrh	r3, [r7, #14]
 8001a02:	1a9b      	subs	r3, r3, r2
 8001a04:	81fb      	strh	r3, [r7, #14]
	for(int i=0;i<18;i++)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b11      	cmp	r3, #17
 8001a10:	ddf1      	ble.n	80019f6 <OBC_2_SRIC_Check_CHKSUM+0x14>
	}

	return ((crc&0x00FF) == data[18]) && ((crc >> 8) == data[19]);
 8001a12:	89fb      	ldrh	r3, [r7, #14]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	3212      	adds	r2, #18
 8001a1a:	7812      	ldrb	r2, [r2, #0]
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d109      	bne.n	8001a34 <OBC_2_SRIC_Check_CHKSUM+0x52>
 8001a20:	89fb      	ldrh	r3, [r7, #14]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	3213      	adds	r2, #19
 8001a2a:	7812      	ldrb	r2, [r2, #0]
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <OBC_2_SRIC_Check_CHKSUM+0x52>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <OBC_2_SRIC_Check_CHKSUM+0x54>
 8001a34:	2300      	movs	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <OBC_2_SRIC_Parsing>:


void OBC_2_SRIC_Parsing(unsigned char* data, Struct_OBC_2_SRIC* obc2sr)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
	obc2sr->channel_0 = (unsigned char)(data[2]) & 0xFF;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	789a      	ldrb	r2, [r3, #2]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	701a      	strb	r2, [r3, #0]
	obc2sr->channel_1 = (unsigned char)(data[3]) & 0xFF;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	78da      	ldrb	r2, [r3, #3]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	705a      	strb	r2, [r3, #1]
	obc2sr->channel_2 = (unsigned char)(data[4]) & 0xFF;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	791a      	ldrb	r2, [r3, #4]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	709a      	strb	r2, [r3, #2]
	obc2sr->channel_3 = (unsigned char)(data[5]) & 0xFF;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	795a      	ldrb	r2, [r3, #5]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	70da      	strb	r2, [r3, #3]
	obc2sr->channel_4 = (unsigned char)(data[6]) & 0xFF;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	799a      	ldrb	r2, [r3, #6]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	711a      	strb	r2, [r3, #4]
	obc2sr->channel_5 = (unsigned char)(data[7]) & 0xFF;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	79da      	ldrb	r2, [r3, #7]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	715a      	strb	r2, [r3, #5]
	obc2sr->channel_6 = (unsigned char)(data[8]) & 0xFF;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7a1a      	ldrb	r2, [r3, #8]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	719a      	strb	r2, [r3, #6]
	obc2sr->channel_7 = (unsigned char)(data[8]) & 0xFF;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	7a1a      	ldrb	r2, [r3, #8]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	71da      	strb	r2, [r3, #7]
	obc2sr->channel_8 = (unsigned char)(data[10]) & 0xFF;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7a9a      	ldrb	r2, [r3, #10]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	721a      	strb	r2, [r3, #8]
	obc2sr->channel_9 = (unsigned char)(data[11]) & 0xFF;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7ada      	ldrb	r2, [r3, #11]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	725a      	strb	r2, [r3, #9]
	obc2sr->channel_a = (unsigned char)(data[12]) & 0xFF;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7b1a      	ldrb	r2, [r3, #12]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	729a      	strb	r2, [r3, #10]
	obc2sr->channel_b = (unsigned char)(data[13]) & 0xFF;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7b5a      	ldrb	r2, [r3, #13]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	72da      	strb	r2, [r3, #11]
	obc2sr->channel_c = (unsigned char)(data[14]) & 0xFF;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7b9a      	ldrb	r2, [r3, #14]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	731a      	strb	r2, [r3, #12]
	obc2sr->channel_d = (unsigned char)(data[15]) & 0xFF;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7bda      	ldrb	r2, [r3, #15]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	735a      	strb	r2, [r3, #13]
	obc2sr->channel_e = (unsigned char)(data[16]) & 0xFF;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7c1a      	ldrb	r2, [r3, #16]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	739a      	strb	r2, [r3, #14]
	obc2sr->channel_f = (unsigned char)(data[17]) & 0xFF;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7c5a      	ldrb	r2, [r3, #17]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	73da      	strb	r2, [r3, #15]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <SRIC_CONFIG_SAT_POWER>:

}



void SRIC_CONFIG_SAT_POWER(Struct_OBC_2_SRIC* obc2sr, Struct_PMIC_2_SRIC* pm2sr){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]

	/* EN 3V3 1 ------------------------------------------------------------------*/
	if( (obc2sr->channel_0 & 0x01) == 0x01 )
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <SRIC_CONFIG_SAT_POWER+0x22>
		LL_GPIO_SetOutputPin(EN_3V3_1_BUCK_SR_GPIO_Port, EN_3V3_1_BUCK_SR_Pin);
 8001af2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001af6:	4866      	ldr	r0, [pc, #408]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001af8:	f7ff fedb 	bl	80018b2 <LL_GPIO_SetOutputPin>
 8001afc:	e004      	b.n	8001b08 <SRIC_CONFIG_SAT_POWER+0x2c>
	else
		LL_GPIO_ResetOutputPin(EN_3V3_1_BUCK_SR_GPIO_Port, EN_3V3_1_BUCK_SR_Pin);
 8001afe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b02:	4863      	ldr	r0, [pc, #396]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001b04:	f7ff fee3 	bl	80018ce <LL_GPIO_ResetOutputPin>
	if( (obc2sr->channel_1 & 0x01) == 0x01 )
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	785b      	ldrb	r3, [r3, #1]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00a      	beq.n	8001b2a <SRIC_CONFIG_SAT_POWER+0x4e>
	{
		LL_GPIO_SetOutputPin(EN_3V3_1_BUCK_SR_GPIO_Port, EN_3V3_1_BUCK_SR_Pin);
 8001b14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b18:	485d      	ldr	r0, [pc, #372]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001b1a:	f7ff feca 	bl	80018b2 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(EN_3V3_1_SR_GPIO_Port, EN_3V3_1_SR_Pin);
 8001b1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b22:	485b      	ldr	r0, [pc, #364]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001b24:	f7ff fec5 	bl	80018b2 <LL_GPIO_SetOutputPin>
 8001b28:	e004      	b.n	8001b34 <SRIC_CONFIG_SAT_POWER+0x58>
	}
	else
		LL_GPIO_ResetOutputPin(EN_3V3_1_SR_GPIO_Port, EN_3V3_1_SR_Pin);
 8001b2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b2e:	4858      	ldr	r0, [pc, #352]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001b30:	f7ff fecd 	bl	80018ce <LL_GPIO_ResetOutputPin>


	/* EN 3V3 2 ------------------------------------------------------------------*/
	if( (obc2sr->channel_2 & 0x01) == 0x01 )
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	789b      	ldrb	r3, [r3, #2]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <SRIC_CONFIG_SAT_POWER+0x6e>
		LL_GPIO_SetOutputPin(EN_3V3_2_BUCK_SR_GPIO_Port, EN_3V3_2_BUCK_SR_Pin);
 8001b40:	2101      	movs	r1, #1
 8001b42:	4853      	ldr	r0, [pc, #332]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001b44:	f7ff feb5 	bl	80018b2 <LL_GPIO_SetOutputPin>
 8001b48:	e003      	b.n	8001b52 <SRIC_CONFIG_SAT_POWER+0x76>
	else
		LL_GPIO_ResetOutputPin(EN_3V3_2_BUCK_SR_GPIO_Port, EN_3V3_2_BUCK_SR_Pin);
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	4850      	ldr	r0, [pc, #320]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001b4e:	f7ff febe 	bl	80018ce <LL_GPIO_ResetOutputPin>

	if( (obc2sr->channel_3 & 0x01) == 0x01 )
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	78db      	ldrb	r3, [r3, #3]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d008      	beq.n	8001b70 <SRIC_CONFIG_SAT_POWER+0x94>
	{
		LL_GPIO_SetOutputPin(EN_3V3_2_BUCK_SR_GPIO_Port, EN_3V3_2_BUCK_SR_Pin);
 8001b5e:	2101      	movs	r1, #1
 8001b60:	484b      	ldr	r0, [pc, #300]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001b62:	f7ff fea6 	bl	80018b2 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(EN_3V3_2_SR_GPIO_Port, EN_3V3_2_SR_Pin);
 8001b66:	2102      	movs	r1, #2
 8001b68:	4849      	ldr	r0, [pc, #292]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001b6a:	f7ff fea2 	bl	80018b2 <LL_GPIO_SetOutputPin>
 8001b6e:	e003      	b.n	8001b78 <SRIC_CONFIG_SAT_POWER+0x9c>
	}
	else
		LL_GPIO_ResetOutputPin(EN_3V3_2_SR_GPIO_Port, EN_3V3_2_SR_Pin);
 8001b70:	2102      	movs	r1, #2
 8001b72:	4847      	ldr	r0, [pc, #284]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001b74:	f7ff feab 	bl	80018ce <LL_GPIO_ResetOutputPin>


	/* EN 5V0 --------------------------------------------------------------------*/
	if( (obc2sr->channel_4 & 0x01) == 0x01 )
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	791b      	ldrb	r3, [r3, #4]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <SRIC_CONFIG_SAT_POWER+0xb4>
		LL_GPIO_SetOutputPin(EN_5V_BOOST_SR_GPIO_Port, EN_5V_BOOST_SR_Pin);
 8001b84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b88:	4841      	ldr	r0, [pc, #260]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001b8a:	f7ff fe92 	bl	80018b2 <LL_GPIO_SetOutputPin>
 8001b8e:	e004      	b.n	8001b9a <SRIC_CONFIG_SAT_POWER+0xbe>
	else
		LL_GPIO_ResetOutputPin(EN_5V_BOOST_SR_GPIO_Port, EN_5V_BOOST_SR_Pin);
 8001b90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b94:	483e      	ldr	r0, [pc, #248]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001b96:	f7ff fe9a 	bl	80018ce <LL_GPIO_ResetOutputPin>

	if( (obc2sr->channel_5 & 0x01) == 0x01 )
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	795b      	ldrb	r3, [r3, #5]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <SRIC_CONFIG_SAT_POWER+0xe2>
	{
		LL_GPIO_SetOutputPin(EN_5V_BOOST_SR_GPIO_Port, EN_5V_BOOST_SR_Pin);
 8001ba6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001baa:	4839      	ldr	r0, [pc, #228]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001bac:	f7ff fe81 	bl	80018b2 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(EN_5V_SR_GPIO_Port, EN_5V_SR_Pin);
 8001bb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb8:	f7ff fe7b 	bl	80018b2 <LL_GPIO_SetOutputPin>
 8001bbc:	e005      	b.n	8001bca <SRIC_CONFIG_SAT_POWER+0xee>
	}
	else
		LL_GPIO_ResetOutputPin(EN_5V_SR_GPIO_Port, EN_5V_SR_Pin);
 8001bbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc6:	f7ff fe82 	bl	80018ce <LL_GPIO_ResetOutputPin>


	/* EN UNREG 1 ----------------------------------------------------------------*/
	if( (obc2sr->channel_6 & 0x01) == 0x01 )
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	799b      	ldrb	r3, [r3, #6]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d004      	beq.n	8001be0 <SRIC_CONFIG_SAT_POWER+0x104>
		LL_GPIO_SetOutputPin(EN_UNREG1_SR_GPIO_Port, EN_UNREG1_SR_Pin);
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	482d      	ldr	r0, [pc, #180]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001bda:	f7ff fe6a 	bl	80018b2 <LL_GPIO_SetOutputPin>
 8001bde:	e003      	b.n	8001be8 <SRIC_CONFIG_SAT_POWER+0x10c>
	else
		LL_GPIO_ResetOutputPin(EN_UNREG1_SR_GPIO_Port, EN_UNREG1_SR_Pin);
 8001be0:	2104      	movs	r1, #4
 8001be2:	482b      	ldr	r0, [pc, #172]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001be4:	f7ff fe73 	bl	80018ce <LL_GPIO_ResetOutputPin>

	/* EN UNREG 2 ----------------------------------------------------------------*/
	if( (obc2sr->channel_7 & 0x01) == 0x01 )
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	79db      	ldrb	r3, [r3, #7]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <SRIC_CONFIG_SAT_POWER+0x124>
		LL_GPIO_SetOutputPin(EN_UNREG2_SR_GPIO_Port, EN_UNREG2_SR_Pin);
 8001bf4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bf8:	4825      	ldr	r0, [pc, #148]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001bfa:	f7ff fe5a 	bl	80018b2 <LL_GPIO_SetOutputPin>
 8001bfe:	e004      	b.n	8001c0a <SRIC_CONFIG_SAT_POWER+0x12e>
	else
		LL_GPIO_ResetOutputPin(EN_UNREG2_SR_GPIO_Port, EN_UNREG2_SR_Pin);
 8001c00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c04:	4822      	ldr	r0, [pc, #136]	@ (8001c90 <SRIC_CONFIG_SAT_POWER+0x1b4>)
 8001c06:	f7ff fe62 	bl	80018ce <LL_GPIO_ResetOutputPin>


	/* MCU OBC -------------------------------------------------------------------*/
	if( (obc2sr->channel_8 & 0x01) == 0x01 ){
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7a1b      	ldrb	r3, [r3, #8]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d005      	beq.n	8001c22 <SRIC_CONFIG_SAT_POWER+0x146>
		LL_GPIO_SetOutputPin(EN_MCU_BUCK_SR_GPIO_Port, EN_MCU_BUCK_SR_Pin);
 8001c16:	2140      	movs	r1, #64	@ 0x40
 8001c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c1c:	f7ff fe49 	bl	80018b2 <LL_GPIO_SetOutputPin>
 8001c20:	e004      	b.n	8001c2c <SRIC_CONFIG_SAT_POWER+0x150>
	}
	else
		LL_GPIO_ResetOutputPin(EN_MCU_BUCK_SR_GPIO_Port, EN_MCU_BUCK_SR_Pin);
 8001c22:	2140      	movs	r1, #64	@ 0x40
 8001c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c28:	f7ff fe51 	bl	80018ce <LL_GPIO_ResetOutputPin>
	if( (obc2sr->channel_9 & 0x01) == 0x01 )
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7a5b      	ldrb	r3, [r3, #9]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00a      	beq.n	8001c4e <SRIC_CONFIG_SAT_POWER+0x172>
	{
		LL_GPIO_SetOutputPin(EN_MCU_BUCK_SR_GPIO_Port, EN_MCU_BUCK_SR_Pin);
 8001c38:	2140      	movs	r1, #64	@ 0x40
 8001c3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c3e:	f7ff fe38 	bl	80018b2 <LL_GPIO_SetOutputPin>
		LL_GPIO_SetOutputPin(EN_MCU_3V3_SR_GPIO_Port, EN_MCU_3V3_SR_Pin);
 8001c42:	2180      	movs	r1, #128	@ 0x80
 8001c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c48:	f7ff fe33 	bl	80018b2 <LL_GPIO_SetOutputPin>
 8001c4c:	e004      	b.n	8001c58 <SRIC_CONFIG_SAT_POWER+0x17c>
	}
	else{
		LL_GPIO_ResetOutputPin(EN_MCU_3V3_SR_GPIO_Port, EN_MCU_3V3_SR_Pin);
 8001c4e:	2180      	movs	r1, #128	@ 0x80
 8001c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c54:	f7ff fe3b 	bl	80018ce <LL_GPIO_ResetOutputPin>
	}


	/* nEN_EPS_3V3_SR  -----------------------------------------------------------*/
	if( (obc2sr->channel_a & 0x01) == 0x01 ||  (pm2sr->channel_0 & 0x01) == 0x01 )
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7a9b      	ldrb	r3, [r3, #10]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d105      	bne.n	8001c70 <SRIC_CONFIG_SAT_POWER+0x194>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <SRIC_CONFIG_SAT_POWER+0x1a0>
		LL_GPIO_ResetOutputPin(nEN_EPS_3V3_SR_GPIO_Port, nEN_EPS_3V3_SR_Pin);
 8001c70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c74:	4807      	ldr	r0, [pc, #28]	@ (8001c94 <SRIC_CONFIG_SAT_POWER+0x1b8>)
 8001c76:	f7ff fe2a 	bl	80018ce <LL_GPIO_ResetOutputPin>
 8001c7a:	e005      	b.n	8001c88 <SRIC_CONFIG_SAT_POWER+0x1ac>
	else
		LL_GPIO_SetOutputPin(nEN_EPS_3V3_SR_GPIO_Port, nEN_EPS_3V3_SR_Pin);
 8001c7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c80:	4804      	ldr	r0, [pc, #16]	@ (8001c94 <SRIC_CONFIG_SAT_POWER+0x1b8>)
 8001c82:	f7ff fe16 	bl	80018b2 <LL_GPIO_SetOutputPin>

}
 8001c86:	bf00      	nop
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	48000400 	.word	0x48000400
 8001c94:	48000800 	.word	0x48000800

08001c98 <SEND_DATA_UART>:


void SEND_DATA_UART(unsigned char* data, USART_TypeDef * USARTx, int len){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]

	unsigned short crc = 0xFFFF;
 8001ca4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ca8:	83fb      	strh	r3, [r7, #30]

	for(int i=0;i<len;i++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	e00a      	b.n	8001cc6 <SEND_DATA_UART+0x2e>
	{
		crc = crc - data[i];
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	8bfb      	ldrh	r3, [r7, #30]
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<len;i++)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	dbf0      	blt.n	8001cb0 <SEND_DATA_UART+0x18>
	}
	data[len-2]=(crc&0x00FF);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3b02      	subs	r3, #2
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	8bfa      	ldrh	r2, [r7, #30]
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	701a      	strb	r2, [r3, #0]
	data[len-1]=(crc >> 8);
 8001cdc:	8bfb      	ldrh	r3, [r7, #30]
 8001cde:	0a1b      	lsrs	r3, r3, #8
 8001ce0:	b299      	uxth	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	b2ca      	uxtb	r2, r1
 8001cec:	701a      	strb	r2, [r3, #0]

	for(int i=0;i<len;i++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e011      	b.n	8001d18 <SEND_DATA_UART+0x80>
	{
		while(!LL_USART_IsActiveFlag_TXE(USARTx));
 8001cf4:	bf00      	nop
 8001cf6:	68b8      	ldr	r0, [r7, #8]
 8001cf8:	f7ff fdb8 	bl	800186c <LL_USART_IsActiveFlag_TXE>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f9      	beq.n	8001cf6 <SEND_DATA_UART+0x5e>
		LL_USART_TransmitData8(USARTx, data[i]);
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	68b8      	ldr	r0, [r7, #8]
 8001d0e:	f7ff fdc0 	bl	8001892 <LL_USART_TransmitData8>
	for(int i=0;i<len;i++)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	3301      	adds	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	dbe9      	blt.n	8001cf4 <SEND_DATA_UART+0x5c>
	}

}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3720      	adds	r7, #32
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d101      	bne.n	8001d42 <LL_DMA_IsActiveFlag_TC1+0x18>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <LL_DMA_IsActiveFlag_TC1+0x1a>
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	605a      	str	r2, [r3, #4]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_USART_IsActiveFlag_RXNE>:
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 0320 	and.w	r3, r3, #32
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	d101      	bne.n	8001d82 <LL_USART_IsActiveFlag_RXNE+0x18>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_USART_ReceiveData8>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <NMI_Handler+0x4>

08001db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <HardFault_Handler+0x4>

08001dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <MemManage_Handler+0x4>

08001dc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <BusFault_Handler+0x4>

08001dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <UsageFault_Handler+0x4>

08001dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	 if ( LL_DMA_IsActiveFlag_TC1(DMA1) )
 8001e10:	4806      	ldr	r0, [pc, #24]	@ (8001e2c <DMA1_Channel1_IRQHandler+0x20>)
 8001e12:	f7ff ff8a 	bl	8001d2a <LL_DMA_IsActiveFlag_TC1>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <DMA1_Channel1_IRQHandler+0x1c>
	  {
	    flagDMATC =  1 ;
 8001e1c:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <DMA1_Channel1_IRQHandler+0x24>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
	    LL_DMA_ClearFlag_TC1( DMA1 ) ;
 8001e22:	4802      	ldr	r0, [pc, #8]	@ (8001e2c <DMA1_Channel1_IRQHandler+0x20>)
 8001e24:	f7ff ff94 	bl	8001d50 <LL_DMA_ClearFlag_TC1>

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40020000 	.word	0x40020000
 8001e30:	20000020 	.word	0x20000020

08001e34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	/*--------------------------------------------------------------------------------------------*/
	/* DEBUG -------------------------------------------------------------------------------------*/
	/*--------------------------------------------------------------------------------------------*/
	if(LL_USART_IsActiveFlag_RXNE(USART1))
 8001e38:	4808      	ldr	r0, [pc, #32]	@ (8001e5c <USART1_IRQHandler+0x28>)
 8001e3a:	f7ff ff96 	bl	8001d6a <LL_USART_IsActiveFlag_RXNE>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d009      	beq.n	8001e58 <USART1_IRQHandler+0x24>
	{
		usart1_rx_data = LL_USART_ReceiveData8(USART1);
 8001e44:	4805      	ldr	r0, [pc, #20]	@ (8001e5c <USART1_IRQHandler+0x28>)
 8001e46:	f7ff ffa3 	bl	8001d90 <LL_USART_ReceiveData8>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b04      	ldr	r3, [pc, #16]	@ (8001e60 <USART1_IRQHandler+0x2c>)
 8001e50:	701a      	strb	r2, [r3, #0]
		usart1_rx_flag = 1;
 8001e52:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <USART1_IRQHandler+0x30>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40013800 	.word	0x40013800
 8001e60:	20000079 	.word	0x20000079
 8001e64:	20000078 	.word	0x20000078

08001e68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	/*--------------------------------------------------------------------------------------------*/
	/* EPS_2_SRIC --------------------------------------------------------------------------------*/
	/*--------------------------------------------------------------------------------------------*/
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8001e6c:	482d      	ldr	r0, [pc, #180]	@ (8001f24 <USART2_IRQHandler+0xbc>)
 8001e6e:	f7ff ff7c 	bl	8001d6a <LL_USART_IsActiveFlag_RXNE>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d053      	beq.n	8001f20 <USART2_IRQHandler+0xb8>
	{
		usart2_rx_data = LL_USART_ReceiveData8(USART2);
 8001e78:	482a      	ldr	r0, [pc, #168]	@ (8001f24 <USART2_IRQHandler+0xbc>)
 8001e7a:	f7ff ff89 	bl	8001d90 <LL_USART_ReceiveData8>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b29      	ldr	r3, [pc, #164]	@ (8001f28 <USART2_IRQHandler+0xc0>)
 8001e84:	701a      	strb	r2, [r3, #0]
		usart2_rx_flag = 1;
 8001e86:	4b29      	ldr	r3, [pc, #164]	@ (8001f2c <USART2_IRQHandler+0xc4>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]

//		while(!LL_USART_IsActiveFlag_TXE(USART1));
//		LL_USART_TransmitData8(USART1, usart2_rx_data);		// Transmit TO PC

		switch(cnt)
 8001e8c:	4b28      	ldr	r3, [pc, #160]	@ (8001f30 <USART2_IRQHandler+0xc8>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b13      	cmp	r3, #19
 8001e92:	d02a      	beq.n	8001eea <USART2_IRQHandler+0x82>
 8001e94:	2b13      	cmp	r3, #19
 8001e96:	dc36      	bgt.n	8001f06 <USART2_IRQHandler+0x9e>
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <USART2_IRQHandler+0x3a>
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d010      	beq.n	8001ec2 <USART2_IRQHandler+0x5a>
 8001ea0:	e031      	b.n	8001f06 <USART2_IRQHandler+0x9e>
		{
		case 0 :	if(usart2_rx_data == PMIC_2_SRIC_HEADER)
 8001ea2:	4b21      	ldr	r3, [pc, #132]	@ (8001f28 <USART2_IRQHandler+0xc0>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2bef      	cmp	r3, #239	@ 0xef
 8001ea8:	d139      	bne.n	8001f1e <USART2_IRQHandler+0xb6>
					{pmic_2_sric_rx_buffer[cnt++] = usart2_rx_data;}			break;
 8001eaa:	4b21      	ldr	r3, [pc, #132]	@ (8001f30 <USART2_IRQHandler+0xc8>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	b2d1      	uxtb	r1, r2
 8001eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f30 <USART2_IRQHandler+0xc8>)
 8001eb4:	7011      	strb	r1, [r2, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <USART2_IRQHandler+0xc0>)
 8001eba:	7819      	ldrb	r1, [r3, #0]
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <USART2_IRQHandler+0xcc>)
 8001ebe:	5499      	strb	r1, [r3, r2]
 8001ec0:	e02d      	b.n	8001f1e <USART2_IRQHandler+0xb6>

		case 1 :	if(usart2_rx_data == PMIC_2_SRIC_COMMAND)
 8001ec2:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <USART2_IRQHandler+0xc0>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10b      	bne.n	8001ee2 <USART2_IRQHandler+0x7a>
					{pmic_2_sric_rx_buffer[cnt++] = usart2_rx_data;}
 8001eca:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <USART2_IRQHandler+0xc8>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	b2d1      	uxtb	r1, r2
 8001ed2:	4a17      	ldr	r2, [pc, #92]	@ (8001f30 <USART2_IRQHandler+0xc8>)
 8001ed4:	7011      	strb	r1, [r2, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <USART2_IRQHandler+0xc0>)
 8001eda:	7819      	ldrb	r1, [r3, #0]
 8001edc:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <USART2_IRQHandler+0xcc>)
 8001ede:	5499      	strb	r1, [r3, r2]
					else {cnt = 0;}											break;
 8001ee0:	e01e      	b.n	8001f20 <USART2_IRQHandler+0xb8>
 8001ee2:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <USART2_IRQHandler+0xc8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
 8001ee8:	e01a      	b.n	8001f20 <USART2_IRQHandler+0xb8>

		case 19:	pmic_2_sric_rx_buffer[cnt]    = usart2_rx_data;
 8001eea:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <USART2_IRQHandler+0xc8>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <USART2_IRQHandler+0xc0>)
 8001ef2:	7819      	ldrb	r1, [r3, #0]
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <USART2_IRQHandler+0xcc>)
 8001ef6:	5499      	strb	r1, [r3, r2]
					cnt=0;
 8001ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <USART2_IRQHandler+0xc8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
					pmic_2_sric_rx_complete_flag  = 1;							break;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <USART2_IRQHandler+0xd0>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	e00c      	b.n	8001f20 <USART2_IRQHandler+0xb8>

		default:	pmic_2_sric_rx_buffer[cnt++]  = usart2_rx_data;			break;
 8001f06:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <USART2_IRQHandler+0xc8>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	b2d1      	uxtb	r1, r2
 8001f0e:	4a08      	ldr	r2, [pc, #32]	@ (8001f30 <USART2_IRQHandler+0xc8>)
 8001f10:	7011      	strb	r1, [r2, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <USART2_IRQHandler+0xc0>)
 8001f16:	7819      	ldrb	r1, [r3, #0]
 8001f18:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <USART2_IRQHandler+0xcc>)
 8001f1a:	5499      	strb	r1, [r3, r2]
 8001f1c:	e000      	b.n	8001f20 <USART2_IRQHandler+0xb8>
					{pmic_2_sric_rx_buffer[cnt++] = usart2_rx_data;}			break;
 8001f1e:	bf00      	nop

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40004400 	.word	0x40004400
 8001f28:	2000007b 	.word	0x2000007b
 8001f2c:	2000007a 	.word	0x2000007a
 8001f30:	200000ad 	.word	0x200000ad
 8001f34:	20000080 	.word	0x20000080
 8001f38:	20000094 	.word	0x20000094

08001f3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
	/*--------------------------------------------------------------------------------------------*/
	/* OBC_2_SRIC --------------------------------------------------------------------------------*/
	/*--------------------------------------------------------------------------------------------*/
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(USART3))
 8001f40:	482d      	ldr	r0, [pc, #180]	@ (8001ff8 <USART3_IRQHandler+0xbc>)
 8001f42:	f7ff ff12 	bl	8001d6a <LL_USART_IsActiveFlag_RXNE>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d053      	beq.n	8001ff4 <USART3_IRQHandler+0xb8>
	{
		usart3_rx_data = LL_USART_ReceiveData8(USART3);
 8001f4c:	482a      	ldr	r0, [pc, #168]	@ (8001ff8 <USART3_IRQHandler+0xbc>)
 8001f4e:	f7ff ff1f 	bl	8001d90 <LL_USART_ReceiveData8>
 8001f52:	4603      	mov	r3, r0
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b29      	ldr	r3, [pc, #164]	@ (8001ffc <USART3_IRQHandler+0xc0>)
 8001f58:	701a      	strb	r2, [r3, #0]
		usart3_rx_flag = 1;
 8001f5a:	4b29      	ldr	r3, [pc, #164]	@ (8002000 <USART3_IRQHandler+0xc4>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]

//		while(!LL_USART_IsActiveFlag_TXE(USART1));
//		LL_USART_TransmitData8(USART1, usart3_rx_data);		// Transmit TO PC

		switch(cnt)
 8001f60:	4b28      	ldr	r3, [pc, #160]	@ (8002004 <USART3_IRQHandler+0xc8>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b13      	cmp	r3, #19
 8001f66:	d02a      	beq.n	8001fbe <USART3_IRQHandler+0x82>
 8001f68:	2b13      	cmp	r3, #19
 8001f6a:	dc36      	bgt.n	8001fda <USART3_IRQHandler+0x9e>
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <USART3_IRQHandler+0x3a>
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d010      	beq.n	8001f96 <USART3_IRQHandler+0x5a>
 8001f74:	e031      	b.n	8001fda <USART3_IRQHandler+0x9e>
		{
		case 0 :	if(usart3_rx_data == OBC_2_SRIC_HEADER)
 8001f76:	4b21      	ldr	r3, [pc, #132]	@ (8001ffc <USART3_IRQHandler+0xc0>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2bbf      	cmp	r3, #191	@ 0xbf
 8001f7c:	d139      	bne.n	8001ff2 <USART3_IRQHandler+0xb6>
					{obc_2_sric_rx_buffer[cnt++] = usart3_rx_data;}			break;
 8001f7e:	4b21      	ldr	r3, [pc, #132]	@ (8002004 <USART3_IRQHandler+0xc8>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	b2d1      	uxtb	r1, r2
 8001f86:	4a1f      	ldr	r2, [pc, #124]	@ (8002004 <USART3_IRQHandler+0xc8>)
 8001f88:	7011      	strb	r1, [r2, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <USART3_IRQHandler+0xc0>)
 8001f8e:	7819      	ldrb	r1, [r3, #0]
 8001f90:	4b1d      	ldr	r3, [pc, #116]	@ (8002008 <USART3_IRQHandler+0xcc>)
 8001f92:	5499      	strb	r1, [r3, r2]
 8001f94:	e02d      	b.n	8001ff2 <USART3_IRQHandler+0xb6>

		case 1 :	if(usart3_rx_data == OBC_2_SRIC_COMMAND)
 8001f96:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <USART3_IRQHandler+0xc0>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10b      	bne.n	8001fb6 <USART3_IRQHandler+0x7a>
					{obc_2_sric_rx_buffer[cnt++] = usart3_rx_data;}
 8001f9e:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <USART3_IRQHandler+0xc8>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	b2d1      	uxtb	r1, r2
 8001fa6:	4a17      	ldr	r2, [pc, #92]	@ (8002004 <USART3_IRQHandler+0xc8>)
 8001fa8:	7011      	strb	r1, [r2, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b13      	ldr	r3, [pc, #76]	@ (8001ffc <USART3_IRQHandler+0xc0>)
 8001fae:	7819      	ldrb	r1, [r3, #0]
 8001fb0:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <USART3_IRQHandler+0xcc>)
 8001fb2:	5499      	strb	r1, [r3, r2]
					else {cnt = 0;}											break;
 8001fb4:	e01e      	b.n	8001ff4 <USART3_IRQHandler+0xb8>
 8001fb6:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <USART3_IRQHandler+0xc8>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
 8001fbc:	e01a      	b.n	8001ff4 <USART3_IRQHandler+0xb8>

		case 19:	obc_2_sric_rx_buffer[cnt]    = usart3_rx_data;
 8001fbe:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <USART3_IRQHandler+0xc8>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <USART3_IRQHandler+0xc0>)
 8001fc6:	7819      	ldrb	r1, [r3, #0]
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <USART3_IRQHandler+0xcc>)
 8001fca:	5499      	strb	r1, [r3, r2]
					cnt=0;
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <USART3_IRQHandler+0xc8>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
					obc_2_sric_rx_complete_flag  = 1;							break;
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <USART3_IRQHandler+0xd0>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
 8001fd8:	e00c      	b.n	8001ff4 <USART3_IRQHandler+0xb8>

		default:	obc_2_sric_rx_buffer[cnt++]  = usart3_rx_data;			break;
 8001fda:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <USART3_IRQHandler+0xc8>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	b2d1      	uxtb	r1, r2
 8001fe2:	4a08      	ldr	r2, [pc, #32]	@ (8002004 <USART3_IRQHandler+0xc8>)
 8001fe4:	7011      	strb	r1, [r2, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <USART3_IRQHandler+0xc0>)
 8001fea:	7819      	ldrb	r1, [r3, #0]
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <USART3_IRQHandler+0xcc>)
 8001fee:	5499      	strb	r1, [r3, r2]
 8001ff0:	e000      	b.n	8001ff4 <USART3_IRQHandler+0xb8>
					{obc_2_sric_rx_buffer[cnt++] = usart3_rx_data;}			break;
 8001ff2:	bf00      	nop

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40004800 	.word	0x40004800
 8001ffc:	2000007d 	.word	0x2000007d
 8002000:	2000007c 	.word	0x2000007c
 8002004:	200000ae 	.word	0x200000ae
 8002008:	20000098 	.word	0x20000098
 800200c:	200000ac 	.word	0x200000ac

08002010 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <SystemInit+0x20>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201a:	4a05      	ldr	r2, [pc, #20]	@ (8002030 <SystemInit+0x20>)
 800201c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002020:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002034:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800206c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002038:	f7ff ffea 	bl	8002010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800203c:	480c      	ldr	r0, [pc, #48]	@ (8002070 <LoopForever+0x6>)
  ldr r1, =_edata
 800203e:	490d      	ldr	r1, [pc, #52]	@ (8002074 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002040:	4a0d      	ldr	r2, [pc, #52]	@ (8002078 <LoopForever+0xe>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002044:	e002      	b.n	800204c <LoopCopyDataInit>

08002046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204a:	3304      	adds	r3, #4

0800204c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800204c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002050:	d3f9      	bcc.n	8002046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002052:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002054:	4c0a      	ldr	r4, [pc, #40]	@ (8002080 <LoopForever+0x16>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002058:	e001      	b.n	800205e <LoopFillZerobss>

0800205a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800205c:	3204      	adds	r2, #4

0800205e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002060:	d3fb      	bcc.n	800205a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002062:	f001 fa2b 	bl	80034bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002066:	f7fe ff8f 	bl	8000f88 <main>

0800206a <LoopForever>:

LoopForever:
    b LoopForever
 800206a:	e7fe      	b.n	800206a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800206c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002074:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002078:	08003574 	.word	0x08003574
  ldr r2, =_sbss
 800207c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002080:	200000b0 	.word	0x200000b0

08002084 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <ADC1_IRQHandler>

08002086 <LL_ADC_SetCommonClock>:
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	609a      	str	r2, [r3, #8]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_REG_SetSequencerLength>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	f023 020f 	bic.w	r2, r3, #15
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_ADC_IsEnabled>:
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <LL_ADC_IsEnabled+0x18>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <LL_ADC_IsEnabled+0x1a>
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, const LL_ADC_CommonInitTypeDef *pADC_CommonInitStruct)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8002106:	480a      	ldr	r0, [pc, #40]	@ (8002130 <LL_ADC_CommonInit+0x38>)
 8002108:	f7ff ffe3 	bl	80020d2 <LL_ADC_IsEnabled>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <LL_ADC_CommonInit+0x28>
                 pADC_CommonInitStruct->CommonClock
                 | LL_ADC_MULTI_INDEPENDENT
                );
    }
#else
    LL_ADC_SetCommonClock(ADCxy_COMMON, pADC_CommonInitStruct->CommonClock);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4619      	mov	r1, r3
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ffb4 	bl	8002086 <LL_ADC_SetCommonClock>
 800211e:	e001      	b.n	8002124 <LL_ADC_CommonInit+0x2c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002124:	7bfb      	ldrb	r3, [r7, #15]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	50040000 	.word	0x50040000

08002134 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, const LL_ADC_InitTypeDef *pADC_InitStruct)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffc5 	bl	80020d2 <LL_ADC_IsEnabled>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d111      	bne.n	8002172 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002156:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	6811      	ldr	r1, [r2, #0]
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	6852      	ldr	r2, [r2, #4]
 8002162:	4311      	orrs	r1, r2
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	6892      	ldr	r2, [r2, #8]
 8002168:	430a      	orrs	r2, r1
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	60da      	str	r2, [r3, #12]
 8002170:	e001      	b.n	8002176 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, const LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ff9f 	bl	80020d2 <LL_ADC_IsEnabled>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d132      	bne.n	8002200 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d015      	beq.n	80021ce <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <LL_ADC_REG_Init+0x90>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	6811      	ldr	r1, [r2, #0]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	6892      	ldr	r2, [r2, #8]
 80021b2:	4311      	orrs	r1, r2
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	68d2      	ldr	r2, [r2, #12]
 80021b8:	4311      	orrs	r1, r2
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	6912      	ldr	r2, [r2, #16]
 80021be:	4311      	orrs	r1, r2
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	6952      	ldr	r2, [r2, #20]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	60da      	str	r2, [r3, #12]
 80021cc:	e011      	b.n	80021f2 <LL_ADC_REG_Init+0x72>
                 | pADC_RegInitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002210 <LL_ADC_REG_Init+0x90>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	6811      	ldr	r1, [r2, #0]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	68d2      	ldr	r2, [r2, #12]
 80021de:	4311      	orrs	r1, r2
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	6912      	ldr	r2, [r2, #16]
 80021e4:	4311      	orrs	r1, r2
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	6952      	ldr	r2, [r2, #20]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff57 	bl	80020ac <LL_ADC_REG_SetSequencerLength>
 80021fe:	e001      	b.n	8002204 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002204:	7bfb      	ldrb	r3, [r7, #15]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	fff0c03c 	.word	0xfff0c03c

08002214 <LL_GPIO_SetPinMode>:
{
 8002214:	b480      	push	{r7}
 8002216:	b08b      	sub	sp, #44	@ 0x2c
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	613b      	str	r3, [r7, #16]
  return result;
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800223a:	2320      	movs	r3, #32
 800223c:	e003      	b.n	8002246 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2103      	movs	r1, #3
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	401a      	ands	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	61fb      	str	r3, [r7, #28]
  return result;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002268:	2320      	movs	r3, #32
 800226a:	e003      	b.n	8002274 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	431a      	orrs	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	601a      	str	r2, [r3, #0]
}
 8002282:	bf00      	nop
 8002284:	372c      	adds	r7, #44	@ 0x2c
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <LL_GPIO_SetPinOutputType>:
{
 800228e:	b480      	push	{r7}
 8002290:	b085      	sub	sp, #20
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	401a      	ands	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	431a      	orrs	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	605a      	str	r2, [r3, #4]
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LL_GPIO_SetPinSpeed>:
{
 80022be:	b480      	push	{r7}
 80022c0:	b08b      	sub	sp, #44	@ 0x2c
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	613b      	str	r3, [r7, #16]
  return result;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80022e4:	2320      	movs	r3, #32
 80022e6:	e003      	b.n	80022f0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	2103      	movs	r1, #3
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	401a      	ands	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	61fb      	str	r3, [r7, #28]
  return result;
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002312:	2320      	movs	r3, #32
 8002314:	e003      	b.n	800231e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	431a      	orrs	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	609a      	str	r2, [r3, #8]
}
 800232c:	bf00      	nop
 800232e:	372c      	adds	r7, #44	@ 0x2c
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_GPIO_SetPinPull>:
{
 8002338:	b480      	push	{r7}
 800233a:	b08b      	sub	sp, #44	@ 0x2c
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	613b      	str	r3, [r7, #16]
  return result;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800235e:	2320      	movs	r3, #32
 8002360:	e003      	b.n	800236a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	2103      	movs	r1, #3
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	401a      	ands	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	61fb      	str	r3, [r7, #28]
  return result;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800238c:	2320      	movs	r3, #32
 800238e:	e003      	b.n	8002398 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	60da      	str	r2, [r3, #12]
}
 80023a6:	bf00      	nop
 80023a8:	372c      	adds	r7, #44	@ 0x2c
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <LL_GPIO_SetAFPin_0_7>:
{
 80023b2:	b480      	push	{r7}
 80023b4:	b08b      	sub	sp, #44	@ 0x2c
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a1a      	ldr	r2, [r3, #32]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	fa93 f3a3 	rbit	r3, r3
 80023cc:	613b      	str	r3, [r7, #16]
  return result;
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80023d8:	2320      	movs	r3, #32
 80023da:	e003      	b.n	80023e4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	210f      	movs	r1, #15
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	401a      	ands	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	61fb      	str	r3, [r7, #28]
  return result;
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002406:	2320      	movs	r3, #32
 8002408:	e003      	b.n	8002412 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	431a      	orrs	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	621a      	str	r2, [r3, #32]
}
 8002420:	bf00      	nop
 8002422:	372c      	adds	r7, #44	@ 0x2c
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_GPIO_SetAFPin_8_15>:
{
 800242c:	b480      	push	{r7}
 800242e:	b08b      	sub	sp, #44	@ 0x2c
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	613b      	str	r3, [r7, #16]
  return result;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e003      	b.n	8002460 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	210f      	movs	r1, #15
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	0a1b      	lsrs	r3, r3, #8
 8002470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	fa93 f3a3 	rbit	r3, r3
 8002478:	61fb      	str	r3, [r7, #28]
  return result;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e003      	b.n	8002490 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	431a      	orrs	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800249e:	bf00      	nop
 80024a0:	372c      	adds	r7, #44	@ 0x2c
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b088      	sub	sp, #32
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	60fb      	str	r3, [r7, #12]
  return result;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <LL_GPIO_Init+0x26>
    return 32U;
 80024cc:	2320      	movs	r3, #32
 80024ce:	e003      	b.n	80024d8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80024da:	e048      	b.n	800256e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2101      	movs	r1, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d03a      	beq.n	8002568 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d003      	beq.n	8002502 <LL_GPIO_Init+0x58>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d10e      	bne.n	8002520 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	461a      	mov	r2, r3
 8002508:	69b9      	ldr	r1, [r7, #24]
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff fed7 	bl	80022be <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6819      	ldr	r1, [r3, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	461a      	mov	r2, r3
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff feb7 	bl	800228e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	461a      	mov	r2, r3
 8002526:	69b9      	ldr	r1, [r7, #24]
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff05 	bl	8002338 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d111      	bne.n	800255a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2bff      	cmp	r3, #255	@ 0xff
 800253a:	d807      	bhi.n	800254c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	461a      	mov	r2, r3
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff34 	bl	80023b2 <LL_GPIO_SetAFPin_0_7>
 800254a:	e006      	b.n	800255a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	461a      	mov	r2, r3
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff69 	bl	800242c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	461a      	mov	r2, r3
 8002560:	69b9      	ldr	r1, [r7, #24]
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff fe56 	bl	8002214 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	3301      	adds	r3, #1
 800256c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1af      	bne.n	80024dc <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <LL_RCC_HSI_IsReady>:
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800258c:	4b07      	ldr	r3, [pc, #28]	@ (80025ac <LL_RCC_HSI_IsReady+0x24>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002598:	d101      	bne.n	800259e <LL_RCC_HSI_IsReady+0x16>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <LL_RCC_HSI_IsReady+0x18>
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000

080025b0 <LL_RCC_LSE_IsReady>:
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80025b4:	4b07      	ldr	r3, [pc, #28]	@ (80025d4 <LL_RCC_LSE_IsReady+0x24>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d101      	bne.n	80025c6 <LL_RCC_LSE_IsReady+0x16>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <LL_RCC_LSE_IsReady+0x18>
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40021000 	.word	0x40021000

080025d8 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d101      	bne.n	80025ec <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40021000 	.word	0x40021000

080025fc <LL_RCC_MSI_GetRange>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002600:	4b04      	ldr	r3, [pc, #16]	@ (8002614 <LL_RCC_MSI_GetRange+0x18>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002608:	4618      	mov	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000

08002618 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800261e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002622:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40021000 	.word	0x40021000

08002634 <LL_RCC_GetSysClkSource>:
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002638:	4b04      	ldr	r3, [pc, #16]	@ (800264c <LL_RCC_GetSysClkSource+0x18>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000

08002650 <LL_RCC_GetAHBPrescaler>:
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002654:	4b04      	ldr	r3, [pc, #16]	@ (8002668 <LL_RCC_GetAHBPrescaler+0x18>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000

0800266c <LL_RCC_GetAPB1Prescaler>:
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002670:	4b04      	ldr	r3, [pc, #16]	@ (8002684 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000

08002688 <LL_RCC_GetAPB2Prescaler>:
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800268c:	4b04      	ldr	r3, [pc, #16]	@ (80026a0 <LL_RCC_GetAPB2Prescaler+0x18>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40021000 	.word	0x40021000

080026a4 <LL_RCC_GetUSARTClockSource>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80026ac:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <LL_RCC_GetUSARTClockSource+0x24>)
 80026ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	401a      	ands	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	041b      	lsls	r3, r3, #16
 80026ba:	4313      	orrs	r3, r2
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40021000 	.word	0x40021000

080026cc <LL_RCC_GetUARTClockSource>:
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80026d4:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <LL_RCC_GetUARTClockSource+0x24>)
 80026d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	401a      	ands	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	041b      	lsls	r3, r3, #16
 80026e2:	4313      	orrs	r3, r2
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	40021000 	.word	0x40021000

080026f4 <LL_RCC_PLL_GetMainSource>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80026f8:	4b04      	ldr	r3, [pc, #16]	@ (800270c <LL_RCC_PLL_GetMainSource+0x18>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f003 0303 	and.w	r3, r3, #3
}
 8002700:	4618      	mov	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <LL_RCC_PLL_GetN>:
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002714:	4b04      	ldr	r3, [pc, #16]	@ (8002728 <LL_RCC_PLL_GetN+0x18>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	0a1b      	lsrs	r3, r3, #8
 800271a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800271e:	4618      	mov	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	40021000 	.word	0x40021000

0800272c <LL_RCC_PLL_GetR>:
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002730:	4b04      	ldr	r3, [pc, #16]	@ (8002744 <LL_RCC_PLL_GetR+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000

08002748 <LL_RCC_PLL_GetDivider>:
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800274c:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <LL_RCC_PLL_GetDivider+0x18>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000

08002764 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d137      	bne.n	80027e6 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ff94 	bl	80026a4 <LL_RCC_GetUSARTClockSource>
 800277c:	4603      	mov	r3, r0
 800277e:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8002782:	2b03      	cmp	r3, #3
 8002784:	f200 80b3 	bhi.w	80028ee <LL_RCC_GetUSARTClockFreq+0x18a>
 8002788:	a201      	add	r2, pc, #4	@ (adr r2, 8002790 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800278a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278e:	bf00      	nop
 8002790:	080027cf 	.word	0x080027cf
 8002794:	080027a1 	.word	0x080027a1
 8002798:	080027a9 	.word	0x080027a9
 800279c:	080027bb 	.word	0x080027bb
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80027a0:	f000 f912 	bl	80029c8 <RCC_GetSystemClockFreq>
 80027a4:	60f8      	str	r0, [r7, #12]
        break;
 80027a6:	e0b3      	b.n	8002910 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80027a8:	f7ff feee 	bl	8002588 <LL_RCC_HSI_IsReady>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 809f 	beq.w	80028f2 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 80027b4:	4b59      	ldr	r3, [pc, #356]	@ (800291c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80027b6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80027b8:	e09b      	b.n	80028f2 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80027ba:	f7ff fef9 	bl	80025b0 <LL_RCC_LSE_IsReady>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 8098 	beq.w	80028f6 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 80027c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027ca:	60fb      	str	r3, [r7, #12]
        }
        break;
 80027cc:	e093      	b.n	80028f6 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80027ce:	f000 f8fb 	bl	80029c8 <RCC_GetSystemClockFreq>
 80027d2:	4603      	mov	r3, r0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 f985 	bl	8002ae4 <RCC_GetHCLKClockFreq>
 80027da:	4603      	mov	r3, r0
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 f9ab 	bl	8002b38 <RCC_GetPCLK2ClockFreq>
 80027e2:	60f8      	str	r0, [r7, #12]
        break;
 80027e4:	e094      	b.n	8002910 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	d146      	bne.n	800287a <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff59 	bl	80026a4 <LL_RCC_GetUSARTClockSource>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80027f8:	2b0c      	cmp	r3, #12
 80027fa:	d87e      	bhi.n	80028fa <LL_RCC_GetUSARTClockFreq+0x196>
 80027fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002804 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80027fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002802:	bf00      	nop
 8002804:	08002863 	.word	0x08002863
 8002808:	080028fb 	.word	0x080028fb
 800280c:	080028fb 	.word	0x080028fb
 8002810:	080028fb 	.word	0x080028fb
 8002814:	08002839 	.word	0x08002839
 8002818:	080028fb 	.word	0x080028fb
 800281c:	080028fb 	.word	0x080028fb
 8002820:	080028fb 	.word	0x080028fb
 8002824:	08002841 	.word	0x08002841
 8002828:	080028fb 	.word	0x080028fb
 800282c:	080028fb 	.word	0x080028fb
 8002830:	080028fb 	.word	0x080028fb
 8002834:	08002851 	.word	0x08002851
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002838:	f000 f8c6 	bl	80029c8 <RCC_GetSystemClockFreq>
 800283c:	60f8      	str	r0, [r7, #12]
        break;
 800283e:	e067      	b.n	8002910 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002840:	f7ff fea2 	bl	8002588 <LL_RCC_HSI_IsReady>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d059      	beq.n	80028fe <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 800284a:	4b34      	ldr	r3, [pc, #208]	@ (800291c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800284c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800284e:	e056      	b.n	80028fe <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002850:	f7ff feae 	bl	80025b0 <LL_RCC_LSE_IsReady>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d053      	beq.n	8002902 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800285a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800285e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002860:	e04f      	b.n	8002902 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002862:	f000 f8b1 	bl	80029c8 <RCC_GetSystemClockFreq>
 8002866:	4603      	mov	r3, r0
 8002868:	4618      	mov	r0, r3
 800286a:	f000 f93b 	bl	8002ae4 <RCC_GetHCLKClockFreq>
 800286e:	4603      	mov	r3, r0
 8002870:	4618      	mov	r0, r3
 8002872:	f000 f94d 	bl	8002b10 <RCC_GetPCLK1ClockFreq>
 8002876:	60f8      	str	r0, [r7, #12]
        break;
 8002878:	e04a      	b.n	8002910 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b30      	cmp	r3, #48	@ 0x30
 800287e:	d147      	bne.n	8002910 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff0f 	bl	80026a4 <LL_RCC_GetUSARTClockSource>
 8002886:	4603      	mov	r3, r0
 8002888:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 800288c:	d01a      	beq.n	80028c4 <LL_RCC_GetUSARTClockFreq+0x160>
 800288e:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8002892:	d838      	bhi.n	8002906 <LL_RCC_GetUSARTClockFreq+0x1a2>
 8002894:	4a22      	ldr	r2, [pc, #136]	@ (8002920 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00c      	beq.n	80028b4 <LL_RCC_GetUSARTClockFreq+0x150>
 800289a:	4a21      	ldr	r2, [pc, #132]	@ (8002920 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d832      	bhi.n	8002906 <LL_RCC_GetUSARTClockFreq+0x1a2>
 80028a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80028a4:	d017      	beq.n	80028d6 <LL_RCC_GetUSARTClockFreq+0x172>
 80028a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002924 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d12c      	bne.n	8002906 <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80028ac:	f000 f88c 	bl	80029c8 <RCC_GetSystemClockFreq>
 80028b0:	60f8      	str	r0, [r7, #12]
          break;
 80028b2:	e02d      	b.n	8002910 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80028b4:	f7ff fe68 	bl	8002588 <LL_RCC_HSI_IsReady>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d025      	beq.n	800290a <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 80028be:	4b17      	ldr	r3, [pc, #92]	@ (800291c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80028c0:	60fb      	str	r3, [r7, #12]
          }
          break;
 80028c2:	e022      	b.n	800290a <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80028c4:	f7ff fe74 	bl	80025b0 <LL_RCC_LSE_IsReady>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d01f      	beq.n	800290e <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 80028ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028d2:	60fb      	str	r3, [r7, #12]
          }
          break;
 80028d4:	e01b      	b.n	800290e <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80028d6:	f000 f877 	bl	80029c8 <RCC_GetSystemClockFreq>
 80028da:	4603      	mov	r3, r0
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 f901 	bl	8002ae4 <RCC_GetHCLKClockFreq>
 80028e2:	4603      	mov	r3, r0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 f913 	bl	8002b10 <RCC_GetPCLK1ClockFreq>
 80028ea:	60f8      	str	r0, [r7, #12]
          break;
 80028ec:	e010      	b.n	8002910 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80028ee:	bf00      	nop
 80028f0:	e00e      	b.n	8002910 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80028f2:	bf00      	nop
 80028f4:	e00c      	b.n	8002910 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80028f6:	bf00      	nop
 80028f8:	e00a      	b.n	8002910 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80028fa:	bf00      	nop
 80028fc:	e008      	b.n	8002910 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 80028fe:	bf00      	nop
 8002900:	e006      	b.n	8002910 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002902:	bf00      	nop
 8002904:	e004      	b.n	8002910 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8002906:	bf00      	nop
 8002908:	e002      	b.n	8002910 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 800290a:	bf00      	nop
 800290c:	e000      	b.n	8002910 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 800290e:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8002910:	68fb      	ldr	r3, [r7, #12]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	00f42400 	.word	0x00f42400
 8002920:	00300020 	.word	0x00300020
 8002924:	00300010 	.word	0x00300010

08002928 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2bc0      	cmp	r3, #192	@ 0xc0
 8002938:	d13b      	bne.n	80029b2 <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff fec6 	bl	80026cc <LL_RCC_GetUARTClockSource>
 8002940:	4603      	mov	r3, r0
 8002942:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8002946:	d01a      	beq.n	800297e <LL_RCC_GetUARTClockFreq+0x56>
 8002948:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 800294c:	d82c      	bhi.n	80029a8 <LL_RCC_GetUARTClockFreq+0x80>
 800294e:	4a1b      	ldr	r2, [pc, #108]	@ (80029bc <LL_RCC_GetUARTClockFreq+0x94>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00c      	beq.n	800296e <LL_RCC_GetUARTClockFreq+0x46>
 8002954:	4a19      	ldr	r2, [pc, #100]	@ (80029bc <LL_RCC_GetUARTClockFreq+0x94>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d826      	bhi.n	80029a8 <LL_RCC_GetUARTClockFreq+0x80>
 800295a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800295e:	d017      	beq.n	8002990 <LL_RCC_GetUARTClockFreq+0x68>
 8002960:	4a17      	ldr	r2, [pc, #92]	@ (80029c0 <LL_RCC_GetUARTClockFreq+0x98>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d120      	bne.n	80029a8 <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8002966:	f000 f82f 	bl	80029c8 <RCC_GetSystemClockFreq>
 800296a:	60f8      	str	r0, [r7, #12]
        break;
 800296c:	e021      	b.n	80029b2 <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800296e:	f7ff fe0b 	bl	8002588 <LL_RCC_HSI_IsReady>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d019      	beq.n	80029ac <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 8002978:	4b12      	ldr	r3, [pc, #72]	@ (80029c4 <LL_RCC_GetUARTClockFreq+0x9c>)
 800297a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800297c:	e016      	b.n	80029ac <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800297e:	f7ff fe17 	bl	80025b0 <LL_RCC_LSE_IsReady>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d013      	beq.n	80029b0 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 8002988:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800298c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800298e:	e00f      	b.n	80029b0 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002990:	f000 f81a 	bl	80029c8 <RCC_GetSystemClockFreq>
 8002994:	4603      	mov	r3, r0
 8002996:	4618      	mov	r0, r3
 8002998:	f000 f8a4 	bl	8002ae4 <RCC_GetHCLKClockFreq>
 800299c:	4603      	mov	r3, r0
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f8b6 	bl	8002b10 <RCC_GetPCLK1ClockFreq>
 80029a4:	60f8      	str	r0, [r7, #12]
        break;
 80029a6:	e004      	b.n	80029b2 <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 80029a8:	bf00      	nop
 80029aa:	e002      	b.n	80029b2 <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 80029ac:	bf00      	nop
 80029ae:	e000      	b.n	80029b2 <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 80029b0:	bf00      	nop
        break;
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	00c00080 	.word	0x00c00080
 80029c0:	00c00040 	.word	0x00c00040
 80029c4:	00f42400 	.word	0x00f42400

080029c8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80029ce:	f7ff fe31 	bl	8002634 <LL_RCC_GetSysClkSource>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b0c      	cmp	r3, #12
 80029d6:	d851      	bhi.n	8002a7c <RCC_GetSystemClockFreq+0xb4>
 80029d8:	a201      	add	r2, pc, #4	@ (adr r2, 80029e0 <RCC_GetSystemClockFreq+0x18>)
 80029da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029de:	bf00      	nop
 80029e0:	08002a15 	.word	0x08002a15
 80029e4:	08002a7d 	.word	0x08002a7d
 80029e8:	08002a7d 	.word	0x08002a7d
 80029ec:	08002a7d 	.word	0x08002a7d
 80029f0:	08002a69 	.word	0x08002a69
 80029f4:	08002a7d 	.word	0x08002a7d
 80029f8:	08002a7d 	.word	0x08002a7d
 80029fc:	08002a7d 	.word	0x08002a7d
 8002a00:	08002a6f 	.word	0x08002a6f
 8002a04:	08002a7d 	.word	0x08002a7d
 8002a08:	08002a7d 	.word	0x08002a7d
 8002a0c:	08002a7d 	.word	0x08002a7d
 8002a10:	08002a75 	.word	0x08002a75
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002a14:	f7ff fde0 	bl	80025d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d111      	bne.n	8002a42 <RCC_GetSystemClockFreq+0x7a>
 8002a1e:	f7ff fddb 	bl	80025d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d004      	beq.n	8002a32 <RCC_GetSystemClockFreq+0x6a>
 8002a28:	f7ff fde8 	bl	80025fc <LL_RCC_MSI_GetRange>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	e003      	b.n	8002a3a <RCC_GetSystemClockFreq+0x72>
 8002a32:	f7ff fdf1 	bl	8002618 <LL_RCC_MSI_GetRangeAfterStandby>
 8002a36:	4603      	mov	r3, r0
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	4a28      	ldr	r2, [pc, #160]	@ (8002adc <RCC_GetSystemClockFreq+0x114>)
 8002a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a40:	e010      	b.n	8002a64 <RCC_GetSystemClockFreq+0x9c>
 8002a42:	f7ff fdc9 	bl	80025d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <RCC_GetSystemClockFreq+0x8e>
 8002a4c:	f7ff fdd6 	bl	80025fc <LL_RCC_MSI_GetRange>
 8002a50:	4603      	mov	r3, r0
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	e003      	b.n	8002a5e <RCC_GetSystemClockFreq+0x96>
 8002a56:	f7ff fddf 	bl	8002618 <LL_RCC_MSI_GetRangeAfterStandby>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002adc <RCC_GetSystemClockFreq+0x114>)
 8002a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a64:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002a66:	e033      	b.n	8002ad0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002a68:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae0 <RCC_GetSystemClockFreq+0x118>)
 8002a6a:	607b      	str	r3, [r7, #4]
      break;
 8002a6c:	e030      	b.n	8002ad0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae0 <RCC_GetSystemClockFreq+0x118>)
 8002a70:	607b      	str	r3, [r7, #4]
      break;
 8002a72:	e02d      	b.n	8002ad0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002a74:	f000 f874 	bl	8002b60 <RCC_PLL_GetFreqDomain_SYS>
 8002a78:	6078      	str	r0, [r7, #4]
      break;
 8002a7a:	e029      	b.n	8002ad0 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002a7c:	f7ff fdac 	bl	80025d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d111      	bne.n	8002aaa <RCC_GetSystemClockFreq+0xe2>
 8002a86:	f7ff fda7 	bl	80025d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d004      	beq.n	8002a9a <RCC_GetSystemClockFreq+0xd2>
 8002a90:	f7ff fdb4 	bl	80025fc <LL_RCC_MSI_GetRange>
 8002a94:	4603      	mov	r3, r0
 8002a96:	0a1b      	lsrs	r3, r3, #8
 8002a98:	e003      	b.n	8002aa2 <RCC_GetSystemClockFreq+0xda>
 8002a9a:	f7ff fdbd 	bl	8002618 <LL_RCC_MSI_GetRangeAfterStandby>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8002adc <RCC_GetSystemClockFreq+0x114>)
 8002aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa8:	e010      	b.n	8002acc <RCC_GetSystemClockFreq+0x104>
 8002aaa:	f7ff fd95 	bl	80025d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d004      	beq.n	8002abe <RCC_GetSystemClockFreq+0xf6>
 8002ab4:	f7ff fda2 	bl	80025fc <LL_RCC_MSI_GetRange>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	e003      	b.n	8002ac6 <RCC_GetSystemClockFreq+0xfe>
 8002abe:	f7ff fdab 	bl	8002618 <LL_RCC_MSI_GetRangeAfterStandby>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	4a05      	ldr	r2, [pc, #20]	@ (8002adc <RCC_GetSystemClockFreq+0x114>)
 8002ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002acc:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002ace:	bf00      	nop
  }

  return frequency;
 8002ad0:	687b      	ldr	r3, [r7, #4]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	0800353c 	.word	0x0800353c
 8002ae0:	00f42400 	.word	0x00f42400

08002ae4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002aec:	f7ff fdb0 	bl	8002650 <LL_RCC_GetAHBPrescaler>
 8002af0:	4603      	mov	r3, r0
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	4a04      	ldr	r2, [pc, #16]	@ (8002b0c <RCC_GetHCLKClockFreq+0x28>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	461a      	mov	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	40d3      	lsrs	r3, r2
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	08003524 	.word	0x08003524

08002b10 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002b18:	f7ff fda8 	bl	800266c <LL_RCC_GetAPB1Prescaler>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	4a04      	ldr	r2, [pc, #16]	@ (8002b34 <RCC_GetPCLK1ClockFreq+0x24>)
 8002b22:	5cd3      	ldrb	r3, [r2, r3]
 8002b24:	461a      	mov	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	40d3      	lsrs	r3, r2
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	08003534 	.word	0x08003534

08002b38 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002b40:	f7ff fda2 	bl	8002688 <LL_RCC_GetAPB2Prescaler>
 8002b44:	4603      	mov	r3, r0
 8002b46:	0adb      	lsrs	r3, r3, #11
 8002b48:	4a04      	ldr	r2, [pc, #16]	@ (8002b5c <RCC_GetPCLK2ClockFreq+0x24>)
 8002b4a:	5cd3      	ldrb	r3, [r2, r3]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	40d3      	lsrs	r3, r2
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	08003534 	.word	0x08003534

08002b60 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002b66:	f7ff fdc5 	bl	80026f4 <LL_RCC_PLL_GetMainSource>
 8002b6a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d036      	beq.n	8002be0 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d836      	bhi.n	8002be6 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d003      	beq.n	8002b86 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d02a      	beq.n	8002bda <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8002b84:	e02f      	b.n	8002be6 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002b86:	f7ff fd27 	bl	80025d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d111      	bne.n	8002bb4 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8002b90:	f7ff fd22 	bl	80025d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8002b9a:	f7ff fd2f 	bl	80025fc <LL_RCC_MSI_GetRange>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	0a1b      	lsrs	r3, r3, #8
 8002ba2:	e003      	b.n	8002bac <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8002ba4:	f7ff fd38 	bl	8002618 <LL_RCC_MSI_GetRangeAfterStandby>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	4a2f      	ldr	r2, [pc, #188]	@ (8002c6c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb2:	e010      	b.n	8002bd6 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8002bb4:	f7ff fd10 	bl	80025d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8002bbe:	f7ff fd1d 	bl	80025fc <LL_RCC_MSI_GetRange>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	e003      	b.n	8002bd0 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8002bc8:	f7ff fd26 	bl	8002618 <LL_RCC_MSI_GetRangeAfterStandby>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	4a26      	ldr	r2, [pc, #152]	@ (8002c6c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd6:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002bd8:	e02f      	b.n	8002c3a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002bda:	4b25      	ldr	r3, [pc, #148]	@ (8002c70 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8002bdc:	607b      	str	r3, [r7, #4]
      break;
 8002bde:	e02c      	b.n	8002c3a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002be0:	4b23      	ldr	r3, [pc, #140]	@ (8002c70 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8002be2:	607b      	str	r3, [r7, #4]
      break;
 8002be4:	e029      	b.n	8002c3a <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002be6:	f7ff fcf7 	bl	80025d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d111      	bne.n	8002c14 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8002bf0:	f7ff fcf2 	bl	80025d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d004      	beq.n	8002c04 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8002bfa:	f7ff fcff 	bl	80025fc <LL_RCC_MSI_GetRange>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	e003      	b.n	8002c0c <RCC_PLL_GetFreqDomain_SYS+0xac>
 8002c04:	f7ff fd08 	bl	8002618 <LL_RCC_MSI_GetRangeAfterStandby>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	0a1b      	lsrs	r3, r3, #8
 8002c0c:	4a17      	ldr	r2, [pc, #92]	@ (8002c6c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c12:	e010      	b.n	8002c36 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8002c14:	f7ff fce0 	bl	80025d8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d004      	beq.n	8002c28 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8002c1e:	f7ff fced 	bl	80025fc <LL_RCC_MSI_GetRange>
 8002c22:	4603      	mov	r3, r0
 8002c24:	091b      	lsrs	r3, r3, #4
 8002c26:	e003      	b.n	8002c30 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8002c28:	f7ff fcf6 	bl	8002618 <LL_RCC_MSI_GetRangeAfterStandby>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	4a0e      	ldr	r2, [pc, #56]	@ (8002c6c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8002c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c36:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002c38:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002c3a:	f7ff fd85 	bl	8002748 <LL_RCC_PLL_GetDivider>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	3301      	adds	r3, #1
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	fbb2 f4f3 	udiv	r4, r2, r3
 8002c4a:	f7ff fd61 	bl	8002710 <LL_RCC_PLL_GetN>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	fb03 f404 	mul.w	r4, r3, r4
 8002c54:	f7ff fd6a 	bl	800272c <LL_RCC_PLL_GetR>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	0e5b      	lsrs	r3, r3, #25
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd90      	pop	{r4, r7, pc}
 8002c6c:	0800353c 	.word	0x0800353c
 8002c70:	00f42400 	.word	0x00f42400

08002c74 <LL_RTC_SetHourFormat>:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetHourFormat(RTC_TypeDef *RTCx, uint32_t HourFormat)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <LL_RTC_GetHourFormat>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RTC_HOURFORMAT_24HOUR
  *         @arg @ref LL_RTC_HOURFORMAT_AMPM
  */
__STATIC_INLINE uint32_t LL_RTC_GetHourFormat(RTC_TypeDef *RTCx)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->CR, RTC_CR_FMT));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_RTC_EnableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_EnableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  /* Set the Initialization mode */
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc4:	60da      	str	r2, [r3, #12]
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <LL_RTC_DisableInitMode>:
  * @rmtoll ISR          INIT          LL_RTC_DisableInitMode
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* Exit Initialization mode */
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ce0:	60da      	str	r2, [r3, #12]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_RTC_IsShadowRegBypassEnabled>:
  * @rmtoll RTC_CR           BYPSHAD       LL_RTC_IsShadowRegBypassEnabled
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsShadowRegBypassEnabled(RTC_TypeDef *RTCx)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->CR, RTC_CR_BYPSHAD) == (RTC_CR_BYPSHAD));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	bf0c      	ite	eq
 8002d02:	2301      	moveq	r3, #1
 8002d04:	2300      	movne	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	611a      	str	r2, [r3, #16]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002d4e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	611a      	str	r2, [r3, #16]
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LL_RTC_EnableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	22ff      	movs	r2, #255	@ 0xff
 8002d72:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_RTC_DisableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	22ca      	movs	r2, #202	@ 0xca
 8002d8c:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2253      	movs	r2, #83	@ 0x53
 8002d92:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_RTC_TIME_Config>:
  * @param  Minutes Value between Min_Data=0x00 and Max_Data=0x59
  * @param  Seconds Value between Min_Data=0x00 and Max_Data=0x59
  * @retval None
  */
__STATIC_INLINE void LL_RTC_TIME_Config(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours, uint32_t Minutes, uint32_t Seconds)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b087      	sub	sp, #28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
 8002dac:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]

  temp = Format12_24                                                                                    | \
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	041b      	lsls	r3, r3, #16
 8002db6:	f403 027f 	and.w	r2, r3, #16711680	@ 0xff0000
  temp = Format12_24                                                                                    | \
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8002dc4:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 137f 	bic.w	r3, r3, #8323199	@ 0x7f007f
 8002dd6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	601a      	str	r2, [r3, #0]
}
 8002de2:	bf00      	nop
 8002de4:	371c      	adds	r7, #28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <LL_RTC_DATE_Config>:
  *         @arg @ref LL_RTC_MONTH_DECEMBER
  * @param  Year Value between Min_Data=0x00 and Max_Data=0x99
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month, uint32_t Year)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
 8002dfc:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]

  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	041b      	lsls	r3, r3, #16
 8002e0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8002e0e:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 8002e16:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <LL_RTC_DATE_Config+0x4c>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	605a      	str	r2, [r3, #4]
}
 8002e30:	bf00      	nop
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	ff0000c0 	.word	0xff0000c0

08002e40 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e50:	2b40      	cmp	r3, #64	@ 0x40
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <LL_RTC_IsActiveFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_IsActiveFlag_RS
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	bf0c      	ite	eq
 8002e7a:	2301      	moveq	r3, #1
 8002e7c:	2300      	movne	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_RTC_ClearFlag_RS>:
  * @rmtoll ISR          RSF           LL_RTC_ClearFlag_RS
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_RSF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9c:	f063 02a0 	orn	r2, r3, #160	@ 0xa0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	60da      	str	r2, [r3, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8002eb4:	4b07      	ldr	r3, [pc, #28]	@ (8002ed4 <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2301      	moveq	r3, #1
 8002ec4:	2300      	movne	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	e000e010 	.word	0xe000e010

08002ed8 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff ff4a 	bl	8002d80 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f96d 	bl	80031cc <LL_RTC_EnterInitMode>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d016      	beq.n	8002f26 <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4619      	mov	r1, r3
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff feb8 	bl	8002c74 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ff16 	bl	8002d3c <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4619      	mov	r1, r3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff fefc 	bl	8002d14 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff fed8 	bl	8002cd2 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 8002f22:	2300      	movs	r3, #0
 8002f24:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff ff1d 	bl	8002d66 <LL_RTC_EnableWriteProtection>

  return status;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <LL_RTC_TIME_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct)
{
 8002f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3a:	b089      	sub	sp, #36	@ 0x24
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if (RTC_Format == LL_RTC_FORMAT_BIN)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <LL_RTC_TIME_Init+0x2a>
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f7ff fea3 	bl	8002c9a <LL_RTC_GetHourFormat>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10c      	bne.n	8002f74 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(RTC_TimeStruct->Hours));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	e008      	b.n	8002f74 <LL_RTC_TIME_Init+0x3c>
    assert_param(IS_LL_RTC_MINUTES(RTC_TimeStruct->Minutes));
    assert_param(IS_LL_RTC_SECONDS(RTC_TimeStruct->Seconds));
  }
  else
  {
    if (LL_RTC_GetHourFormat(RTCx) != LL_RTC_HOURFORMAT_24HOUR)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7ff fe99 	bl	8002c9a <LL_RTC_GetHourFormat>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d102      	bne.n	8002f74 <LL_RTC_TIME_Init+0x3c>
      assert_param(IS_LL_RTC_HOUR12(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Hours)));
      assert_param(IS_LL_RTC_TIME_FORMAT(RTC_TimeStruct->TimeFormat));
    }
    else
    {
      RTC_TimeStruct->TimeFormat = 0x00U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
    assert_param(IS_LL_RTC_MINUTES(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Minutes)));
    assert_param(IS_LL_RTC_SECONDS(__LL_RTC_CONVERT_BCD2BIN(RTC_TimeStruct->Seconds)));
  }

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff ff03 	bl	8002d80 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f926 	bl	80031cc <LL_RTC_EnterInitMode>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d073      	beq.n	800306e <LL_RTC_TIME_Init+0x136>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00f      	beq.n	8002fac <LL_RTC_TIME_Init+0x74>
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6819      	ldr	r1, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	791b      	ldrb	r3, [r3, #4]
 8002f94:	461a      	mov	r2, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	795b      	ldrb	r3, [r3, #5]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8002f9a:	4618      	mov	r0, r3
                         RTC_TimeStruct->Minutes, RTC_TimeStruct->Seconds);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	799b      	ldrb	r3, [r3, #6]
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, RTC_TimeStruct->Hours,
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f7ff fefb 	bl	8002da0 <LL_RTC_TIME_Config>
 8002faa:	e04f      	b.n	800304c <LL_RTC_TIME_Init+0x114>
    }
    else
    {
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681c      	ldr	r4, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	791b      	ldrb	r3, [r3, #4]
 8002fb4:	4a32      	ldr	r2, [pc, #200]	@ (8003080 <LL_RTC_TIME_Init+0x148>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	08db      	lsrs	r3, r3, #3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	b2d8      	uxtb	r0, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	791a      	ldrb	r2, [r3, #4]
 8002fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8003080 <LL_RTC_TIME_Init+0x148>)
 8002fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fcc:	08d9      	lsrs	r1, r3, #3
 8002fce:	460b      	mov	r3, r1
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	4303      	orrs	r3, r0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Minutes),
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	795b      	ldrb	r3, [r3, #5]
 8002fe4:	4a26      	ldr	r2, [pc, #152]	@ (8003080 <LL_RTC_TIME_Init+0x148>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	08db      	lsrs	r3, r3, #3
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	b2d8      	uxtb	r0, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	795a      	ldrb	r2, [r3, #5]
 8002ff6:	4b22      	ldr	r3, [pc, #136]	@ (8003080 <LL_RTC_TIME_Init+0x148>)
 8002ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ffc:	08d9      	lsrs	r1, r3, #3
 8002ffe:	460b      	mov	r3, r1
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	4303      	orrs	r3, r0
 800300c:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 800300e:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Seconds));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	799b      	ldrb	r3, [r3, #6]
 8003014:	4a1a      	ldr	r2, [pc, #104]	@ (8003080 <LL_RTC_TIME_Init+0x148>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	08db      	lsrs	r3, r3, #3
 800301c:	b2db      	uxtb	r3, r3
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	b2d8      	uxtb	r0, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	799a      	ldrb	r2, [r3, #6]
 8003026:	4b16      	ldr	r3, [pc, #88]	@ (8003080 <LL_RTC_TIME_Init+0x148>)
 8003028:	fba3 1302 	umull	r1, r3, r3, r2
 800302c:	08d9      	lsrs	r1, r3, #3
 800302e:	460b      	mov	r3, r1
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	4303      	orrs	r3, r0
 800303c:	b2db      	uxtb	r3, r3
      LL_RTC_TIME_Config(RTCx, RTC_TimeStruct->TimeFormat, __LL_RTC_CONVERT_BIN2BCD(RTC_TimeStruct->Hours),
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	4633      	mov	r3, r6
 8003042:	462a      	mov	r2, r5
 8003044:	4621      	mov	r1, r4
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff feaa 	bl	8002da0 <LL_RTC_TIME_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7ff fe40 	bl	8002cd2 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7ff fe4b 	bl	8002cee <LL_RTC_IsShadowRegBypassEnabled>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d105      	bne.n	800306a <LL_RTC_TIME_Init+0x132>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f8e7 	bl	8003232 <LL_RTC_WaitForSynchro>
 8003064:	4603      	mov	r3, r0
 8003066:	75fb      	strb	r3, [r7, #23]
 8003068:	e001      	b.n	800306e <LL_RTC_TIME_Init+0x136>
    }
    else
    {
      status = SUCCESS;
 800306a:	2300      	movs	r3, #0
 800306c:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f7ff fe79 	bl	8002d66 <LL_RTC_EnableWriteProtection>

  return status;
 8003074:	7dfb      	ldrb	r3, [r7, #23]
}
 8003076:	4618      	mov	r0, r3
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800307e:	bf00      	nop
 8003080:	cccccccd 	.word	0xcccccccd

08003084 <LL_RTC_DATE_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Day register is configured
  *          - ERROR: RTC Day register is not configured
  */
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct)
{
 8003084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003086:	b089      	sub	sp, #36	@ 0x24
 8003088:	af02      	add	r7, sp, #8
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));
  assert_param(IS_LL_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == LL_RTC_FORMAT_BIN) && ((RTC_DateStruct->Month & 0x10U) == 0x10U))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10e      	bne.n	80030b8 <LL_RTC_DATE_Init+0x34>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	785b      	ldrb	r3, [r3, #1]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <LL_RTC_DATE_Init+0x34>
  {
    RTC_DateStruct->Month = (uint8_t)(((uint32_t) RTC_DateStruct->Month & (uint32_t)~(0x10U)) + 0x0AU);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	785b      	ldrb	r3, [r3, #1]
 80030aa:	f023 0310 	bic.w	r3, r3, #16
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	330a      	adds	r3, #10
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	705a      	strb	r2, [r3, #1]
    assert_param(IS_LL_RTC_DAY(__LL_RTC_CONVERT_BCD2BIN(RTC_DateStruct->Day)));
  }
  assert_param(IS_LL_RTC_WEEKDAY(RTC_DateStruct->WeekDay));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7ff fe61 	bl	8002d80 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f884 	bl	80031cc <LL_RTC_EnterInitMode>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d075      	beq.n	80031b6 <LL_RTC_DATE_Init+0x132>
  {
    /* Check the input parameters format */
    if (RTC_Format != LL_RTC_FORMAT_BIN)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d010      	beq.n	80030f2 <LL_RTC_DATE_Init+0x6e>
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, RTC_DateStruct->Day, RTC_DateStruct->Month, RTC_DateStruct->Year);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	789b      	ldrb	r3, [r3, #2]
 80030da:	461a      	mov	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	785b      	ldrb	r3, [r3, #1]
 80030e0:	4618      	mov	r0, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	78db      	ldrb	r3, [r3, #3]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	4603      	mov	r3, r0
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f7ff fe80 	bl	8002df0 <LL_RTC_DATE_Config>
 80030f0:	e050      	b.n	8003194 <LL_RTC_DATE_Init+0x110>
    }
    else
    {
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	461c      	mov	r4, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	789b      	ldrb	r3, [r3, #2]
 80030fc:	4a32      	ldr	r2, [pc, #200]	@ (80031c8 <LL_RTC_DATE_Init+0x144>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	08db      	lsrs	r3, r3, #3
 8003104:	b2db      	uxtb	r3, r3
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	b2d8      	uxtb	r0, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	789a      	ldrb	r2, [r3, #2]
 800310e:	4b2e      	ldr	r3, [pc, #184]	@ (80031c8 <LL_RTC_DATE_Init+0x144>)
 8003110:	fba3 1302 	umull	r1, r3, r3, r2
 8003114:	08d9      	lsrs	r1, r3, #3
 8003116:	460b      	mov	r3, r1
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	4303      	orrs	r3, r0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461d      	mov	r5, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	785b      	ldrb	r3, [r3, #1]
 800312c:	4a26      	ldr	r2, [pc, #152]	@ (80031c8 <LL_RTC_DATE_Init+0x144>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	08db      	lsrs	r3, r3, #3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	b2d8      	uxtb	r0, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	785a      	ldrb	r2, [r3, #1]
 800313e:	4b22      	ldr	r3, [pc, #136]	@ (80031c8 <LL_RTC_DATE_Init+0x144>)
 8003140:	fba3 1302 	umull	r1, r3, r3, r2
 8003144:	08d9      	lsrs	r1, r3, #3
 8003146:	460b      	mov	r3, r1
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	4303      	orrs	r3, r0
 8003154:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8003156:	461e      	mov	r6, r3
                         __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Month), __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Year));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	78db      	ldrb	r3, [r3, #3]
 800315c:	4a1a      	ldr	r2, [pc, #104]	@ (80031c8 <LL_RTC_DATE_Init+0x144>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	08db      	lsrs	r3, r3, #3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	b2d8      	uxtb	r0, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	78da      	ldrb	r2, [r3, #3]
 800316e:	4b16      	ldr	r3, [pc, #88]	@ (80031c8 <LL_RTC_DATE_Init+0x144>)
 8003170:	fba3 1302 	umull	r1, r3, r3, r2
 8003174:	08d9      	lsrs	r1, r3, #3
 8003176:	460b      	mov	r3, r1
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	4303      	orrs	r3, r0
 8003184:	b2db      	uxtb	r3, r3
      LL_RTC_DATE_Config(RTCx, RTC_DateStruct->WeekDay, __LL_RTC_CONVERT_BIN2BCD(RTC_DateStruct->Day),
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	4633      	mov	r3, r6
 800318a:	462a      	mov	r2, r5
 800318c:	4621      	mov	r1, r4
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7ff fe2e 	bl	8002df0 <LL_RTC_DATE_Config>
    }

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f7ff fd9c 	bl	8002cd2 <LL_RTC_DisableInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (LL_RTC_IsShadowRegBypassEnabled(RTCx) == 0U)
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f7ff fda7 	bl	8002cee <LL_RTC_IsShadowRegBypassEnabled>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d105      	bne.n	80031b2 <LL_RTC_DATE_Init+0x12e>
    {
      status = LL_RTC_WaitForSynchro(RTCx);
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f843 	bl	8003232 <LL_RTC_WaitForSynchro>
 80031ac:	4603      	mov	r3, r0
 80031ae:	75fb      	strb	r3, [r7, #23]
 80031b0:	e001      	b.n	80031b6 <LL_RTC_DATE_Init+0x132>
    }
    else
    {
      status = SUCCESS;
 80031b2:	2300      	movs	r3, #0
 80031b4:	75fb      	strb	r3, [r7, #23]
    }
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f7ff fdd5 	bl	8002d66 <LL_RTC_EnableWriteProtection>

  return status;
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	371c      	adds	r7, #28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c6:	bf00      	nop
 80031c8:	cccccccd 	.word	0xcccccccd

080031cc <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 80031d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031d8:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff fe2e 	bl	8002e40 <LL_RTC_IsActiveFlag_INIT>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d11e      	bne.n	8003228 <LL_RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff fd63 	bl	8002cb6 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff fe25 	bl	8002e40 <LL_RTC_IsActiveFlag_INIT>
 80031f6:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 80031f8:	e010      	b.n	800321c <LL_RTC_EnterInitMode+0x50>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 80031fa:	f7ff fe59 	bl	8002eb0 <LL_SYSTICK_IsActiveCounterFlag>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b01      	cmp	r3, #1
 8003202:	d102      	bne.n	800320a <LL_RTC_EnterInitMode+0x3e>
      {
        timeout --;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	3b01      	subs	r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fe18 	bl	8002e40 <LL_RTC_IsActiveFlag_INIT>
 8003210:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <LL_RTC_EnterInitMode+0x50>
      {
        status = ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <LL_RTC_EnterInitMode+0x5c>
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d1e8      	bne.n	80031fa <LL_RTC_EnterInitMode+0x2e>
      }
    }
  }
  return status;
 8003228:	7dfb      	ldrb	r3, [r7, #23]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <LL_RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b086      	sub	sp, #24
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_SYNCHRO_TIMEOUT;
 800323a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800323e:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8003240:	2300      	movs	r3, #0
 8003242:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Clear RSF flag */
  LL_RTC_ClearFlag_RS(RTCx);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff fe21 	bl	8002e8c <LL_RTC_ClearFlag_RS>

  /* Wait the registers to be synchronised */
  tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff fe0b 	bl	8002e66 <LL_RTC_IsActiveFlag_RS>
 8003250:	6138      	str	r0, [r7, #16]
  while ((timeout != 0U) && (tmp != 1U))
 8003252:	e010      	b.n	8003276 <LL_RTC_WaitForSynchro+0x44>
  {
    if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8003254:	f7ff fe2c 	bl	8002eb0 <LL_SYSTICK_IsActiveCounterFlag>
 8003258:	4603      	mov	r3, r0
 800325a:	2b01      	cmp	r3, #1
 800325c:	d102      	bne.n	8003264 <LL_RTC_WaitForSynchro+0x32>
    {
      timeout--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3b01      	subs	r3, #1
 8003262:	60fb      	str	r3, [r7, #12]
    }
    tmp = LL_RTC_IsActiveFlag_RS(RTCx);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff fdfe 	bl	8002e66 <LL_RTC_IsActiveFlag_RS>
 800326a:	6138      	str	r0, [r7, #16]
    if (timeout == 0U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <LL_RTC_WaitForSynchro+0x44>
    {
      status = ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
  while ((timeout != 0U) && (tmp != 1U))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <LL_RTC_WaitForSynchro+0x50>
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d1e8      	bne.n	8003254 <LL_RTC_WaitForSynchro+0x22>
    }
  }

  return (status);
 8003282:	7dfb      	ldrb	r3, [r7, #23]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <LL_USART_IsEnabled>:
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <LL_USART_IsEnabled+0x18>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <LL_USART_IsEnabled+0x1a>
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <LL_USART_SetStopBitsLength>:
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	605a      	str	r2, [r3, #4]
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <LL_USART_SetHWFlowCtrl>:
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	609a      	str	r2, [r3, #8]
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <LL_USART_SetBaudRate>:
{
 80032fe:	b480      	push	{r7}
 8003300:	b087      	sub	sp, #28
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003312:	d11a      	bne.n	800334a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	005a      	lsls	r2, r3, #1
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	441a      	add	r2, r3
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	fbb2 f3f3 	udiv	r3, r2, r3
 8003324:	b29b      	uxth	r3, r3
 8003326:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	b29b      	uxth	r3, r3
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	60da      	str	r2, [r3, #12]
}
 8003348:	e00a      	b.n	8003360 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	085a      	lsrs	r2, r3, #1
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	441a      	add	r2, r3
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	b29b      	uxth	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	60da      	str	r2, [r3, #12]
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ff84 	bl	800328c <LL_USART_IsEnabled>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d151      	bne.n	800342e <LL_USART_Init+0xc2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b2a      	ldr	r3, [pc, #168]	@ (8003438 <LL_USART_Init+0xcc>)
 8003390:	4013      	ands	r3, r2
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	6851      	ldr	r1, [r2, #4]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	68d2      	ldr	r2, [r2, #12]
 800339a:	4311      	orrs	r1, r2
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	6912      	ldr	r2, [r2, #16]
 80033a0:	4311      	orrs	r1, r2
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	6992      	ldr	r2, [r2, #24]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	4619      	mov	r1, r3
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff7c 	bl	80032b2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	4619      	mov	r1, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff89 	bl	80032d8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a1c      	ldr	r2, [pc, #112]	@ (800343c <LL_USART_Init+0xd0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d104      	bne.n	80033d8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80033ce:	2003      	movs	r0, #3
 80033d0:	f7ff f9c8 	bl	8002764 <LL_RCC_GetUSARTClockFreq>
 80033d4:	60b8      	str	r0, [r7, #8]
 80033d6:	e019      	b.n	800340c <LL_USART_Init+0xa0>
    }
    else if (USARTx == USART2)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a19      	ldr	r2, [pc, #100]	@ (8003440 <LL_USART_Init+0xd4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d104      	bne.n	80033ea <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80033e0:	200c      	movs	r0, #12
 80033e2:	f7ff f9bf 	bl	8002764 <LL_RCC_GetUSARTClockFreq>
 80033e6:	60b8      	str	r0, [r7, #8]
 80033e8:	e010      	b.n	800340c <LL_USART_Init+0xa0>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a15      	ldr	r2, [pc, #84]	@ (8003444 <LL_USART_Init+0xd8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d104      	bne.n	80033fc <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80033f2:	2030      	movs	r0, #48	@ 0x30
 80033f4:	f7ff f9b6 	bl	8002764 <LL_RCC_GetUSARTClockFreq>
 80033f8:	60b8      	str	r0, [r7, #8]
 80033fa:	e007      	b.n	800340c <LL_USART_Init+0xa0>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a12      	ldr	r2, [pc, #72]	@ (8003448 <LL_USART_Init+0xdc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d103      	bne.n	800340c <LL_USART_Init+0xa0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8003404:	20c0      	movs	r0, #192	@ 0xc0
 8003406:	f7ff fa8f 	bl	8002928 <LL_RCC_GetUARTClockFreq>
 800340a:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <LL_USART_Init+0xc2>
        && (USART_InitStruct->BaudRate != 0U))
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <LL_USART_Init+0xc2>
    {
      status = SUCCESS;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff68 	bl	80032fe <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800342e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	efff69f3 	.word	0xefff69f3
 800343c:	40013800 	.word	0x40013800
 8003440:	40004400 	.word	0x40004400
 8003444:	40004800 	.word	0x40004800
 8003448:	40004c00 	.word	0x40004c00

0800344c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	4a07      	ldr	r2, [pc, #28]	@ (800347c <LL_InitTick+0x30>)
 8003460:	3b01      	subs	r3, #1
 8003462:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003464:	4b05      	ldr	r3, [pc, #20]	@ (800347c <LL_InitTick+0x30>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800346a:	4b04      	ldr	r3, [pc, #16]	@ (800347c <LL_InitTick+0x30>)
 800346c:	2205      	movs	r2, #5
 800346e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000e010 	.word	0xe000e010

08003480 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003488:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff ffdd 	bl	800344c <LL_InitTick>
}
 8003492:	bf00      	nop
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80034a4:	4a04      	ldr	r2, [pc, #16]	@ (80034b8 <LL_SetSystemCoreClock+0x1c>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6013      	str	r3, [r2, #0]
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20000000 	.word	0x20000000

080034bc <__libc_init_array>:
 80034bc:	b570      	push	{r4, r5, r6, lr}
 80034be:	4d0d      	ldr	r5, [pc, #52]	@ (80034f4 <__libc_init_array+0x38>)
 80034c0:	4c0d      	ldr	r4, [pc, #52]	@ (80034f8 <__libc_init_array+0x3c>)
 80034c2:	1b64      	subs	r4, r4, r5
 80034c4:	10a4      	asrs	r4, r4, #2
 80034c6:	2600      	movs	r6, #0
 80034c8:	42a6      	cmp	r6, r4
 80034ca:	d109      	bne.n	80034e0 <__libc_init_array+0x24>
 80034cc:	4d0b      	ldr	r5, [pc, #44]	@ (80034fc <__libc_init_array+0x40>)
 80034ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003500 <__libc_init_array+0x44>)
 80034d0:	f000 f818 	bl	8003504 <_init>
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	2600      	movs	r6, #0
 80034da:	42a6      	cmp	r6, r4
 80034dc:	d105      	bne.n	80034ea <__libc_init_array+0x2e>
 80034de:	bd70      	pop	{r4, r5, r6, pc}
 80034e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e4:	4798      	blx	r3
 80034e6:	3601      	adds	r6, #1
 80034e8:	e7ee      	b.n	80034c8 <__libc_init_array+0xc>
 80034ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80034ee:	4798      	blx	r3
 80034f0:	3601      	adds	r6, #1
 80034f2:	e7f2      	b.n	80034da <__libc_init_array+0x1e>
 80034f4:	0800356c 	.word	0x0800356c
 80034f8:	0800356c 	.word	0x0800356c
 80034fc:	0800356c 	.word	0x0800356c
 8003500:	08003570 	.word	0x08003570

08003504 <_init>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	bf00      	nop
 8003508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350a:	bc08      	pop	{r3}
 800350c:	469e      	mov	lr, r3
 800350e:	4770      	bx	lr

08003510 <_fini>:
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003512:	bf00      	nop
 8003514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003516:	bc08      	pop	{r3}
 8003518:	469e      	mov	lr, r3
 800351a:	4770      	bx	lr
